[{"fields": {"model": "page", "app_label": "wagtailcore"}, "model": "contenttypes.contenttype", "pk": 1}, {"fields": {"model": "image", "app_label": "wagtailimages"}, "model": "contenttypes.contenttype", "pk": 2}, {"fields": {"model": "admin", "app_label": "wagtailadmin"}, "model": "contenttypes.contenttype", "pk": 3}, {"fields": {"model": "document", "app_label": "wagtaildocs"}, "model": "contenttypes.contenttype", "pk": 4}, {"fields": {"model": "permission", "app_label": "auth"}, "model": "contenttypes.contenttype", "pk": 5}, {"fields": {"model": "group", "app_label": "auth"}, "model": "contenttypes.contenttype", "pk": 6}, {"fields": {"model": "contenttype", "app_label": "contenttypes"}, "model": "contenttypes.contenttype", "pk": 7}, {"fields": {"model": "session", "app_label": "sessions"}, "model": "contenttypes.contenttype", "pk": 8}, {"fields": {"model": "site", "app_label": "sites"}, "model": "contenttypes.contenttype", "pk": 9}, {"fields": {"model": "logentry", "app_label": "admin"}, "model": "contenttypes.contenttype", "pk": 10}, {"fields": {"model": "emailaddress", "app_label": "account"}, "model": "contenttypes.contenttype", "pk": 11}, {"fields": {"model": "emailconfirmation", "app_label": "account"}, "model": "contenttypes.contenttype", "pk": 12}, {"fields": {"model": "socialapp", "app_label": "socialaccount"}, "model": "contenttypes.contenttype", "pk": 13}, {"fields": {"model": "socialaccount", "app_label": "socialaccount"}, "model": "contenttypes.contenttype", "pk": 14}, {"fields": {"model": "socialtoken", "app_label": "socialaccount"}, "model": "contenttypes.contenttype", "pk": 15}, {"fields": {"model": "tag", "app_label": "taggit"}, "model": "contenttypes.contenttype", "pk": 16}, {"fields": {"model": "taggeditem", "app_label": "taggit"}, "model": "contenttypes.contenttype", "pk": 17}, {"fields": {"model": "site", "app_label": "wagtailcore"}, "model": "contenttypes.contenttype", "pk": 18}, {"fields": {"model": "pagerevision", "app_label": "wagtailcore"}, "model": "contenttypes.contenttype", "pk": 19}, {"fields": {"model": "grouppagepermission", "app_label": "wagtailcore"}, "model": "contenttypes.contenttype", "pk": 20}, {"fields": {"model": "pageviewrestriction", "app_label": "wagtailcore"}, "model": "contenttypes.contenttype", "pk": 21}, {"fields": {"model": "query", "app_label": "wagtailsearch"}, "model": "contenttypes.contenttype", "pk": 22}, {"fields": {"model": "querydailyhits", "app_label": "wagtailsearch"}, "model": "contenttypes.contenttype", "pk": 23}, {"fields": {"model": "editorspick", "app_label": "wagtailsearch"}, "model": "contenttypes.contenttype", "pk": 24}, {"fields": {"model": "filter", "app_label": "wagtailimages"}, "model": "contenttypes.contenttype", "pk": 25}, {"fields": {"model": "rendition", "app_label": "wagtailimages"}, "model": "contenttypes.contenttype", "pk": 26}, {"fields": {"model": "userprofile", "app_label": "wagtailusers"}, "model": "contenttypes.contenttype", "pk": 27}, {"fields": {"model": "embed", "app_label": "wagtailembeds"}, "model": "contenttypes.contenttype", "pk": 28}, {"fields": {"model": "redirect", "app_label": "wagtailredirects"}, "model": "contenttypes.contenttype", "pk": 29}, {"fields": {"model": "formsubmission", "app_label": "wagtailforms"}, "model": "contenttypes.contenttype", "pk": 30}, {"fields": {"model": "user", "app_label": "users"}, "model": "contenttypes.contenttype", "pk": 31}, {"fields": {"model": "homepage", "app_label": "home"}, "model": "contenttypes.contenttype", "pk": 32}, {"fields": {"model": "blogindexpage", "app_label": "blog"}, "model": "contenttypes.contenttype", "pk": 33}, {"fields": {"model": "blogpostpage", "app_label": "blog"}, "model": "contenttypes.contenttype", "pk": 34}, {"fields": {"model": "aboutpage", "app_label": "about"}, "model": "contenttypes.contenttype", "pk": 35}, {"fields": {"model": "portofoliopage", "app_label": "portofolio"}, "model": "contenttypes.contenttype", "pk": 36}, {"fields": {"expire_date": "2015-08-26T15:14:41.700Z", "session_data": "NDliZjFlNWU2NGU4ZDQ5YTY0MWU0NjgyYzIyZThmYWExZjQ5NzgzMDp7Il9hdXRoX3VzZXJfaGFzaCI6ImE2ZjhjZjg4MjhjNzBiMDIzYjk5NTgxM2RlZDdjNjljZGMzMGViZjQiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxIn0="}, "model": "sessions.session", "pk": "i8tqpgnrilfh7j46f0nn2ucqccvpqdeh"}, {"fields": {"domain": "example.com", "name": "example.com"}, "model": "sites.site", "pk": 1}, {"fields": {"name": "portofolio", "slug": "portofolio"}, "model": "taggit.tag", "pk": 1}, {"fields": {"name": "home", "slug": "home"}, "model": "taggit.tag", "pk": 2}, {"fields": {"name": "post", "slug": "post"}, "model": "taggit.tag", "pk": 3}, {"fields": {"name": "index", "slug": "index"}, "model": "taggit.tag", "pk": 4}, {"fields": {"tag": 1, "content_type": 2, "object_id": 1}, "model": "taggit.taggeditem", "pk": 3}, {"fields": {"tag": 2, "content_type": 2, "object_id": 2}, "model": "taggit.taggeditem", "pk": 4}, {"fields": {"tag": 2, "content_type": 2, "object_id": 3}, "model": "taggit.taggeditem", "pk": 5}, {"fields": {"tag": 2, "content_type": 2, "object_id": 4}, "model": "taggit.taggeditem", "pk": 6}, {"fields": {"tag": 2, "content_type": 2, "object_id": 6}, "model": "taggit.taggeditem", "pk": 8}, {"fields": {"tag": 3, "content_type": 2, "object_id": 7}, "model": "taggit.taggeditem", "pk": 9}, {"fields": {"tag": 2, "content_type": 2, "object_id": 8}, "model": "taggit.taggeditem", "pk": 10}, {"fields": {"tag": 2, "content_type": 2, "object_id": 9}, "model": "taggit.taggeditem", "pk": 11}, {"fields": {"tag": 2, "content_type": 2, "object_id": 10}, "model": "taggit.taggeditem", "pk": 12}, {"fields": {"tag": 3, "content_type": 2, "object_id": 11}, "model": "taggit.taggeditem", "pk": 13}, {"fields": {"tag": 4, "content_type": 2, "object_id": 12}, "model": "taggit.taggeditem", "pk": 18}, {"fields": {"tag": 3, "content_type": 2, "object_id": 13}, "model": "taggit.taggeditem", "pk": 19}, {"fields": {"tag": 4, "content_type": 2, "object_id": 14}, "model": "taggit.taggeditem", "pk": 20}, {"fields": {"tag": 3, "content_type": 2, "object_id": 15}, "model": "taggit.taggeditem", "pk": 21}, {"fields": {"tag": 3, "content_type": 2, "object_id": 16}, "model": "taggit.taggeditem", "pk": 22}, {"fields": {"tag": 3, "content_type": 2, "object_id": 17}, "model": "taggit.taggeditem", "pk": 23}, {"fields": {"tag": 3, "content_type": 2, "object_id": 18}, "model": "taggit.taggeditem", "pk": 24}, {"fields": {"tag": 4, "content_type": 2, "object_id": 19}, "model": "taggit.taggeditem", "pk": 27}, {"fields": {"tag": 4, "content_type": 2, "object_id": 21}, "model": "taggit.taggeditem", "pk": 29}, {"fields": {"tag": 3, "content_type": 2, "object_id": 20}, "model": "taggit.taggeditem", "pk": 30}, {"fields": {"tag": 4, "content_type": 2, "object_id": 20}, "model": "taggit.taggeditem", "pk": 31}, {"fields": {"tag": 3, "content_type": 2, "object_id": 22}, "model": "taggit.taggeditem", "pk": 34}, {"fields": {"tag": 4, "content_type": 2, "object_id": 23}, "model": "taggit.taggeditem", "pk": 35}, {"fields": {"tag": 3, "content_type": 2, "object_id": 24}, "model": "taggit.taggeditem", "pk": 36}, {"fields": {"tag": 4, "content_type": 2, "object_id": 25}, "model": "taggit.taggeditem", "pk": 37}, {"fields": {"tag": 3, "content_type": 2, "object_id": 26}, "model": "taggit.taggeditem", "pk": 38}, {"fields": {"tag": 3, "content_type": 2, "object_id": 27}, "model": "taggit.taggeditem", "pk": 39}, {"fields": {"tag": 3, "content_type": 2, "object_id": 28}, "model": "taggit.taggeditem", "pk": 40}, {"fields": {"tag": 4, "content_type": 2, "object_id": 28}, "model": "taggit.taggeditem", "pk": 41}, {"fields": {"tag": 3, "content_type": 2, "object_id": 29}, "model": "taggit.taggeditem", "pk": 42}, {"fields": {"tag": 4, "content_type": 2, "object_id": 29}, "model": "taggit.taggeditem", "pk": 43}, {"fields": {"tag": 3, "content_type": 2, "object_id": 30}, "model": "taggit.taggeditem", "pk": 44}, {"fields": {"tag": 4, "content_type": 2, "object_id": 30}, "model": "taggit.taggeditem", "pk": 45}, {"fields": {"tag": 3, "content_type": 2, "object_id": 31}, "model": "taggit.taggeditem", "pk": 46}, {"fields": {"tag": 3, "content_type": 2, "object_id": 32}, "model": "taggit.taggeditem", "pk": 47}, {"fields": {"tag": 3, "content_type": 2, "object_id": 33}, "model": "taggit.taggeditem", "pk": 48}, {"fields": {"tag": 3, "content_type": 2, "object_id": 34}, "model": "taggit.taggeditem", "pk": 49}, {"fields": {"tag": 3, "content_type": 2, "object_id": 35}, "model": "taggit.taggeditem", "pk": 50}, {"fields": {"tag": 3, "content_type": 2, "object_id": 37}, "model": "taggit.taggeditem", "pk": 52}, {"fields": {"tag": 3, "content_type": 2, "object_id": 38}, "model": "taggit.taggeditem", "pk": 53}, {"fields": {"tag": 3, "content_type": 2, "object_id": 39}, "model": "taggit.taggeditem", "pk": 54}, {"fields": {"tag": 3, "content_type": 2, "object_id": 36}, "model": "taggit.taggeditem", "pk": 55}, {"fields": {"tag": 2, "content_type": 2, "object_id": 40}, "model": "taggit.taggeditem", "pk": 57}, {"fields": {"root_page": 3, "hostname": "127.0.0.1", "port": 8000, "is_default_site": false}, "model": "wagtailcore.site", "pk": 2}, {"fields": {"spec": "max-165x165"}, "model": "wagtailimages.filter", "pk": 1}, {"fields": {"spec": "max-130x100"}, "model": "wagtailimages.filter", "pk": 2}, {"fields": {"spec": "original"}, "model": "wagtailimages.filter", "pk": 3}, {"fields": {"spec": "max-800x600"}, "model": "wagtailimages.filter", "pk": 4}, {"fields": {"spec": "max-130x130"}, "model": "wagtailimages.filter", "pk": 5}, {"fields": {"image": 1, "focal_point_key": "", "filter": 1, "width": 165, "file": "images/Untitled.max-165x165.jpg", "height": 164}, "model": "wagtailimages.rendition", "pk": 6}, {"fields": {"image": 4, "focal_point_key": "", "filter": 1, "width": 165, "file": "images/Untitled34.max-165x165.png", "height": 86}, "model": "wagtailimages.rendition", "pk": 8}, {"fields": {"image": 3, "focal_point_key": "", "filter": 1, "width": 165, "file": "images/DSC03925.max-165x165.jpg", "height": 92}, "model": "wagtailimages.rendition", "pk": 9}, {"fields": {"image": 2, "focal_point_key": "", "filter": 1, "width": 165, "file": "images/Broadwell_Die_Diagonal_BWe.max-165x165.jpg", "height": 113}, "model": "wagtailimages.rendition", "pk": 10}, {"fields": {"image": 2, "focal_point_key": "", "filter": 3, "width": 1600, "file": "images/Broadwell_Die_Diagonal_BWe.original.jpg", "height": 1096}, "model": "wagtailimages.rendition", "pk": 11}, {"fields": {"image": 2, "focal_point_key": "", "filter": 4, "width": 800, "file": "images/Broadwell_Die_Diagonal_BWe.max-800x600.jpg", "height": 548}, "model": "wagtailimages.rendition", "pk": 12}, {"fields": {"image": 3, "focal_point_key": "", "filter": 3, "width": 1920, "file": "images/DSC03925.original.jpg", "height": 1077}, "model": "wagtailimages.rendition", "pk": 13}, {"fields": {"image": 3, "focal_point_key": "", "filter": 4, "width": 800, "file": "images/DSC03925.max-800x600.jpg", "height": 448}, "model": "wagtailimages.rendition", "pk": 14}, {"fields": {"image": 4, "focal_point_key": "", "filter": 3, "width": 1598, "file": "images/Untitled34.original.png", "height": 841}, "model": "wagtailimages.rendition", "pk": 15}, {"fields": {"image": 4, "focal_point_key": "", "filter": 4, "width": 800, "file": "images/Untitled34.max-800x600.png", "height": 421}, "model": "wagtailimages.rendition", "pk": 16}, {"fields": {"image": 6, "focal_point_key": "", "filter": 1, "width": 165, "file": "images/2015-06-19_00030.max-165x165.jpg", "height": 76}, "model": "wagtailimages.rendition", "pk": 19}, {"fields": {"image": 7, "focal_point_key": "", "filter": 2, "width": 130, "file": "images/open_source_free.max-130x100.jpg", "height": 76}, "model": "wagtailimages.rendition", "pk": 20}, {"fields": {"image": 7, "focal_point_key": "", "filter": 1, "width": 165, "file": "images/open_source_free.max-165x165.jpg", "height": 96}, "model": "wagtailimages.rendition", "pk": 21}, {"fields": {"image": 7, "focal_point_key": "", "filter": 3, "width": 580, "file": "images/open_source_free.original.jpg", "height": 340}, "model": "wagtailimages.rendition", "pk": 22}, {"fields": {"image": 7, "focal_point_key": "", "filter": 4, "width": 580, "file": "images/open_source_free.max-800x600.jpg", "height": 340}, "model": "wagtailimages.rendition", "pk": 23}, {"fields": {"image": 8, "focal_point_key": "", "filter": 1, "width": 165, "file": "images/square2.max-165x165.jpg", "height": 165}, "model": "wagtailimages.rendition", "pk": 24}, {"fields": {"image": 7, "focal_point_key": "", "filter": 5, "width": 130, "file": "images/open_source_free.max-130x130.jpg", "height": 76}, "model": "wagtailimages.rendition", "pk": 25}, {"fields": {"image": 10, "focal_point_key": "", "filter": 1, "width": 64, "file": "images/steamIconcopy.max-165x165.jpg", "height": 64}, "model": "wagtailimages.rendition", "pk": 26}, {"fields": {"image": 9, "focal_point_key": "", "filter": 1, "width": 64, "file": "images/GitHub-Mark-64px.max-165x165.png", "height": 64}, "model": "wagtailimages.rendition", "pk": 27}, {"fields": {"image": 11, "focal_point_key": "", "filter": 2, "width": 130, "file": "images/mantle1920.max-130x100.jpg", "height": 70}, "model": "wagtailimages.rendition", "pk": 28}, {"fields": {"image": 11, "focal_point_key": "", "filter": 1, "width": 165, "file": "images/mantle1920.max-165x165.jpg", "height": 89}, "model": "wagtailimages.rendition", "pk": 29}, {"fields": {"image": 11, "focal_point_key": "", "filter": 5, "width": 130, "file": "images/mantle1920.max-130x130.jpg", "height": 70}, "model": "wagtailimages.rendition", "pk": 31}, {"fields": {"image": 12, "focal_point_key": "", "filter": 1, "width": 165, "file": "images/mantle1920thumb.max-165x165.jpg", "height": 18}, "model": "wagtailimages.rendition", "pk": 45}, {"fields": {"image": 13, "focal_point_key": "", "filter": 2, "width": 130, "file": "images/kivy13-featured.max-130x100.jpg", "height": 55}, "model": "wagtailimages.rendition", "pk": 46}, {"fields": {"image": 13, "focal_point_key": "", "filter": 1, "width": 165, "file": "images/kivy13-featured.max-165x165.jpg", "height": 70}, "model": "wagtailimages.rendition", "pk": 47}, {"fields": {"image": 14, "focal_point_key": "", "filter": 2, "width": 130, "file": "images/kivy13-featured-thumb.max-130x100.jpg", "height": 15}, "model": "wagtailimages.rendition", "pk": 48}, {"fields": {"image": 14, "focal_point_key": "", "filter": 1, "width": 165, "file": "images/kivy13-featured-thumb.max-165x165.jpg", "height": 19}, "model": "wagtailimages.rendition", "pk": 49}, {"fields": {"image": 15, "focal_point_key": "", "filter": 2, "width": 130, "file": "images/Capture2.max-130x100.jpg", "height": 57}, "model": "wagtailimages.rendition", "pk": 50}, {"fields": {"image": 15, "focal_point_key": "", "filter": 1, "width": 165, "file": "images/Capture2.max-165x165.jpg", "height": 72}, "model": "wagtailimages.rendition", "pk": 51}, {"fields": {"image": 16, "focal_point_key": "", "filter": 2, "width": 130, "file": "images/screen480x480.max-130x100.jpg", "height": 97}, "model": "wagtailimages.rendition", "pk": 52}, {"fields": {"image": 16, "focal_point_key": "", "filter": 1, "width": 165, "file": "images/screen480x480.max-165x165.jpg", "height": 123}, "model": "wagtailimages.rendition", "pk": 53}, {"fields": {"image": 17, "focal_point_key": "", "filter": 2, "width": 56, "file": "images/Capture.max-130x100.jpg", "height": 100}, "model": "wagtailimages.rendition", "pk": 54}, {"fields": {"image": 13, "focal_point_key": "", "filter": 5, "width": 130, "file": "images/kivy13-featured.max-130x130.jpg", "height": 55}, "model": "wagtailimages.rendition", "pk": 55}, {"fields": {"image": 14, "focal_point_key": "", "filter": 5, "width": 130, "file": "images/kivy13-featured-thumb.max-130x130.jpg", "height": 15}, "model": "wagtailimages.rendition", "pk": 56}, {"fields": {"image": 15, "focal_point_key": "", "filter": 5, "width": 130, "file": "images/Capture2.max-130x130.jpg", "height": 57}, "model": "wagtailimages.rendition", "pk": 57}, {"fields": {"image": 16, "focal_point_key": "", "filter": 5, "width": 130, "file": "images/screen480x480.max-130x130.jpg", "height": 97}, "model": "wagtailimages.rendition", "pk": 58}, {"fields": {"image": 17, "focal_point_key": "", "filter": 5, "width": 73, "file": "images/Capture.max-130x130.jpg", "height": 130}, "model": "wagtailimages.rendition", "pk": 59}, {"fields": {"image": 17, "focal_point_key": "", "filter": 1, "width": 93, "file": "images/Capture.max-165x165.jpg", "height": 165}, "model": "wagtailimages.rendition", "pk": 60}, {"fields": {"image": 18, "focal_point_key": "", "filter": 2, "width": 130, "file": "images/featured.max-130x100.jpg", "height": 50}, "model": "wagtailimages.rendition", "pk": 61}, {"fields": {"image": 18, "focal_point_key": "", "filter": 1, "width": 165, "file": "images/featured.max-165x165.jpg", "height": 63}, "model": "wagtailimages.rendition", "pk": 62}, {"fields": {"image": 18, "focal_point_key": "", "filter": 5, "width": 130, "file": "images/featured.max-130x130.jpg", "height": 50}, "model": "wagtailimages.rendition", "pk": 64}, {"fields": {"image": 19, "focal_point_key": "", "filter": 1, "width": 165, "file": "images/featured-thumb.max-165x165.jpg", "height": 21}, "model": "wagtailimages.rendition", "pk": 71}, {"fields": {"image": 19, "focal_point_key": "", "filter": 5, "width": 130, "file": "images/featured-thumb.max-130x130.jpg", "height": 16}, "model": "wagtailimages.rendition", "pk": 72}, {"fields": {"image": 20, "focal_point_key": "", "filter": 2, "width": 130, "file": "images/Capture_aazr0dW.max-130x100.jpg", "height": 57}, "model": "wagtailimages.rendition", "pk": 73}, {"fields": {"image": 20, "focal_point_key": "", "filter": 1, "width": 165, "file": "images/Capture_aazr0dW.max-165x165.jpg", "height": 73}, "model": "wagtailimages.rendition", "pk": 74}, {"fields": {"image": 21, "focal_point_key": "", "filter": 2, "width": 130, "file": "images/Capture-thumb.max-130x100.jpg", "height": 13}, "model": "wagtailimages.rendition", "pk": 75}, {"fields": {"image": 20, "focal_point_key": "", "filter": 5, "width": 130, "file": "images/Capture_aazr0dW.max-130x130.jpg", "height": 57}, "model": "wagtailimages.rendition", "pk": 76}, {"fields": {"image": 21, "focal_point_key": "", "filter": 5, "width": 130, "file": "images/Capture-thumb.max-130x130.jpg", "height": 13}, "model": "wagtailimages.rendition", "pk": 77}, {"fields": {"image": 21, "focal_point_key": "", "filter": 1, "width": 165, "file": "images/Capture-thumb.max-165x165.jpg", "height": 16}, "model": "wagtailimages.rendition", "pk": 78}, {"fields": {"image": 20, "focal_point_key": "", "filter": 3, "width": 1182, "file": "images/Capture_aazr0dW.original.jpg", "height": 524}, "model": "wagtailimages.rendition", "pk": 79}, {"fields": {"image": 20, "focal_point_key": "", "filter": 4, "width": 800, "file": "images/Capture_aazr0dW.max-800x600.jpg", "height": 354}, "model": "wagtailimages.rendition", "pk": 80}, {"fields": {"image": 22, "focal_point_key": "", "filter": 2, "width": 130, "file": "images/ORMMapping.max-130x100.png", "height": 66}, "model": "wagtailimages.rendition", "pk": 81}, {"fields": {"image": 22, "focal_point_key": "", "filter": 5, "width": 130, "file": "images/ORMMapping.max-130x130.png", "height": 66}, "model": "wagtailimages.rendition", "pk": 82}, {"fields": {"image": 22, "focal_point_key": "", "filter": 1, "width": 165, "file": "images/ORMMapping.max-165x165.png", "height": 84}, "model": "wagtailimages.rendition", "pk": 83}, {"fields": {"image": 22, "focal_point_key": "", "filter": 3, "width": 700, "file": "images/ORMMapping.original.png", "height": 359}, "model": "wagtailimages.rendition", "pk": 84}, {"fields": {"image": 22, "focal_point_key": "", "filter": 4, "width": 700, "file": "images/ORMMapping.max-800x600.png", "height": 359}, "model": "wagtailimages.rendition", "pk": 85}, {"fields": {"image": 23, "focal_point_key": "", "filter": 2, "width": 130, "file": "images/thumb.max-130x100.png", "height": 29}, "model": "wagtailimages.rendition", "pk": 86}, {"fields": {"image": 23, "focal_point_key": "", "filter": 5, "width": 130, "file": "images/thumb.max-130x130.png", "height": 29}, "model": "wagtailimages.rendition", "pk": 87}, {"fields": {"image": 23, "focal_point_key": "", "filter": 1, "width": 165, "file": "images/thumb.max-165x165.png", "height": 37}, "model": "wagtailimages.rendition", "pk": 88}, {"fields": {"image": 24, "focal_point_key": "", "filter": 2, "width": 130, "file": "images/featured.max-130x100.png", "height": 63}, "model": "wagtailimages.rendition", "pk": 89}, {"fields": {"image": 24, "focal_point_key": "", "filter": 1, "width": 165, "file": "images/featured.max-165x165.png", "height": 80}, "model": "wagtailimages.rendition", "pk": 90}, {"fields": {"image": 25, "focal_point_key": "", "filter": 2, "width": 130, "file": "images/cropped.max-130x100.png", "height": 27}, "model": "wagtailimages.rendition", "pk": 91}, {"fields": {"image": 24, "focal_point_key": "", "filter": 5, "width": 130, "file": "images/featured.max-130x130.png", "height": 63}, "model": "wagtailimages.rendition", "pk": 92}, {"fields": {"image": 25, "focal_point_key": "", "filter": 5, "width": 130, "file": "images/cropped.max-130x130.png", "height": 27}, "model": "wagtailimages.rendition", "pk": 93}, {"fields": {"image": 25, "focal_point_key": "", "filter": 1, "width": 165, "file": "images/cropped.max-165x165.png", "height": 34}, "model": "wagtailimages.rendition", "pk": 94}, {"fields": {"image": 26, "focal_point_key": "", "filter": 2, "width": 127, "file": "images/2.max-130x100.png", "height": 100}, "model": "wagtailimages.rendition", "pk": 95}, {"fields": {"image": 26, "focal_point_key": "", "filter": 5, "width": 130, "file": "images/2.max-130x130.png", "height": 101}, "model": "wagtailimages.rendition", "pk": 96}, {"fields": {"image": 26, "focal_point_key": "", "filter": 1, "width": 165, "file": "images/2.max-165x165.png", "height": 129}, "model": "wagtailimages.rendition", "pk": 97}, {"fields": {"image": 27, "focal_point_key": "", "filter": 2, "width": 126, "file": "images/3.max-130x100.png", "height": 100}, "model": "wagtailimages.rendition", "pk": 98}, {"fields": {"image": 27, "focal_point_key": "", "filter": 5, "width": 130, "file": "images/3.max-130x130.png", "height": 103}, "model": "wagtailimages.rendition", "pk": 99}, {"fields": {"image": 27, "focal_point_key": "", "filter": 1, "width": 165, "file": "images/3.max-165x165.png", "height": 130}, "model": "wagtailimages.rendition", "pk": 100}, {"fields": {"image": 28, "focal_point_key": "", "filter": 2, "width": 130, "file": "images/featured_lYZ2Z2l.max-130x100.jpg", "height": 75}, "model": "wagtailimages.rendition", "pk": 101}, {"fields": {"image": 28, "focal_point_key": "", "filter": 1, "width": 165, "file": "images/featured_lYZ2Z2l.max-165x165.jpg", "height": 96}, "model": "wagtailimages.rendition", "pk": 102}, {"fields": {"image": 28, "focal_point_key": "", "filter": 5, "width": 130, "file": "images/featured_lYZ2Z2l.max-130x130.jpg", "height": 75}, "model": "wagtailimages.rendition", "pk": 103}, {"fields": {"image": 29, "focal_point_key": "", "filter": 2, "width": 130, "file": "images/Capture.max-130x100.png", "height": 74}, "model": "wagtailimages.rendition", "pk": 104}, {"fields": {"image": 29, "focal_point_key": "", "filter": 5, "width": 130, "file": "images/Capture.max-130x130.png", "height": 74}, "model": "wagtailimages.rendition", "pk": 105}, {"fields": {"image": 29, "focal_point_key": "", "filter": 1, "width": 165, "file": "images/Capture.max-165x165.png", "height": 94}, "model": "wagtailimages.rendition", "pk": 106}, {"fields": {"image": 30, "focal_point_key": "", "filter": 2, "width": 130, "file": "images/8e.max-130x100.png", "height": 61}, "model": "wagtailimages.rendition", "pk": 107}, {"fields": {"image": 30, "focal_point_key": "", "filter": 1, "width": 165, "file": "images/8e.max-165x165.png", "height": 77}, "model": "wagtailimages.rendition", "pk": 108}, {"fields": {"image": 12, "focal_point_key": "", "filter": 5, "width": 130, "file": "images/mantle1920thumb.max-130x130.jpg", "height": 14}, "model": "wagtailimages.rendition", "pk": 109}, {"fields": {"image": 30, "focal_point_key": "", "filter": 5, "width": 130, "file": "images/8e.max-130x130.png", "height": 61}, "model": "wagtailimages.rendition", "pk": 110}, {"fields": {"image": 31, "focal_point_key": "", "filter": 2, "width": 130, "file": "images/branchmangement3.max-130x100.png", "height": 84}, "model": "wagtailimages.rendition", "pk": 111}, {"fields": {"image": 31, "focal_point_key": "", "filter": 1, "width": 165, "file": "images/branchmangement3.max-165x165.png", "height": 107}, "model": "wagtailimages.rendition", "pk": 112}, {"fields": {"image": 32, "focal_point_key": "", "filter": 2, "width": 130, "file": "images/1.max-130x100.png", "height": 70}, "model": "wagtailimages.rendition", "pk": 113}, {"fields": {"image": 32, "focal_point_key": "", "filter": 1, "width": 165, "file": "images/1.max-165x165.png", "height": 89}, "model": "wagtailimages.rendition", "pk": 114}, {"fields": {"image": 33, "focal_point_key": "", "filter": 2, "width": 130, "file": "images/2_JpPCz7R.max-130x100.png", "height": 54}, "model": "wagtailimages.rendition", "pk": 115}, {"fields": {"image": 31, "focal_point_key": "", "filter": 5, "width": 130, "file": "images/branchmangement3.max-130x130.png", "height": 84}, "model": "wagtailimages.rendition", "pk": 116}, {"fields": {"image": 32, "focal_point_key": "", "filter": 5, "width": 130, "file": "images/1.max-130x130.png", "height": 70}, "model": "wagtailimages.rendition", "pk": 117}, {"fields": {"image": 33, "focal_point_key": "", "filter": 5, "width": 130, "file": "images/2_JpPCz7R.max-130x130.png", "height": 54}, "model": "wagtailimages.rendition", "pk": 118}, {"fields": {"image": 33, "focal_point_key": "", "filter": 1, "width": 165, "file": "images/2_JpPCz7R.max-165x165.png", "height": 69}, "model": "wagtailimages.rendition", "pk": 119}, {"fields": {"image": 34, "focal_point_key": "", "filter": 2, "width": 130, "file": "images/3_98Awqwj.max-130x100.png", "height": 54}, "model": "wagtailimages.rendition", "pk": 120}, {"fields": {"image": 34, "focal_point_key": "", "filter": 1, "width": 165, "file": "images/3_98Awqwj.max-165x165.png", "height": 69}, "model": "wagtailimages.rendition", "pk": 121}, {"fields": {"image": 35, "focal_point_key": "", "filter": 2, "width": 130, "file": "images/4.max-130x100.png", "height": 54}, "model": "wagtailimages.rendition", "pk": 122}, {"fields": {"image": 35, "focal_point_key": "", "filter": 1, "width": 165, "file": "images/4.max-165x165.png", "height": 69}, "model": "wagtailimages.rendition", "pk": 123}, {"fields": {"image": 36, "focal_point_key": "", "filter": 2, "width": 130, "file": "images/5.max-130x100.png", "height": 50}, "model": "wagtailimages.rendition", "pk": 124}, {"fields": {"image": 36, "focal_point_key": "", "filter": 1, "width": 165, "file": "images/5.max-165x165.png", "height": 63}, "model": "wagtailimages.rendition", "pk": 125}, {"fields": {"image": 37, "focal_point_key": "", "filter": 2, "width": 130, "file": "images/6.max-130x100.png", "height": 40}, "model": "wagtailimages.rendition", "pk": 126}, {"fields": {"image": 37, "focal_point_key": "", "filter": 1, "width": 165, "file": "images/6.max-165x165.png", "height": 51}, "model": "wagtailimages.rendition", "pk": 127}, {"fields": {"image": 38, "focal_point_key": "", "filter": 2, "width": 130, "file": "images/7.max-130x100.png", "height": 83}, "model": "wagtailimages.rendition", "pk": 128}, {"fields": {"image": 38, "focal_point_key": "", "filter": 1, "width": 165, "file": "images/7.max-165x165.png", "height": 106}, "model": "wagtailimages.rendition", "pk": 129}, {"fields": {"image": 39, "focal_point_key": "", "filter": 2, "width": 130, "file": "images/8.max-130x100.png", "height": 57}, "model": "wagtailimages.rendition", "pk": 130}, {"fields": {"image": 34, "focal_point_key": "", "filter": 5, "width": 130, "file": "images/3_98Awqwj.max-130x130.png", "height": 54}, "model": "wagtailimages.rendition", "pk": 131}, {"fields": {"image": 35, "focal_point_key": "", "filter": 5, "width": 130, "file": "images/4.max-130x130.png", "height": 54}, "model": "wagtailimages.rendition", "pk": 132}, {"fields": {"image": 36, "focal_point_key": "", "filter": 5, "width": 130, "file": "images/5.max-130x130.png", "height": 50}, "model": "wagtailimages.rendition", "pk": 133}, {"fields": {"image": 37, "focal_point_key": "", "filter": 5, "width": 130, "file": "images/6.max-130x130.png", "height": 40}, "model": "wagtailimages.rendition", "pk": 134}, {"fields": {"image": 38, "focal_point_key": "", "filter": 5, "width": 130, "file": "images/7.max-130x130.png", "height": 83}, "model": "wagtailimages.rendition", "pk": 135}, {"fields": {"image": 39, "focal_point_key": "", "filter": 5, "width": 130, "file": "images/8.max-130x130.png", "height": 57}, "model": "wagtailimages.rendition", "pk": 136}, {"fields": {"image": 35, "focal_point_key": "", "filter": 3, "width": 597, "file": "images/4.original.png", "height": 252}, "model": "wagtailimages.rendition", "pk": 137}, {"fields": {"image": 35, "focal_point_key": "", "filter": 4, "width": 597, "file": "images/4.max-800x600.png", "height": 252}, "model": "wagtailimages.rendition", "pk": 138}, {"fields": {"image": 38, "focal_point_key": "", "filter": 3, "width": 1063, "file": "images/7.original.png", "height": 685}, "model": "wagtailimages.rendition", "pk": 139}, {"fields": {"image": 38, "focal_point_key": "", "filter": 4, "width": 800, "file": "images/7.max-800x600.png", "height": 515}, "model": "wagtailimages.rendition", "pk": 140}, {"fields": {"image": 39, "focal_point_key": "", "filter": 1, "width": 165, "file": "images/8.max-165x165.png", "height": 72}, "model": "wagtailimages.rendition", "pk": 141}, {"fields": {"image": 36, "focal_point_key": "", "filter": 3, "width": 653, "file": "images/5.original.png", "height": 252}, "model": "wagtailimages.rendition", "pk": 142}, {"fields": {"image": 36, "focal_point_key": "", "filter": 4, "width": 653, "file": "images/5.max-800x600.png", "height": 252}, "model": "wagtailimages.rendition", "pk": 143}, {"fields": {"image": 40, "focal_point_key": "", "filter": 1, "width": 165, "file": "images/cover3.max-165x165.jpg", "height": 77}, "model": "wagtailimages.rendition", "pk": 148}, {"fields": {"last_updated": "2015-08-14T01:09:01.008Z", "title": "Kivy crash course 1: Making a simple App", "url": "https://www.youtube.com/watch?v=F7UKmK9eQLY&list=PLdNh1e1kmiPP4YApJm8ENK2yMlwF1_edq", "author_name": "Alexander Taylor", "height": 344, "width": 459, "html": "<iframe width=\"459\" height=\"344\" src=\"https://www.youtube.com/embed/videoseries?list=PLdNh1e1kmiPP4YApJm8ENK2yMlwF1_edq\" frameborder=\"0\" allowfullscreen></iframe>", "max_width": null, "provider_name": "YouTube", "thumbnail_url": "https://i.ytimg.com/vi/F7UKmK9eQLY/hqdefault.jpg", "type": "video"}, "model": "wagtailembeds.embed", "pk": 1}, {"fields": {"last_updated": "2015-08-14T01:09:01.887Z", "title": "Kivy crash course 1: Making a simple App", "url": "https://www.youtube.com/watch?v=F7UKmK9eQLY&list=PLdNh1e1kmiPP4YApJm8ENK2yMlwF1_edq", "author_name": "Alexander Taylor", "height": 344, "width": 459, "html": "<iframe width=\"459\" height=\"344\" src=\"https://www.youtube.com/embed/videoseries?list=PLdNh1e1kmiPP4YApJm8ENK2yMlwF1_edq\" frameborder=\"0\" allowfullscreen></iframe>", "max_width": null, "provider_name": "YouTube", "thumbnail_url": "https://i.ytimg.com/vi/F7UKmK9eQLY/hqdefault.jpg", "type": "video"}, "model": "wagtailembeds.embed", "pk": 2}, {"fields": {"codename": "add_image", "name": "Can add image", "content_type": 2}, "model": "auth.permission", "pk": 1}, {"fields": {"codename": "change_image", "name": "Can change image", "content_type": 2}, "model": "auth.permission", "pk": 2}, {"fields": {"codename": "delete_image", "name": "Can delete image", "content_type": 2}, "model": "auth.permission", "pk": 3}, {"fields": {"codename": "access_admin", "name": "Can access Wagtail admin", "content_type": 3}, "model": "auth.permission", "pk": 4}, {"fields": {"codename": "add_document", "name": "Can add document", "content_type": 4}, "model": "auth.permission", "pk": 5}, {"fields": {"codename": "change_document", "name": "Can change document", "content_type": 4}, "model": "auth.permission", "pk": 6}, {"fields": {"codename": "delete_document", "name": "Can delete document", "content_type": 4}, "model": "auth.permission", "pk": 7}, {"fields": {"codename": "add_permission", "name": "Can add permission", "content_type": 5}, "model": "auth.permission", "pk": 8}, {"fields": {"codename": "change_permission", "name": "Can change permission", "content_type": 5}, "model": "auth.permission", "pk": 9}, {"fields": {"codename": "delete_permission", "name": "Can delete permission", "content_type": 5}, "model": "auth.permission", "pk": 10}, {"fields": {"codename": "add_group", "name": "Can add group", "content_type": 6}, "model": "auth.permission", "pk": 11}, {"fields": {"codename": "change_group", "name": "Can change group", "content_type": 6}, "model": "auth.permission", "pk": 12}, {"fields": {"codename": "delete_group", "name": "Can delete group", "content_type": 6}, "model": "auth.permission", "pk": 13}, {"fields": {"codename": "add_contenttype", "name": "Can add content type", "content_type": 7}, "model": "auth.permission", "pk": 14}, {"fields": {"codename": "change_contenttype", "name": "Can change content type", "content_type": 7}, "model": "auth.permission", "pk": 15}, {"fields": {"codename": "delete_contenttype", "name": "Can delete content type", "content_type": 7}, "model": "auth.permission", "pk": 16}, {"fields": {"codename": "add_session", "name": "Can add session", "content_type": 8}, "model": "auth.permission", "pk": 17}, {"fields": {"codename": "change_session", "name": "Can change session", "content_type": 8}, "model": "auth.permission", "pk": 18}, {"fields": {"codename": "delete_session", "name": "Can delete session", "content_type": 8}, "model": "auth.permission", "pk": 19}, {"fields": {"codename": "add_site", "name": "Can add site", "content_type": 9}, "model": "auth.permission", "pk": 20}, {"fields": {"codename": "change_site", "name": "Can change site", "content_type": 9}, "model": "auth.permission", "pk": 21}, {"fields": {"codename": "delete_site", "name": "Can delete site", "content_type": 9}, "model": "auth.permission", "pk": 22}, {"fields": {"codename": "add_logentry", "name": "Can add log entry", "content_type": 10}, "model": "auth.permission", "pk": 23}, {"fields": {"codename": "change_logentry", "name": "Can change log entry", "content_type": 10}, "model": "auth.permission", "pk": 24}, {"fields": {"codename": "delete_logentry", "name": "Can delete log entry", "content_type": 10}, "model": "auth.permission", "pk": 25}, {"fields": {"codename": "add_emailaddress", "name": "Can add email address", "content_type": 11}, "model": "auth.permission", "pk": 26}, {"fields": {"codename": "change_emailaddress", "name": "Can change email address", "content_type": 11}, "model": "auth.permission", "pk": 27}, {"fields": {"codename": "delete_emailaddress", "name": "Can delete email address", "content_type": 11}, "model": "auth.permission", "pk": 28}, {"fields": {"codename": "add_emailconfirmation", "name": "Can add email confirmation", "content_type": 12}, "model": "auth.permission", "pk": 29}, {"fields": {"codename": "change_emailconfirmation", "name": "Can change email confirmation", "content_type": 12}, "model": "auth.permission", "pk": 30}, {"fields": {"codename": "delete_emailconfirmation", "name": "Can delete email confirmation", "content_type": 12}, "model": "auth.permission", "pk": 31}, {"fields": {"codename": "add_socialapp", "name": "Can add social application", "content_type": 13}, "model": "auth.permission", "pk": 32}, {"fields": {"codename": "change_socialapp", "name": "Can change social application", "content_type": 13}, "model": "auth.permission", "pk": 33}, {"fields": {"codename": "delete_socialapp", "name": "Can delete social application", "content_type": 13}, "model": "auth.permission", "pk": 34}, {"fields": {"codename": "add_socialaccount", "name": "Can add social account", "content_type": 14}, "model": "auth.permission", "pk": 35}, {"fields": {"codename": "change_socialaccount", "name": "Can change social account", "content_type": 14}, "model": "auth.permission", "pk": 36}, {"fields": {"codename": "delete_socialaccount", "name": "Can delete social account", "content_type": 14}, "model": "auth.permission", "pk": 37}, {"fields": {"codename": "add_socialtoken", "name": "Can add social application token", "content_type": 15}, "model": "auth.permission", "pk": 38}, {"fields": {"codename": "change_socialtoken", "name": "Can change social application token", "content_type": 15}, "model": "auth.permission", "pk": 39}, {"fields": {"codename": "delete_socialtoken", "name": "Can delete social application token", "content_type": 15}, "model": "auth.permission", "pk": 40}, {"fields": {"codename": "add_tag", "name": "Can add Tag", "content_type": 16}, "model": "auth.permission", "pk": 41}, {"fields": {"codename": "change_tag", "name": "Can change Tag", "content_type": 16}, "model": "auth.permission", "pk": 42}, {"fields": {"codename": "delete_tag", "name": "Can delete Tag", "content_type": 16}, "model": "auth.permission", "pk": 43}, {"fields": {"codename": "add_taggeditem", "name": "Can add Tagged Item", "content_type": 17}, "model": "auth.permission", "pk": 44}, {"fields": {"codename": "change_taggeditem", "name": "Can change Tagged Item", "content_type": 17}, "model": "auth.permission", "pk": 45}, {"fields": {"codename": "delete_taggeditem", "name": "Can delete Tagged Item", "content_type": 17}, "model": "auth.permission", "pk": 46}, {"fields": {"codename": "add_site", "name": "Can add Site", "content_type": 18}, "model": "auth.permission", "pk": 47}, {"fields": {"codename": "change_site", "name": "Can change Site", "content_type": 18}, "model": "auth.permission", "pk": 48}, {"fields": {"codename": "delete_site", "name": "Can delete Site", "content_type": 18}, "model": "auth.permission", "pk": 49}, {"fields": {"codename": "add_page", "name": "Can add page", "content_type": 1}, "model": "auth.permission", "pk": 50}, {"fields": {"codename": "change_page", "name": "Can change page", "content_type": 1}, "model": "auth.permission", "pk": 51}, {"fields": {"codename": "delete_page", "name": "Can delete page", "content_type": 1}, "model": "auth.permission", "pk": 52}, {"fields": {"codename": "add_pagerevision", "name": "Can add Page Revision", "content_type": 19}, "model": "auth.permission", "pk": 53}, {"fields": {"codename": "change_pagerevision", "name": "Can change Page Revision", "content_type": 19}, "model": "auth.permission", "pk": 54}, {"fields": {"codename": "delete_pagerevision", "name": "Can delete Page Revision", "content_type": 19}, "model": "auth.permission", "pk": 55}, {"fields": {"codename": "add_grouppagepermission", "name": "Can add Group Page Permission", "content_type": 20}, "model": "auth.permission", "pk": 56}, {"fields": {"codename": "change_grouppagepermission", "name": "Can change Group Page Permission", "content_type": 20}, "model": "auth.permission", "pk": 57}, {"fields": {"codename": "delete_grouppagepermission", "name": "Can delete Group Page Permission", "content_type": 20}, "model": "auth.permission", "pk": 58}, {"fields": {"codename": "add_pageviewrestriction", "name": "Can add Page View Restriction", "content_type": 21}, "model": "auth.permission", "pk": 59}, {"fields": {"codename": "change_pageviewrestriction", "name": "Can change Page View Restriction", "content_type": 21}, "model": "auth.permission", "pk": 60}, {"fields": {"codename": "delete_pageviewrestriction", "name": "Can delete Page View Restriction", "content_type": 21}, "model": "auth.permission", "pk": 61}, {"fields": {"codename": "add_query", "name": "Can add query", "content_type": 22}, "model": "auth.permission", "pk": 62}, {"fields": {"codename": "change_query", "name": "Can change query", "content_type": 22}, "model": "auth.permission", "pk": 63}, {"fields": {"codename": "delete_query", "name": "Can delete query", "content_type": 22}, "model": "auth.permission", "pk": 64}, {"fields": {"codename": "add_querydailyhits", "name": "Can add Query Daily Hits", "content_type": 23}, "model": "auth.permission", "pk": 65}, {"fields": {"codename": "change_querydailyhits", "name": "Can change Query Daily Hits", "content_type": 23}, "model": "auth.permission", "pk": 66}, {"fields": {"codename": "delete_querydailyhits", "name": "Can delete Query Daily Hits", "content_type": 23}, "model": "auth.permission", "pk": 67}, {"fields": {"codename": "add_editorspick", "name": "Can add Editor's Pick", "content_type": 24}, "model": "auth.permission", "pk": 68}, {"fields": {"codename": "change_editorspick", "name": "Can change Editor's Pick", "content_type": 24}, "model": "auth.permission", "pk": 69}, {"fields": {"codename": "delete_editorspick", "name": "Can delete Editor's Pick", "content_type": 24}, "model": "auth.permission", "pk": 70}, {"fields": {"codename": "add_filter", "name": "Can add filter", "content_type": 25}, "model": "auth.permission", "pk": 71}, {"fields": {"codename": "change_filter", "name": "Can change filter", "content_type": 25}, "model": "auth.permission", "pk": 72}, {"fields": {"codename": "delete_filter", "name": "Can delete filter", "content_type": 25}, "model": "auth.permission", "pk": 73}, {"fields": {"codename": "add_rendition", "name": "Can add rendition", "content_type": 26}, "model": "auth.permission", "pk": 74}, {"fields": {"codename": "change_rendition", "name": "Can change rendition", "content_type": 26}, "model": "auth.permission", "pk": 75}, {"fields": {"codename": "delete_rendition", "name": "Can delete rendition", "content_type": 26}, "model": "auth.permission", "pk": 76}, {"fields": {"codename": "add_userprofile", "name": "Can add User Profile", "content_type": 27}, "model": "auth.permission", "pk": 77}, {"fields": {"codename": "change_userprofile", "name": "Can change User Profile", "content_type": 27}, "model": "auth.permission", "pk": 78}, {"fields": {"codename": "delete_userprofile", "name": "Can delete User Profile", "content_type": 27}, "model": "auth.permission", "pk": 79}, {"fields": {"codename": "add_embed", "name": "Can add Embed", "content_type": 28}, "model": "auth.permission", "pk": 80}, {"fields": {"codename": "change_embed", "name": "Can change Embed", "content_type": 28}, "model": "auth.permission", "pk": 81}, {"fields": {"codename": "delete_embed", "name": "Can delete Embed", "content_type": 28}, "model": "auth.permission", "pk": 82}, {"fields": {"codename": "add_redirect", "name": "Can add Redirect", "content_type": 29}, "model": "auth.permission", "pk": 83}, {"fields": {"codename": "change_redirect", "name": "Can change Redirect", "content_type": 29}, "model": "auth.permission", "pk": 84}, {"fields": {"codename": "delete_redirect", "name": "Can delete Redirect", "content_type": 29}, "model": "auth.permission", "pk": 85}, {"fields": {"codename": "add_formsubmission", "name": "Can add Form Submission", "content_type": 30}, "model": "auth.permission", "pk": 86}, {"fields": {"codename": "change_formsubmission", "name": "Can change Form Submission", "content_type": 30}, "model": "auth.permission", "pk": 87}, {"fields": {"codename": "delete_formsubmission", "name": "Can delete Form Submission", "content_type": 30}, "model": "auth.permission", "pk": 88}, {"fields": {"codename": "add_user", "name": "Can add user", "content_type": 31}, "model": "auth.permission", "pk": 89}, {"fields": {"codename": "change_user", "name": "Can change user", "content_type": 31}, "model": "auth.permission", "pk": 90}, {"fields": {"codename": "delete_user", "name": "Can delete user", "content_type": 31}, "model": "auth.permission", "pk": 91}, {"fields": {"codename": "add_homepage", "name": "Can add Homepage", "content_type": 32}, "model": "auth.permission", "pk": 92}, {"fields": {"codename": "change_homepage", "name": "Can change Homepage", "content_type": 32}, "model": "auth.permission", "pk": 93}, {"fields": {"codename": "delete_homepage", "name": "Can delete Homepage", "content_type": 32}, "model": "auth.permission", "pk": 94}, {"fields": {"codename": "add_blogindexpage", "name": "Can add blog index page", "content_type": 33}, "model": "auth.permission", "pk": 95}, {"fields": {"codename": "change_blogindexpage", "name": "Can change blog index page", "content_type": 33}, "model": "auth.permission", "pk": 96}, {"fields": {"codename": "delete_blogindexpage", "name": "Can delete blog index page", "content_type": 33}, "model": "auth.permission", "pk": 97}, {"fields": {"codename": "add_blogpostpage", "name": "Can add Blog Post", "content_type": 34}, "model": "auth.permission", "pk": 98}, {"fields": {"codename": "change_blogpostpage", "name": "Can change Blog Post", "content_type": 34}, "model": "auth.permission", "pk": 99}, {"fields": {"codename": "delete_blogpostpage", "name": "Can delete Blog Post", "content_type": 34}, "model": "auth.permission", "pk": 100}, {"fields": {"codename": "add_aboutpage", "name": "Can add about page", "content_type": 35}, "model": "auth.permission", "pk": 101}, {"fields": {"codename": "change_aboutpage", "name": "Can change about page", "content_type": 35}, "model": "auth.permission", "pk": 102}, {"fields": {"codename": "delete_aboutpage", "name": "Can delete about page", "content_type": 35}, "model": "auth.permission", "pk": 103}, {"fields": {"codename": "add_portofoliopage", "name": "Can add portofolio page", "content_type": 36}, "model": "auth.permission", "pk": 104}, {"fields": {"codename": "change_portofoliopage", "name": "Can change portofolio page", "content_type": 36}, "model": "auth.permission", "pk": 105}, {"fields": {"codename": "delete_portofoliopage", "name": "Can delete portofolio page", "content_type": 36}, "model": "auth.permission", "pk": 106}, {"fields": {"name": "Moderators", "permissions": [4, 5, 6, 7, 1, 2, 3]}, "model": "auth.group", "pk": 1}, {"fields": {"name": "Editors", "permissions": [4, 5, 6, 7, 1, 2, 3]}, "model": "auth.group", "pk": 2}, {"fields": {"group": 1, "page": 1, "permission_type": "add"}, "model": "wagtailcore.grouppagepermission", "pk": 1}, {"fields": {"group": 1, "page": 1, "permission_type": "edit"}, "model": "wagtailcore.grouppagepermission", "pk": 2}, {"fields": {"group": 1, "page": 1, "permission_type": "publish"}, "model": "wagtailcore.grouppagepermission", "pk": 3}, {"fields": {"group": 2, "page": 1, "permission_type": "add"}, "model": "wagtailcore.grouppagepermission", "pk": 4}, {"fields": {"group": 2, "page": 1, "permission_type": "edit"}, "model": "wagtailcore.grouppagepermission", "pk": 5}, {"fields": {"group": 1, "page": 1, "permission_type": "lock"}, "model": "wagtailcore.grouppagepermission", "pk": 6}, {"fields": {"username": "abi", "first_name": "", "last_name": "", "name": "", "is_active": true, "is_superuser": true, "is_staff": true, "last_login": "2015-08-12T15:14:41.608Z", "groups": [], "user_permissions": [], "password": "pbkdf2_sha256$20000$2ScIN1A3oxqq$BEIBJl4OHN52FPZsAas9ZSylP+G+HItNV7pQSmRJhLw=", "email": "", "date_joined": "2015-08-12T15:14:32.666Z"}, "model": "users.user", "pk": 1}, {"fields": {"overview": ""}, "model": "home.homepage", "pk": 3}, {"fields": {"featured_posts": "[]"}, "model": "blog.blogindexpage", "pk": 4}, {"fields": {"main_image": 7, "related_post": "[]", "author": "Abirafdi Raditya Putra", "title_extended": "", "angular_url": "software-open-source-gratis", "content": "[{\"type\": \"content\", \"value\": \"<p>Banyak orang salah kapra tentang Open Source, orang banyak mengira software Open Source adalah gratis padahal\\u00a0<i>tidak</i><i>.\\u00a0</i>Dalam arti sebenarnya Open Source adalah\\u00a0memberikan hak kepada\\u00a0<i>siapapun\\u00a0</i>untuk melihat source code dari program tersebut, yaitu\\u00a0bagaimana program tersebut dibuat dan berjalan, setiap orang boleh memodifikasinya, hingga membuat program baru dari source code program tersebut.</p><p></p><p>Contoh adalah Linux, Linux adalah suatu program Open Source, siapapun berhak memodifikasinya. Sekarang banyak tipe Linux bertebaran, kita biasanya menyebutnya distro/distribution dan\\u00a0tidak semua distro tersebut gratis bukan? ada Linux yang berbayar, contohnya Linux untuk server, trustix.. Namun ada juga yang gratis contohnya ubuntu.\\u00a0</p><p></p><p>Jadi sebenarnya Open Source gratis atau tidak sih? Open source memiliki banyak tipe lisensi, contoh ada yang boleh source code nya dimodifikasi ada juga yang tidak dan lain-lain. Jenis-jenis lisensi bisa dilihat<a href=\\\"http://opensource.org/licenses/GPL-3.0\\\">disini</a>. Semua kembali ke developernya atau pengembangnya, para developer memodifikasi source code Linux dan menjadikan suatu program baru karena memang Linux berlisensi GPL yang artinya full-access. Berbayar atau tidak semua tergantung kepada para developer atau pengembangnya, ngerti kan?<br/><br/><p></p>Intinya, di software Open Source anda boleh melihat source code dan menggunakannya sesuai lisensinya\\u00a0bukan berarti Open Source itu adalah software gratis!</p>\"}]", "intro": "<p>Banyak orang salah kapra tentang Open Source, orang banyak mengira software Open Source adalah gratis padahal nyatanya tidak.</p>", "thumbnail_image": null, "date": "2013-11-03", "main_img_disc": null, "main_background_image": null, "categories": "[{\"type\": \"name\", \"value\": \"Technology\"}]"}, "model": "blog.blogpostpage", "pk": 6}, {"fields": {"main_image": 11, "related_post": "[]", "author": "Abirafdi Raditya Putra", "title_extended": "", "angular_url": "mantle-graphics-api-terbaru-dari-amd", "content": "[{\"type\": \"content\", \"value\": \"<p>Para gamer dan pengguna PC tentunya sudah akrab dengan API directX atau Open GL, keduanya kerap dipakai pengembang game sebagai landasan mereka membuat karya yang ciamik.\\u00a0Mantle sama dengan directX dan Open GL. Hanya saja API ini dikembangkan oleh AMD dan dipercaya akan menjadi sebuah standart baru dari industri game. Berbeda dengan directX atau Open GL, Mantle memungkinkan pengembang game untuk membuat suatu 'bahasa' yang bisa langsung dimengerti oleh mesin, dalam hal ini adalah kartu grafis Radeon. Sekadar catatan, selama ini kebanyakan game menggunakan directX sebagai 'penterjemah bahasa' untuk berbagai kartu grafis. Alhasil, komunikasi antara game dengan mesin yang bertugas mengolah data akan semakin lancar. Ujung-ujungnya adalah, performa grafis yang meningkat, dan kebebasan developer untuk membuat animasi baru dengan memaksimalkan semua fitur pada sebuah kartu grafis.\\u00a0</p><p>Mantle, diklaim AMD akan menjadi standart baru di dunia game, dan sepertinya benar demikian, mengingat Xbox One dan PS4 sama-sama mengusung chip dari 'kubu merah'. Hal itu tentu saja membuat para developer dapat lebih mudah membuat game yang sama untuk konsol dan PC, terlebih lagi kedua platform ini bisa menggunakan API yang sama.\\u00a0Dengan seluruh konsep yang ditawarkan, kelahiran Mantle sudah pasti disambut baik oleh sejumlah pembuat game, salah satu DICE yang sukses membuat seri Battlefield.\\u00a0</p><p></p><p></p><p>Battlefield 4 akan diluncurkan akhir 2013 ini adalah game pertama yang menggunakan teknologi Mantle. Bukan hanya pada versi PC, versi konsolnya pun bakal kebagian fitur tersebut.\\u00a0Jadi sudah terbayang bukan, seperti apa jadinya jika ada satu game yang mampu memaksimalkan seluruh kekuatan dan fitur pada kartu grafis PC?\\u00a0Saat dirilis nanti Mantle hanya bisa dipakai pada jajaran kartu grafis Hawaii, belum bisa dipastikan apakah aplikasi ini juga akan kompatibel dengan seri Radeon terdahulu. Begitu juga soal kemungkinan bisa dipakai pada GPU lain.\\u00a0</p>\"}]", "intro": "<p>Para gamer dan pengguna PC tentunya sudah akrab dengan API directX atau Open GL, keduanya kerap dipakai pengembang game sebagai landasan mereka membuat karya yang ciamik. Mantle merupakan pendatang baru dari AMD yang diharapkan dapat meningkatkan performa graphics.</p>", "thumbnail_image": 12, "date": "2013-12-07", "main_img_disc": "AMD public domain", "main_background_image": null, "categories": "[{\"type\": \"name\", \"value\": \"Technology\"}]"}, "model": "blog.blogpostpage", "pk": 7}, {"fields": {"main_image": 13, "related_post": "[{\"type\": \"post\", \"value\": 10}, {\"type\": \"post\", \"value\": 11}]", "author": "Abirafdi Raditya Putra", "title_extended": "", "angular_url": "kivy-tutorial-1---apa-itu-kivy", "content": "[{\"type\": \"content\", \"value\": \"<p>Kivy adalah GUI/NUI framework yang menggunakan bahasa pemrograman Python, dapat dijalankan pada Windows, Linux, OS X, Android dan iOS dengan menggunakan code yang sama dan\\u00a0menggunakan MIT license sehingga 100% free to use dan boleh dikomersialisasikan. Kivy didesain untuk membantu pembuatan dan pengembangan aplikasi cross-platform secara cepat.</p><p>Berikut adalah beberapa kelebihan Kivy</p><ol><li>Cross-platform, code once run anywhere.</li><li>Support berbagai ragam input device dan juga multitouch support.</li><li>Menggunakan OpenGL ES sebagai graphics engine-nya.</li><li>Menggunakan bahasa Python, cocok bagi pemula seperti saya.</li><li>3rd party Python library goodness!</li></ol>\"}, {\"type\": \"smaller_subheading\", \"value\": \"Mandantory Hello World example! Sangat mudah bukan?\"}, {\"type\": \"full_image\", \"value\": 15}, {\"type\": \"content\", \"value\": \"<p>Berikut ini adalah aplikasi menggunakan Kivy yang sudah ada di Play Store dan App Store.\\u00a0Disclosure, tidak ada hubungan antara saya dengan pembuat aplikasi dibawah ini melainkan hanya sebatas sharing saja.</p>\"}, {\"type\": \"smaller_subheading\", \"value\": \"ProcessCraft\"}, {\"type\": \"full_image\", \"value\": 16}, {\"type\": \"smaller_subheading\", \"value\": \"FlatJewels\"}, {\"type\": \"full_image\", \"value\": 17}, {\"type\": \"content\", \"value\": \"<p>Dibalik banyak kelebihan, Kivy juga mempunyai beberapa kelemahan.<br/></p><ol><li>Tidak memiliki 100% API support pada iOS (plyer).</li><li>Memiliki startup time yang agak sedikit lebih lama daripada aplikasi native dikarenakan menggunakan wrapper dan Python.</li><li>Tentunya memiliki performa dibawah aplikasi native, namun tidak akan terasa jika hanya sebatas game ringan atau everyday apps</li></ol><p>Menurut saya, Kivy cocok untuk project kecil-kecilan dan pribadi, namun bisa dikembangkan ke arah komersil. Di blog ini saya akan share pengalaman belajar saya menggunakan Kivy dan mudah-mudahan kita bisa saling bertukar ilmu. Di tutorial selanjutnya saya akan menjelaskan meng-configure environment untuk men-develop Kivy beserta GUI editornya. \\u00a0See ya!</p><p><br/>Images pulled from :\\u00a0<a href=\\\"https://play.google.com/store/apps/details?id=com.meltingrocks.flatjewels\\\">FlatJewels</a>\\u00a0<a href=\\\"https://itunes.apple.com/us/app/processcraft/id526377075\\\">ProcessCraft</a>\\u00a0<a href=\\\"http://kivy.org/#home\\\">Kivy</a></p>\"}]", "intro": "<p>Kivy adalah GUI/NUI framework yang menggunakan bahasa pemrograman Python, dapat dijalankan pada Windows, Linux, OS X, Android dan iOS dengan menggunakan code yang sama dan\u00a0menggunakan MIT license sehingga 100% free to use dan boleh dikomersialisasikan.</p>", "thumbnail_image": 14, "date": "2015-03-29", "main_img_disc": null, "main_background_image": null, "categories": "[{\"type\": \"name\", \"value\": \"Kivy\"}, {\"type\": \"name\", \"value\": \"Python\"}]"}, "model": "blog.blogpostpage", "pk": 8}, {"fields": {"main_image": 18, "related_post": "[]", "author": "Abirafdi Raditya Putra", "title_extended": "", "angular_url": "modules-python-yang-wajib-dimiliki---virtualenv-dan-pip", "content": "[{\"type\": \"content\", \"value\": \"<p>Bagi kalian yang sudah mulai sering menggunakan python pasti sering mendengar kata pip dan virtualenv, saya akan mencoba menjelaskan apa itu virtualenv dan pip se-simple dan sejelas mungkin, semoga dapat memberikan pencerahan.\\u00a0pip sudah di-include di python 2.7.9 dan 3.4, jika kalian menggunakan versi python yang berbeda ikuti petunjuk\\u00a0<a href=\\\"https://pip.pypa.io/en/latest/installing.html#install-pip\\\">ini</a>.</p><h3>PIP</h3><p>pip adalah singkatan dari\\u00a0<strong>P</strong>ip\\u00a0<strong>I</strong>nstalls\\u00a0<strong>P</strong>ython atau\\u00a0<strong>P</strong>IP\\u00a0<strong>I</strong>nstalls\\u00a0<strong>P</strong>ackages, kepanjangannya ga usah diperhatiin karena memang kalau diartikan terdengar aneh. Bayangkan pip adalah sebuah app store (atau biasa disebut sebagai package manager), kita bisa mencari, menginstall, me-manage modules atau package pada installasi python kita. Berikut merupakan fungsi dasar PIP.</p><ol><li>Install modules</li><li>uninstall modules</li><li>search modules yang tersedia</li><li>mengecek versi modules dan modules apa saja yang terinstall</li></ol><p>Walaupun fungsinya sederhana namun sangat memberikan kemudahan dibandingkan dengan cara menambahkan modules secara konvesional, dimana kita harus men-download source modules dengan mencarinya di internet, menambahkannya ke site-packages atau menjalankan script setup jika disediakan, dan juga jika modules sudah berjumlah banyak maka akan cukup merepotkan untuk keep on track modules-modules apa saja yang sudah kita install atau mengecek versinya. pip mengatasi semua masalah itu, untuk menginstall sebuah modules anda hanya cukup membuka command line dan mengetik commandnya. Berikut merupakan command-command pip.</p><p><br/></p>\"}, {\"type\": \"pre_tag\", \"value\": \"pip install <package name>\"}, {\"type\": \"content\", \"value\": \"<p>Contoh jika kita ingin meng-install django kita gunakan command \\\"pip install django\\\", maka akan pip akan otomatis me-download django versi terakhir dan beserta dependencies yang dibutuhkannya.</p><p><br/></p>\"}, {\"type\": \"pre_tag\", \"value\": \"pip show <package name>\"}, {\"type\": \"content\", \"value\": \"<p>Digunakan untuk memberi informasi suatu package yang sudah terinstall. Informasi yang diberikan adalah versi, lokasi package, dan dependencies dari package tersebut.</p><p><br/></p>\"}, {\"type\": \"pre_tag\", \"value\": \"pip list\"}, {\"type\": \"content\", \"value\": \"<p>Digunakan untuk melihat semua package yang sudah terinstall.</p><p><br/></p>\"}, {\"type\": \"pre_tag\", \"value\": \"pip uninstall <package name>\"}, {\"type\": \"content\", \"value\": \"<p>self-explanatory.</p><p><br/></p>\"}, {\"type\": \"content\", \"value\": \"<p>Untuk melihat semua packages bisa dilihat di website\\u00a0<a href=\\\"https://pypi.python.org/pypi\\\">PyPI</a>\\u00a0(Python Packages Index). Anda juga bisa meng-install suatu package dengan versi tertentu dengan contoh command berikut</p>\"}, {\"type\": \"pre_tag\", \"value\": \"pip install django==1.6.0\"}, {\"type\": \"content\", \"value\": \"<p><br/></p><p>Satu lagi kelebihan dari pip adalah, and bisa membuat satu list package yang anda ingin install dengan menuliskannya di txt file, contoh jika anda ingin menggunakan komputer yang berbeda dan di komputer tersebut belum ada packages yang terinstall, anda hanya perlu me-run txt file tersebut dengan mengikuti cara\\u00a0<a href=\\\"https://pip.pypa.io/en/latest/user_guide.html#requirements-files\\\">ini</a>. Masih banyak command-command lain yang tersedia, untuk lebih jelasnya bisa lihat di\\u00a0<a href=\\\"https://pip.pypa.io/en/stable/reference/index.html\\\">dokumentasinya</a>.</p><p>\\u00a0\\u00a0</p><h3>virtualenv</h3><p>Anggap anda sudah menginstall python versi 2.7 di komputer anda dan memiliki beberapa modules seperti django dll, nah kita sebut itu sebagai sebuah environment yang menggunakan python versi 2.7 sebagai interpreternya dan django sebagai salah satu modulenya. Lalu anggap anda ingin menggunakan python versi 3.3 dan juga ingin upgrade django ke versi 1.7, maka anda harus me-setting ulang environment path, install ulang lagi modules-modules yang dibutuhkan, dan ternyata aplikasi django di versi sebelumnya tidak jalan di versi 1.7, maka anda harus rollback kembali, kelihatannya repot bukan?\\u00a0</p><p>Virtualenv berguna untuk membuat virtual environment dengan mudah tanpa mempengaruhi python di sistem operasi anda. Ingin tes apakah aplikasi anda berjalan di modules versi terbaru? gampang, tinggal buat virtualenv dengan menggunakan modules versi terbaru, modules tersebut tidak akan terinstall di python sistem operasi kita, lalu cek apakah aplikasi kita berjalan, jika tidak maka tinggal hapus saja virtualenv tersebut.\\u00a0virtualenv juga menyediakan kita memilih interpreter yang kita inginkan, misal python 2.7 maupun 3.4 dan juga apakah include modules yang sudah terinstall di python sistem operasi kita atau tidak. Catatan, kita juga harus meng-install terlebih dahulu versi python di komputer kita sebelum kita ingin membuat virtualenv dengan versi tersebut.</p><p>pip juga bekerja di dalam virtualenv, misal kita sedang menggunakan virtualenv\\u00a0<em>aplikasiPOS,</em>\\u00a0tinggal gunakan saja pip untuk meng-install suatu module dan otomatis hanya terinstall di virtualenv\\u00a0<em>aplikasiPOS</em>. Berikut merupakan command-command virtualenv, namun sebelumnya kita harus install virtualenv dari pip terlebih dahulu, maka</p><p><br/></p>\"}, {\"type\": \"pre_tag\", \"value\": \"pip install virtualenv\"}, {\"type\": \"content\", \"value\": \"<p>Dengan menggunakan terminal, pindah ke folder yang and ingin virtualenv dibuat, lalu jalankan perintah berikut.</p><p><br/></p>\"}, {\"type\": \"pre_tag\", \"value\": \"virtualenv aplikasiPOS\"}, {\"type\": \"content\", \"value\": \"<p>Nantinya akan terbuat folder dengan nama environment yang berisi versi intrepeter yang sama dengan yang anda gunakan dan juga tanpa modules apapun. Sama seperti fresh install python. Nah untuk mengaktifkan/menggunakan virtualenv tersebut kita menggunakan file bat yang berada di nama-virtualenv\\\\Scripts\\\\activate.bat</p><p><br/></p>\"}, {\"type\": \"pre_tag\", \"value\": \"aplikasiPOS\\\\Scripts\\\\activate.bat\"}, {\"type\": \"content\", \"value\": \"<p>atau di linux</p>\"}, {\"type\": \"pre_tag\", \"value\": \"source aplikasiPOS\\\\Scripts\\\\activate\"}, {\"type\": \"content\", \"value\": \"<p><br/></p><p>nantinya di terminal anda akan ada tulisan virtualenv yang sedang aktif, seperti</p>\"}, {\"type\": \"pre_tag\", \"value\": \"(aplikasiPOS) G:\\\\virtualenv\\\\\"}, {\"type\": \"content\", \"value\": \"<p><br/></p><p>Setelah aktif, kita bisa gunakan pip untuk menginstall modules-modules yang kita butuhkan atau dengan menggunakan requirements.txt. Modules apapun yang anda install hanya akan ter-install di virtual environment aplikasiPOS, sehingga anda tidak perlu khawatir dengan python sistem operasi anda, atau mungkin anda ingin membuat beberapa aplikasi yang menggunakan modules yang sama namun versi modules yang berbeda, maka virtualenv akan sangat berguna.</p><p>\\u00a0\\u00a0</p><p></p><p>untuk deactivate virtualenv yang sedang aktif, kita hanya ketik perintah</p>\"}, {\"type\": \"pre_tag\", \"value\": \"deactivate\"}, {\"type\": \"content\", \"value\": \"<p><br/></p><p>untuk membuat virtualenv dengan versi python tertentu</p>\"}, {\"type\": \"pre_tag\", \"value\": \"virtualenv --python=c:\\\\Python34\\\\python.exe namavirtualenv\"}, {\"type\": \"content\", \"value\": \"<p><br/></p><p>untuk membuat virtualenv menggunakan modules yang sudah terinstall pada python kita</p>\"}, {\"type\": \"pre_tag\", \"value\": \"virtualenv --system-site-packages namavirtualenv\"}, {\"type\": \"content\", \"value\": \"<p><br/></p><p>Sekian penjelasan virtualenv dan pip dari saya, semoga dapat memberi pencerahan.\\u00a0</p>\"}]", "intro": "<p>Bagi kalian yang sudah mulai menggunakan framework pasti sering mendengar kata pip dan virtualenv namun masih bingung atau ga ngerti-ngerti, saya akan mencoba menjelaskan apa itu virtualenv dan pip se-simple dan sejelas mungkin, semoga pembaca nantinya jadi mengerti.</p>", "thumbnail_image": 19, "date": "2015-04-03", "main_img_disc": null, "main_background_image": null, "categories": "[{\"type\": \"name\", \"value\": \"Kivy\"}, {\"type\": \"name\", \"value\": \"Python\"}]"}, "model": "blog.blogpostpage", "pk": 9}, {"fields": {"main_image": 20, "related_post": "[{\"type\": \"post\", \"value\": 8}, {\"type\": \"post\", \"value\": 11}]", "author": "Abirafdi Raditya Putra", "title_extended": "", "angular_url": "kivy-tutorial-2---setting-up-the-environment", "content": "[{\"type\": \"content\", \"value\": \"<p>Nah sekarang kita setup environment kita untuk develop kivy. Sebenernya sih udah banyak guide nya di internet, tapi disini saya akan share preferensi saya. Untuk IDE saya menggunakan PyCharm versi free/community edition. Sayangnya packaging untuk semua platform hanya disupport oleh python 2.7, python 3.3 support masih WIP, mau gamau sementara kita menggunakan python 2.7 dulu. Folder kivy yang kita download nanti merupakan standalone python dan tidak ada hubungannya dengan python di sistem operasi kita, library/module nya terpisah, bisa dianalogikan seperti\\u00a0<a href=\\\"http://www.pythonified.com/blog/python-modules-yang-wajib-dimiliki-virtualenv-dan-pip/\\\">virtualenv</a>. Oke, berikut ini step-step configure environment Kivy</p><ol><li><a href=\\\"http://kivy.org/#download\\\">Download</a>\\u00a0Kivy versi terbaru yang menggunakan python 2.7.</li><li><a href=\\\"https://www.jetbrains.com/pycharm/download/\\\">Download</a>\\u00a0PyCharm community edition.</li><li>Untuk integrasi Kivy dengan PyCharm bisa dilihat\\u00a0<a href=\\\"https://github.com/kivy/kivy/wiki/Setting-Up-Kivy-with-various-popular-IDE%27s\\\">disini</a>. Jangan lupa ikuti petunjuk untuk integrasi KV-lang juga yang terletak di bagian bawah artikel.</li></ol><p>Yup, cuma 3 langkah, anda tidak perlu repot-repot bolak-balik buka terminal untuk run aplikasi kita, berbagai fitur dari PyCharm, dan KV-lang juga sudah fully-supported dengan auto-completion dan highlightning. Jangan lupa karena Kivy ini merupakan isolated environment, jika anda ingin meng-install suatu module/library dari pip gunakan file kivy.bat untuk membuka terminal.</p>\"}]", "intro": "<p>Preferensi saya untuk Kivy development</p>", "thumbnail_image": 20, "date": "2015-04-05", "main_img_disc": null, "main_background_image": null, "categories": "[{\"type\": \"name\", \"value\": \"Kivy\"}, {\"type\": \"name\", \"value\": \"Python\"}]"}, "model": "blog.blogpostpage", "pk": 10}, {"fields": {"main_image": null, "related_post": "[{\"type\": \"post\", \"value\": 8}, {\"type\": \"post\", \"value\": 10}]", "author": "Abirafdi Raditya Putra", "title_extended": "", "angular_url": "kivy-tutorial-3---kivy-basics", "content": "[{\"type\": \"content\", \"value\": \"<p>Maaf jika post ini tidak original, disini saya akan coba share sumber belajar Kivy saya. Video ini dibuat oleh salah satu kontributor Kivy, penjelasannya singkat, padat, jelas dan memuat banyak materi dasar. Setelah menonton video ini saya bisa membuat aplikasi-aplikasi sederhana.</p>\"}, {\"type\": \"raw_html\", \"value\": \"<iframe width=\\\"560\\\" height=\\\"315\\\" src=\\\"https://www.youtube.com/embed/F7UKmK9eQLY?list=PLdNh1e1kmiPP4YApJm8ENK2yMlwF1_edq\\\" frameborder=\\\"0\\\" allowfullscreen style=\\\"display: block; margin-left: auto; margin-right: auto;\\\"></iframe>\"}]", "intro": "<p>Preferensi sumber belajar Kivy</p>", "thumbnail_image": null, "date": "2015-04-05", "main_img_disc": "", "main_background_image": null, "categories": "[{\"type\": \"name\", \"value\": \"Kivy\"}, {\"type\": \"name\", \"value\": \"Python\"}]"}, "model": "blog.blogpostpage", "pk": 11}, {"fields": {"main_image": 22, "related_post": "[]", "author": "Abirafdi Raditya Putra", "title_extended": "", "angular_url": "perkenalan-orm-dan-sqlalchemy", "content": "[{\"type\": \"content\", \"value\": \"<p>Kemampuan database merupakan kemampuan fundamental bagi setiap programmer. Bagi orang yang baru mulai belajar database pasti pernah mendengar Object Relational Mapping atau ORM. Sebelum ORM ada, segala aktifitas dan perintah di database harus menggunakan bahasa SQL. Di era modern sekarang, hampir sebagian besar bahasa pemrograman yang digunakan bersifat <i>object oriented</i>, seperti Java, Python dan C++, ORM dibuat agar objek dapat dipetakan atau direlasikan ke suatu record di database, ORM juga mengubah sintaks SQL menjadi sintaks yang bersifat <i>object-oriented.</i>\\u00a0 sehingga \\u00a0memudahkan programmer dan meningkatkan produktifitas dalam hal menggunakan database karena object sudah terhubung langsung dengan record-record pada database, code readability juga akan meningkat karena sintaks ORM lebih terlihat <i>object-oriented.</i>\\u00a0</p><p>Jadi bagaimana cara ORM mempermudah kerja programmer? ORM menterjemahkan perintah dari programmer ke dalam bahasa SQL, termasuk mengubah tipe data dari field suatu objek supaya cocok dengan tipe data pada databasenya. ORM ada banyak, masing-masing memiliki kelebihan dan kekurangan, dan semuanya hampir berbentuk suatu library atau module yang kita install sendiri sesuai dengan bahasa pemrograman kita, namun ada juga ORM yang sudah terintegrasi pada suatu framework, contohnya ORM Django. Faktor utama bagus atau tidaknya dari suatu ORM adalah dari segi performa, seperti seberapa cepat suatu ORM dapat melaksanakan query yang kompleks. Perbandingan berbagai ORM Python yang lumayan detail bisa dilihat\\u00a0<a href=\\\"http://www.pythoncentral.io/sqlalchemy-vs-orms/\\\">disini</a>.\\u00a0</p><p>Disini saya akan menggunakan SQLAlchemy sebagai ORM pilihan saya, karena SQLAlchemy adalah ORM yang paling banyak digunakan di Python sehingga lebih mudah googling jika ada kesulitan...</p><p></p><p>Berikut merupakan demonstrasi singkat ORM SQLAlchemy</p>\"}, {\"type\": \"smaller_subheading\", \"value\": \"table users\"}, {\"type\": \"raw_html\", \"value\": \"<table>\\r\\n<tbody>\\r\\n<tr>\\r\\n<td>&nbsp;nama &nbsp;</td>\\r\\n<td>&nbsp;umur&nbsp;</td>\\r\\n</tr>\\r\\n<tr>\\r\\n<td>&nbsp;Andi</td>\\r\\n<td>&nbsp;19</td>\\r\\n</tr>\\r\\n<tr>\\r\\n<td>&nbsp;Budi</td>\\r\\n<td>&nbsp;18</td>\\r\\n</tr>\\r\\n<tr>\\r\\n<td>&nbsp;Agung</td>\\r\\n<td>&nbsp;14</td>\\r\\n</tr>\\r\\n<tr>\\r\\n<td>&nbsp;Adit</td>\\r\\n<td>&nbsp;15</td>\\r\\n</tr>\\r\\n</tbody>\\r\\n</table>\"}, {\"type\": \"content\", \"value\": \"<p><br/></p><p>menggunakan SQL.<br/></p>\"}, {\"type\": \"pre_tag\", \"value\": \"SELECT nama\\r\\nFROM users\\r\\nWHERE umur > 17;\"}, {\"type\": \"content\", \"value\": \"<p><br/></p><p>menggunakan ORM SQLAlchemy<br/></p>\"}, {\"type\": \"pre_tag\", \"value\": \"query(User).filter(User.nama > 17) \"}, {\"type\": \"content\", \"value\": \"<p><br/></p><p>ORM akan otomatis menterjemahkan statement python ke dalam bahasa SQL sehingga kedua perintah diatas akan menghasilkan hasil yang sama yaitu<br/></p>\"}, {\"type\": \"pre_tag\", \"value\": \"Andi\\r\\nBudi\"}, {\"type\": \"subheading\", \"value\": \"Demonstrasi Lengkap\"}, {\"type\": \"content\", \"value\": \"<p>Berikutnya saya akan memberi demonstrasi sederhana pengunaan SQLAlchemy yang dikombinasikan dengan SQLite, karena sqlite sudah disupport python out-of-the-box jadi tidak perlu meng-install modules lain.\\u00a0pertama kita install dulu SQLAlchemy, ketik command berikut di command-line.<br/></p>\"}, {\"type\": \"pre_tag\", \"value\": \"pip install sqlalchemy\"}, {\"type\": \"content\", \"value\": \"<p>Langkah pertama alah membuat database yang memiliki tabel daftarNilai. Sesuai dengan kepanjangan ORM, yaitu\\u00a0<i>Object\\u00a0Relational Mapper</i>, table yang kita inginkan nanti otomatis terbuat sesuai dengan class atau objek yang kita definisikan, jadi langkah selanjutnya adalah mendefinisikan class daftarNilai. Kumpulan class yang akan dijadikan table kita letakkan di satu file yang bernama models.py<br/></p>\"}, {\"type\": \"smaller_subheading\", \"value\": \"models.py\"}, {\"type\": \"pre_tag\", \"value\": \"from sqlalchemy.ext.declarative import declarative_base\\r\\nfrom sqlalchemy import Column, Integer, String\\r\\n# Kita harus import setiap tipe data yang ingin kita gunakan\\r\\nfrom sqlalchemy import create_engine\\r\\n\\r\\nBase = declarative_base()\\r\\n# setiap class yang akan dipetakan harus inherit dari instance declarative_base\\r\\n\\r\\nclass DaftarNilai(Base): #inherit from Base\\r\\n    __tablename__ = 'daftarNilai'    \\r\\n    # tablename disini hanya sebagai metadata\\r\\n\\r\\n    nama = Column(String(50), nullable=False, primary_key=True)\\r\\n    # membuat kolom nama dengan tipe data\\r\\n    # String maksimal panjang 50 karakter   \\r\\n    # dan tidak boleh Null   \\r\\n    nilai = Column(Integer, nullable=False)   \\r\\n\\r\\nengine = create_engine('sqlite:///latihan.db') \\r\\n# menyiapkan connector/engine sqlite\\r\\n\\r\\nBase.metadata.create_all(engine) \\r\\n# menjalankan perintah pemetaan/membuat database\"}, {\"type\": \"content\", \"value\": \"<p>Lalu jalankan script diatas. SQLite bersifat file-based, sehingga urlnya menggunakan 3 slashes. Isi nama databasenya sesuai kemauan anda, nantinya akan terbuat file .db di folder yang sama dengan script ini dijalankan.\\u00a0</p><p>Berikut merupakan script untuk menambah object atau record ke database.<br/></p>\"}, {\"type\": \"smaller_subheading\", \"value\": \"tambahrecord.py\"}, {\"type\": \"pre_tag\", \"value\": \"from sqlalchemy.orm import sessionmaker\\r\\nfrom sqlalchemy import create_engine\\r\\nfrom models import DaftarNilai, Base\\r\\n\\r\\nengine = create_engine('sqlite:///latihan/db')\\r\\n# membuat connector/engine\\r\\n\\r\\nDBSession = sessionmaker()\\r\\n# sebelum kita mengakses database, kita harus membuat session\\r\\n# terlebih dahulu\\r\\n\\r\\nDBSession.configure(bind=engine)\\r\\nsession = DBSession\\r\\n\\r\\nnew_DaftarNilai = DaftarNilai(nama='Andi', nilai=80)\\r\\n# untuk membuat record baru, kita mendefinisikannya dalam bentuk objek\\r\\n# yang nantinya akan otomatis berubah menjadi tipe data yang cocok\\r\\n# dengan database\\r\\n\\r\\nsession.add(new_DaftarNilai)\\r\\nnew_DaftarNilai = DaftarNilai(nama='Adit', nilai=90)\\r\\nsession.add(new_DaftarNilai)\\r\\n\\r\\nsession.commit()\\r\\n# jangan lupa untuk commit perubahan yang terjadi\"}, {\"type\": \"content\", \"value\": \"<p><br/></p><p>Untuk melihat apakah record yang baru saja kita masukkan berhasil ditambah ke database, buat script lihatrecord.py</p>\"}, {\"type\": \"smaller_subheading\", \"value\": \"lihatrecord.py\"}, {\"type\": \"pre_tag\", \"value\": \"from sqlalchemy.orm import sessionmaker\\r\\nfrom sqlalchemy import create_engine\\r\\nfrom models import DaftarNilai, Base\\r\\n\\r\\nengine = create_engine('sqlite:///latihan/db')\\r\\nDBSession = sessionmaker()\\r\\nDBSession.configure(bind=engine)\\r\\nsession = DBSession\\r\\n\\r\\nsemuaDaftarNilai = session.query(DaftarNilai).all()\\r\\n# mengambil semua record ke dalam variabel semuaDaftarNilai\\r\\n# karena terdapat 2 record, maka bisa di iterasikan dengan for\\r\\n\\r\\nfor mahasiswa in semuaDaftarNilai:\\r\\n    print mahasiswa.nama + ' ' + str(mahasiswa.nilai) + '/n'\"}, {\"type\": \"content\", \"value\": \"<p>jalankan testrecord.py maka akan didapat hasil querynya.</p>\"}, {\"type\": \"pre_tag\", \"value\": \"Andi 80\\r\\nAdit 90\"}, {\"type\": \"content\", \"value\": \"<p>Jika kalian gabungkan semua script diatas pada satu file, instantiasi engine dan session hanya perlu sekali saja.\\\\</p><p><br/></p><p>Selesai sudah demonstrasi penggunaan SQAlchemy dengan SQLite. Semoga dapat memberikan pencerahan bagi pembaca.</p><p><br/></p><p>Further reading:</p><ul><li><a href=\\\"http://docs.sqlalchemy.org/en/rel_0_9/orm/tutorial.html\\\">SQLAlchemy</a></li><li>SQLAlchemy koneksi dengan\\u00a0<a href=\\\"http://docs.sqlalchemy.org/en/rel_0_9/core/engines.html\\\">database lain\\u00a0</a></li></ul>\"}]", "intro": "<p>Kemampuan database merupakan kemampuan fundamental bagi setiap programmer. Bagi orang yang baru mulai belajar database pasti pernah mendengar Object Relational Mapping atau ORM. Pada post ini saya akan menjelaskan apa itu ORM berserta contohnya menggunakan SQLAlchemy</p>", "thumbnail_image": 23, "date": "2015-04-07", "main_img_disc": "image from www.agile-code.com", "main_background_image": null, "categories": "[{\"type\": \"name\", \"value\": \"Python\"}, {\"type\": \"name\", \"value\": \"Programming\"}]"}, "model": "blog.blogpostpage", "pk": 12}, {"fields": {"main_image": 24, "related_post": "[{\"type\": \"post\", \"value\": 8}, {\"type\": \"post\", \"value\": 10}, {\"type\": \"post\", \"value\": 11}]", "author": "Abirafdi Raditya Putra", "title_extended": "", "angular_url": "kivy-tutorial-4---database-support", "content": "[{\"type\": \"content\", \"value\": \"<p>Requirements :</p><p></p><ul><li>- dasar-dasar\\u00a0<a href=\\\"http://www.pythonified.com/blog/kivy-tutorial-3-where-to-start/\\\">kivy</a></li><li>- dasar\\u00a0<a href=\\\"http://www.pythonified.com/blog/perkenalan-orm-dan-sqlalchemy/\\\">ORM</a>\\u00a0dan\\u00a0<a href=\\\"http://www.pythonified.com/blog/perkenalan-orm-dan-sqlalchemy/\\\">SQLAlchemy</a>.\\u00a0</li></ul><p></p><p><br/></p><p>Pada tutorial ini kita akan membuat form login sederhana menggunakan database yang cross-platform, berjalan di Windows, Android, OS X, dan iOS dengan code yang sama, salah satu pilihan agar database bisa berjalan di semua platform adalah menggunakan database yang bersifat file-based, yaitu SQLite. Tentunya SQLite memiliki beberapa kelemahan yaitu:<br/></p><p></p><ol><li>Melakukan migrasi sedikit lebih rumit karena SQLite tidak support seperti menambah dan menghapus kolom, rename kolom dan juga mengganti constraint kolom. Solusinya pada saat migrasi ialah membuat table baru dan pindahkan semua data ke table yang baru. Bagi kalian yang belum tau migrasi, di tutorial berikutnya saya akan coba menjelaskan apa itu migrasi dan memberikan contohnya menggunakan Alembic.</li><li>Tentunya SQLite tidak cocok untuk aplikasi dengan skala besar.</li></ol><p>\\u00a0\\u00a0</p><p></p><p>Pertama kita buat dulu layout login kita dengan menggunakan .kv. Jangan lupa nama file kv harus sama dengan nama app kita tetapi menggunakan lowercase-letters.</p>\"}, {\"type\": \"smaller_subheading\", \"value\": \"latihan.kv\"}, {\"type\": \"pre_tag\", \"value\": \"#: kivy 1.9.0\\r\\n\\r\\n<LoginWindow>:\\r\\n    canvas.before:\\r\\n        Color:\\r\\n            rgba: (1,1,1,1)\\r\\n        Rectangle:\\r\\n            pos: self.pos\\r\\n            size: self.size\\r\\n    Label:\\r\\n        text: \\\"Login\\\"\\r\\n        color: (0,0,0,1)\\r\\n        font_size: 60\\r\\n        center_x: root.width * 0.5\\r\\n        center_y: root.top * 0.8\\r\\n    Label:\\r\\n        id: username_label\\r\\n        text: \\\"Username\\\"\\r\\n        color: (0,0,0,1)\\r\\n        font_size: 30\\r\\n        right: username_input.x - 60\\r\\n        center_y: root.top * 0.6\\r\\n    TextInput:\\r\\n        id: username_input\\r\\n        font_size: 20\\r\\n        center_x: root.width * 0.5\\r\\n        center_y: root.top * 0.6\\r\\n        height: 35\\r\\n        width: 300\\r\\n    Label:\\r\\n        id: password_label\\r\\n        text: \\\"Password\\\"\\r\\n        color: (0,0,0,1)\\r\\n        font_size: 30\\r\\n        right: password_input.x - 60\\r\\n        center_y: root.top * 0.5\\r\\n    TextInput:\\r\\n        id: password_input\\r\\n        font_size: 20\\r\\n        password: True\\r\\n        center_x: root.width * 0.5\\r\\n        center_y: root.top * 0.5\\r\\n        height: 35\\r\\n        width: 300\\r\\n    Button:\\r\\n        id: login_button\\r\\n        font_size: 20\\r\\n        center_x: root.width * 0.5\\r\\n        center_y: password_input.y - 100\\r\\n        text: \\\"login\\\"\\r\\n        size: (150,100)\\r\\n        on_press: root.login()\\r\\n    Label:\\r\\n        id: success\\r\\n        pos: (100,100)\\r\\n        color: (0,0,0,1)\\r\\n        text: \\\"fail\\\"\"}, {\"type\": \"smaller_subheading\", \"value\": \"main.py\"}, {\"type\": \"pre_tag\", \"value\": \"from kivy.app import App\\r\\nfrom kivy.uix.widget import Widget\\r\\n\\r\\nclass LoginWindow(Widget):\\r\\n    def login(self, *args):\\r\\n        username = self.ids.username_input\\r\\n        username_text = username.text\\r\\n        password = self.ids.password_input\\r\\n        password_text = password.text\\r\\n        if username_text == \\\"test\\\" and password_text == \\\"test\\\":\\r\\n            label = self.ids.success\\r\\n            label.text = \\\"Success\\\"\\r\\n\\r\\nclass LatihanApp(App):\\r\\n    def build(self):\\r\\n        return LoginWindow()\\r\\n\\r\\n\\r\\nif __name__ == '__main__':\\r\\n    LatihanApp().run()\"}, {\"type\": \"content\", \"value\": \"<p>Sebelum menggunakan database, kita cek dulu apakah aplikasi kita berjalan atau tidak, username dan password sementara kita hard-coded di dalam file main.py terlebih dahulu</p>\"}, {\"type\": \"full_image\", \"value\": 26}, {\"type\": \"content\", \"value\": \"<p>Success, sekarang tinggal integrasikan SQAlchemy dengan Kivy, pertama kita buat dulu models database kita, jalankan script ini sekali untuk membuat databasenya.</p>\"}, {\"type\": \"smaller_subheading\", \"value\": \"models.py\"}, {\"type\": \"pre_tag\", \"value\": \"from sqlalchemy.ext.declarative import declarative_base\\r\\nfrom sqlalchemy import Column, String\\r\\nfrom sqlalchemy import create_engine\\r\\n\\r\\nBase = declarative_base()\\r\\n\\r\\nclass User(Base):\\r\\n    __tablename__ = 'users'\\r\\n\\r\\n    username = Column(String(20), nullable=False, primary_key=True)\\r\\n    password = Column(String(20), nullable=False)\\r\\n\\r\\n\\r\\nengine = create_engine('sqlite:///latihan.db')\\r\\nBase.metadata.create_all(engine)\"}, {\"type\": \"content\", \"value\": \"<p><br/></p><p>tambah record dengan menggunakan Python shell atau dengan menggunakan script berikut</p>\"}, {\"type\": \"smaller_subheading\", \"value\": \"tambahrecord.py\"}, {\"type\": \"pre_tag\", \"value\": \"from sqlalchemy import create_engine\\r\\nfrom sqlalchemy.orm import sessionmaker\\r\\nfrom models import User\\r\\n\\r\\nengine = create_engine('sqlite:///latihan.db')\\r\\nDBSession = sessionmaker()\\r\\nDBSession.configure(bind=engine)\\r\\nsession = DBSession()\\r\\n\\r\\nnew_user = User(username='python', password='is_fun')\\r\\nsession.add(new_user)\\r\\nsession.commit()\"}, {\"type\": \"content\", \"value\": \"<p><br/></p><p>Selanjutnya kita integrasikan SQLAlchemy ke main.py</p>\"}, {\"type\": \"smaller_subheading\", \"value\": \"main.py\"}, {\"type\": \"pre_tag\", \"value\": \"from kivy.app import App\\r\\nfrom kivy.uix.widget import Widget\\r\\nfrom kivy.core.window import Window\\r\\n\\r\\nfrom sqlalchemy import create_engine\\r\\nfrom sqlalchemy.orm import sessionmaker\\r\\nfrom models import User\\r\\n\\r\\nengine = create_engine('sqlite:///latihan.db')\\r\\nDBSession = sessionmaker()\\r\\nDBSession.configure(bind=engine)\\r\\nsession = DBSession()\\r\\n# kita letakkan statements membuat session disini\\r\\n# supaya session selalu dibuat saat aplikasi di run\\r\\n\\r\\nclass LoginWindow(Widget):\\r\\n    def login(self, *args):\\r\\n        username_input = self.ids.username_input\\r\\n        username_text = username_input.text\\r\\n        password_input = self.ids.password_input\\r\\n        password_text = password_input.text\\r\\n\\r\\n        # lakukan query untuk mendapatkan objek/record yang memiliki\\r\\n        # username sesuai dengan input. Karena hasil query selalu berbentuk\\r\\n        # list maka kita harus iterasi\\r\\n        for a in session.query(User).filter(User.username == username_text):\\r\\n            if a.password != password_text:\\r\\n                return\\r\\n            label = self.ids.success\\r\\n            label.text = \\\"Success\\\"\\r\\n\\r\\nclass LatihanApp(App):\\r\\n    def build(self):\\r\\n        return LoginWindow()\\r\\n\\r\\n\\r\\nif __name__ == '__main__':\\r\\n    LatihanApp().run()\"}, {\"type\": \"content\", \"value\": \"<p>Setelah di-run</p>\"}, {\"type\": \"full_image\", \"value\": 27}, {\"type\": \"content\", \"value\": \"<p>Label berubah menjadi success! Pada tutorial selanjutnya saya akan mencoba package aplikasi ini untuk Android dan Linux.</p>\"}]", "intro": "<p>Pada tutorial ini kita akan membuat form login sederhana menggunakan database yang cross-platform, berjalan di Windows, Android, OS X, dan iOS dengan code yang sama.</p>", "thumbnail_image": 25, "date": "2015-04-08", "main_img_disc": "", "main_background_image": null, "categories": "[{\"type\": \"name\", \"value\": \"Kivy\"}, {\"type\": \"name\", \"value\": \"Python\"}]"}, "model": "blog.blogpostpage", "pk": 13}, {"fields": {"main_image": 28, "related_post": "[{\"type\": \"post\", \"value\": 8}]", "author": "Abirafdi Raditya Putra", "title_extended": "", "angular_url": "kivy-tutorial-5---packaging-untuk-android", "content": "[{\"type\": \"content\", \"value\": \"<p>Awalnya saya mengikuti instruksi dari Kivy, yaitu dengan menggunakan image Linux untuk virtualbox yang sudah ready untuk packaging, tapi sepertinya sudah outdated karena masih menggunakan ubuntu 10.4, selain itu virtualbox punya bug yang belum di fix dari 2 tahun yang lalu, yaitu USB tidak mau ter-detect di VM kalau hostnya menggunakan Windows, karena nanti untuk mendapatkan hasil debugging, VM harus connect ke Android kita menggunakan USB.<br/></p><p>\\u00a0 \\u00a0</p><ol><li>Pertama\\u00a0<a href=\\\"https://my.vmware.com/web/vmware/free#desktop_end_user_computing/vmware_player/7_0\\\">download</a>\\u00a0dan install VMware player free .</li><li><a href=\\\"http://www.osboxes.org/ubuntu/\\\">Download</a>\\u00a0image ubuntu 14.04 64 bit untuk VMware.</li><li>Buka VMware player, pilih Open a Virtual Machine dan gunakan image yang sudah di download tadi.</li><li>Sebelum di Run, klik kanan Ubuntu 14.04.2 (64bit) &gt;&gt; Settings</li><li>Pada tab hardware, ubah konfigurasi memory, 1GB juga sudah cukup.</li><li>Untuk konfigurasi processor, centang Virtualize intel VT-x/ AMD-V/RVI yang gunanya untuk meningkatkan performa VM.</li><li>Masih pada tab hardware, klik button Add lalu pilih network adapter, gunakan tipe NAT.</li><li>Pindah ke tab Options, lalu pilih shared folders, tambahkan folders yang anda ingin share.</li><li>Jalankan VM.</li><li>Accept jika diminta untuk meng-install vmware-tools.<br/></li><li>Repair vmware-tools dengan mengikuti langkah\\u00a0<a href=\\\"http://kb.vmware.com/selfservice/microsites/search.do?language=en_US&amp;cmd=displayKC&amp;externalId=1022525\\\">ini</a>. Lalu reboot VM.</li><li>Buka System settings Linux, pilih Software &amp; Updates, pada opsi download from, pilih Other dan pilih Select Best Server, setelah selesai, klik Choose server, close dan biarkan update berjalan.</li></ol><p>\\u00a0\\u00a0</p><p></p><p>Clean install Ubuntu sudah selesai, sekarang tinggal set-up environment untuk packaging.</p><p>Pertama install pip dengan cara, download<a href=\\\"https://bootstrap.pypa.io/get-pip.py\\\">\\u00a0</a><a href=\\\"https://bootstrap.pypa.io/get-pip.py\\\">get-pip.py</a>\\u00a0lalu jalankan get-pip.py di terminal</p>\"}, {\"type\": \"pre_tag\", \"value\": \"sudo python get-pip.py\"}, {\"type\": \"content\", \"value\": \"<p>lalu untuk setup environment, jalankan perintah-perintah berikut</p>\"}, {\"type\": \"pre_tag\", \"value\": \"sudo get-pip.py\\r\\nsudo dpkg --add-architecture i386\\r\\nsudo apt-get update\\r\\nsudo apt-get install build-essential ccache git python2.7-dev openjdk-7-jdk unzip zlib1g-dev zlib1g:i386 lib32z1 lib32ncurses5 lib32bz2-1.0 lib32stdc++6 cython\\r\\nsudo pip install cython==0.20.1 virtualenv buildozer\\r\\nsudo apt-get install open-vm-tools android-tools-adb\"}, {\"type\": \"content\", \"value\": \"<p>command-command diatas berguna untuk meng-install dependencies yang dibutuhkan untuk packaging. Setelah semua selesai di install, copy project dari OS host anda ke shared folders. Lalu di VM copy project anda ke directory, misal buat folder baru di home dan letakkan folder project anda disitu. Selanjutnya kita install software agar dapat membuka terminal dari current directory dengan klik kanan supaya kita tidak perlu capek-capek cd-cd terus<br/></p>\"}, {\"type\": \"pre_tag\", \"value\": \"sudo apt-get install nautilus-open-terminal\\r\\nsudo killall nautilus && nautilus\"}, {\"type\": \"content\", \"value\": \"<p><br/></p><p>Sekarang buka folder project anda di VM, klik kanan di area kosong, lalu pilih Open in Terminal. Lalu jalankan perintah berikut<br/></p>\"}, {\"type\": \"pre_tag\", \"value\": \"buildozer init\"}, {\"type\": \"content\", \"value\": \"<p><br/></p><p>Buka file buildozer.spec dan ubah variabel-variabel berikut.<br/></p>\"}, {\"type\": \"pre_tag\", \"value\": \"title = <NamaAplikasi>\\r\\n\\r\\npackage.name = <NamaPackageTanpaSpasi>\\r\\n\\r\\nsource.include_exts = <tambahkan db supaya file database ikut terkompilasi>\\r\\n\\r\\ncomment 2 line berikut\\r\\n# version.regex = .....\\r\\n# version.filename = .....\\r\\n\\r\\nuncomment version\\r\\nversion = <contoh, 1.0>\\r\\n\\r\\nrequirements = <karena kita menggunakan sqlite dan sqlalchemy, maka tambahkan\\r\\n                menjadi kivy,sqlalchemy,sqlite3>\\r\\n\\r\\norientation = all\\r\\n\\r\\nfullscreen = 0\\r\\n\\r\\nlog_level = 2\"}, {\"type\": \"content\", \"value\": \"<p>Aplikasi kita siap untuk di compile, buka Open in Terminal lalu jalankan</p>\"}, {\"type\": \"pre_tag\", \"value\": \"buildozer android debug\"}, {\"type\": \"content\", \"value\": \"<p>Proses kompilasi memang agak lama untuk pertama kali compile, karena dibutuhkan lagi beberapa dependecies yang otomatis akan didownload. Setelah sudah ter-compile, maka akan ada folder bin yang di dalamnya berisi apk kita. Kita bisa gunakan buildozer untuk melihat hasil debug aplikasi kita. Pertama jangan lupa centang opsi enable usb debugging, pada developer options di settings android kalian. Lalu colok android kalian ke usb dan jalankan perintah berikut</p>\"}, {\"type\": \"pre_tag\", \"value\": \"buildozer android deploy run logcat\"}, {\"type\": \"raw_html\", \"value\": \"<iframe width=\\\"680\\\" height=\\\"385\\\" src=\\\"http://gfycat.com/ifr/AnchoredFamiliarBettong\\\" style=\\\"display: block;margin-left: auto;margin-right: auto;\\\"></iframe>\\\\\"}]", "intro": "<p>Langkah-langkah untuk menjalankan Kivy di Android</p>", "thumbnail_image": 28, "date": "2015-04-10", "main_img_disc": "", "main_background_image": null, "categories": "[{\"type\": \"name\", \"value\": \"Kivy\"}, {\"type\": \"name\", \"value\": \"Python\"}]"}, "model": "blog.blogpostpage", "pk": 14}, {"fields": {"main_image": 29, "related_post": "[]", "author": "Abirafdi Raditya Putra", "title_extended": "", "angular_url": "perkenalan-django", "content": "[{\"type\": \"content\", \"value\": \"<p>Berikut merupakan perkenalan Django yang sudah saya buat sebelumnya untuk sebuah presentasi. Yang dijelaskan pada presentasi ini:</p><ul><li>Membuat website yang sudah memiliki database dan operasi CRUD sederhana menggunakan forms.</li><li>Contoh tampilan admin</li><li>Contoh penambahan aplikasi yang dibuat orang lain</li></ul>\"}, {\"type\": \"raw_html\", \"value\": \"<iframe width=\\\"722px\\\" height=\\\"565px\\\" src=\\\"https://onedrive.live.com/embed?cid=E617AD6493683DF0&amp;resid=E617AD6493683DF0%21126&amp;authkey=AFanKedjAk1CJ3c&amp;em=2&amp;wdAr=1.3333333333333333\\\"></iframe>\"}]", "intro": "<p>Presentasi yang saya buat untuk perkenalan Django</p>", "thumbnail_image": 29, "date": "2015-06-30", "main_img_disc": "logo from www.djangoproject.com", "main_background_image": null, "categories": "[{\"type\": \"name\", \"value\": \"Django\"}, {\"type\": \"name\", \"value\": \"Python\"}]"}, "model": "blog.blogpostpage", "pk": 15}, {"fields": {"main_image": 30, "related_post": "[]", "author": "Abirafdi Raditya Putra", "title_extended": "", "angular_url": "version-control-system-menggunakan-github", "content": "[{\"type\": \"content\", \"value\": \"<p>Version Control System adalah sebuah software manajemen perubahan (revisi/versioning) pada source code, program komputer, website, maupun dokumen dan file-file lainnya. Setiap revisi akan dicatat di sebuah<em>repository\\u00a0</em>secara detail, yaitu mencakup\\u00a0waktu revisinya, siapa yang melakukan revisinya, dan file yang diubah itu sendiri.\\u00a0VCS memungkinkan kita kembali ke revisi atau versi sebelumnya dan juga memungkinkan dua developer atau lebih bekerja pada\\u00a0<em>file\\u00a0</em>atau project\\u00a0yang sama, yang nantinya hasil pekerjaan dua developer tersebut akan digabung (merge) secara otomatis oleh VCS.\\u00a0</p><p>\\u00a0\\u00a0</p><p></p><h4>Keuntungan menggunakan VCS</h4><ul><li>Perubahan pada source code terdokumentasi secara detail dan rapih.</li><li>Peningkatan produktivitas karena memungkinkan dua atau lebih developer bekerja pada project dan juga file yang sama. (conflict bisa saja terjadi i.e. dua developer mengubah line yang sama pada suatu file, conflict ini nantinya harus diselesaikan secara manual pada saat penggabungan/merge)</li><li>Kemudahan kembali ke versi sebelumnya.</li><li>Peningkatan portabilitas source code kita. Source code kita dengan mudah kita dapatkan dimana saja dengan menggunakan VCS yang sudah memiliki remote repository (i.e. repository yang berada di cloud), kita juga bisa memilih revisi/branch mana yang kita ingin dapatkan.\\u00a0</li></ul><p><br/></p><h4>Workflow</h4>\"}, {\"type\": \"smaller_subheading\", \"value\": \"salah satu pattern version control. image credit @ronaldwidha\"}, {\"type\": \"full_image\", \"value\": 31}, {\"type\": \"content\", \"value\": \"<ol><li>Project dimulai, source code utama diwarnai biru tua. Source code utama biasanya disebut Trunk atau Master. Master merupakan versi paling stabil dari project kita.</li><li>Kemudian developer lain ingin menambah fitur lain, seperti menambahkan fitur search pada suatu website, namun karena takut akan menimbulkan bugs pada branch Master (terkadang suatu program memiliki dua atau lebih versi yang selalu dikerjakan, masing-masing versi ini disebut branch, e.g Windows 7 ultimate edition merupakan branch dari Windows 7 Master, branch akan hilang jika dimerge dengan branch lainnya) maka developer ini akan membuat branch baru dengan nama Search, sang developer me-<em>clone</em>\\u00a0(meng-copy source code branch Master) branch Master lalu menambahkan fitur search, sehingga proses development branch Master masih bisa terus dilakukan oleh developer yang lain. Jika penambahan fitur search sudah melewati tahap testing dan Q&amp;A, maka branch Search akan dimerge dengan branch Master.</li><li>Begitu seterusnya pada penambahan fitur-fitur yang lain.\\u00a0</li><li>Misalkan ada permintaan untuk membuat program yang mirip dengan branch Master, maka para developer tinggal membuat branch baru dengan me-clone branch Master, seperti yang bisa dilihat pada garis biru muda diatas. \\u00a0</li></ol><p>\\u00a0\\u00a0</p><h4>Contoh Menggunakan GitHub</h4><p>GitHub merupakan salah satu VCS yang paling banyak digunakan, bahkan Linux menggunakan GitHub sebagai VCS-nya. Namun sebenarnya GitHub bukanlah sebuah VCS, tetapi merupakan\\u00a0<em>hub\\u00a0</em>(tempat berkumpul/konsolidasi dari berbagai project yang menggunakan Git) dari\\u00a0<em>Git</em>. Nah Git inilah yang merupakan VCS-nya, GitHub memfasilitasi Git agar lebih mudah digunakan dan juga penambahan fitur-fitur lainnya. Sebelum kita mulai, Git bertipe decentrallized atau distributed, setiap developer memiliki local repository yang berada pada PC-nya, setiap revisi akan dicatat terlebih dahulu di repository local tersebut, developer tersebut bebas menentukan apakah data repository local diupload ke repository remote (GitHub) atau tidak, tidak ada yang bertindak sebagai server utama repository, semua data repository ada pada seluruh client. Walaupun kesannya GitHub memiliki server utama (i.e. repository yang berada di GitHub), tetapi sebenarnya sama saja dengan repository local pada PC kita, hanya saja berada di cloud (<em>remote</em>).\\u00a0</p><p>1. Install\\u00a0<a href=\\\"https://windows.github.com/\\\">GitHub for Windows</a></p><p>2. Buat Account\\u00a0<a href=\\\"https://github.com/\\\">GitHub</a></p><p>3. Buat repository baru di GitHub, bisa dilakukan melalui di aplikasi GitHub for Windows atau di websitenya.</p><p>4. Buat folder baru di PC anda, buatlah file .txt yang berisi</p>\"}, {\"type\": \"full_image\", \"value\": 32}, {\"type\": \"content\", \"value\": \"<p><br/></p><p>5. Commit adalah yang memerintahkan Git untuk memeriksa apakah ada file yang berubah atau tidak, jika ada, maka akan terbuat revisi baru dan dicatat ke repository local kita, dalam kata lain Commit digunakan untuk membuat revisi baru. (repository merupakan archive kegiatan yang kita lakukan, untuk sekarang, repository masih kosong karena kita belum melakukan kegiatan apapun. Repository local terletak PC kita, sedangkan remote terletak di server GitHub)</p><p>6. Selanjutnya buka Git Shell lalu navigasi ke folder yang anda buat. (Git Shell terletak di desktop, jika tidak ada search di all \\u00a0 \\u00a0 programs)</p><p>7. Git mengharuskan kita mejalankan command <i>git init</i>\\u00a0pada folder yang kita ingin integrasikan VCS.</p>\"}, {\"type\": \"full_image\", \"value\": 33}, {\"type\": \"content\", \"value\": \"<p><br/></p><p>8. Maka folder test sudah menjadi folder\\u00a0<em>Git</em>. Namun kita masih perlu menambah file mana saja yang ingin diperiksa/monitor oleh Git pada saat commit, maka kita ketikkan command\\u00a0<em>git add test.txt</em>.</p>\"}, {\"type\": \"full_image\", \"value\": 34}, {\"type\": \"content\", \"value\": \"<p><br/></p><p>9.\\u00a0Kode +1 ~0 -0 adalah perbandingan isi dari folder Git kita dengan repository local, sedangkan kode itu sendiri artinya, +1 bahwa ada 1 file baru yang muncul pada folder Git kita(test.txt). ~0 bahwa tidak ada file yang dimodifikasi, dan -0 tidak ada file yang didelete. Warna merah menandakan untuk file yang belum di-<em>add</em>\\u00a0atau di\\u00a0<em>track</em>\\u00a0oleh Git, sedangkan Hijau sudah, oleh karena itu sebelum test.txt di\\u00a0<em>add,</em>\\u00a0kode berwarna merah. Coba kalian buat file txt baru lalu jalankan perintah\\u00a0<em>git status</em>, maka akan ada 2 kode yang sama namun warna yang berbeda. Kode ini membandingkan status folder Git kita terhadap repository local kita, +1 ~0 -0 menandakan bahwa sekarang memiliki 1 file baru dibandingkan dengan repository local kita (repository kita masih kosong, karena kita belum pernah commit). Untuk melihat lebih detailnya kita bisa gunakan command\\u00a0<em>git status</em></p>\"}, {\"type\": \"full_image\", \"value\": 35}, {\"type\": \"content\", \"value\": \"<p><br/></p><p>10. Terlihat Changes to be commited ialah test.txt, cocok dengan kode +1 ~0 -0 yang tadi, selanjutnya kita commit\\u00a0dengan menggunakan command\\u00a0<em>git commit -m \\\"&lt;pesan commit&gt;\\\"</em></p>\"}, {\"type\": \"full_image\", \"value\": 36}, {\"type\": \"content\", \"value\": \"<p><br/></p><p>11. Setelah melakukan commit maka kode akan hilang, artinya folder kita sekarang sama dengan repository local kita. Selanjutnya kita upload atau\\u00a0<em>push</em>\\u00a0repository local kita ke remote repository. Command\\u00a0<em>git remote add origin https://github.com/&lt;username&gt;/repository_name.git</em>\\u00a0berguna untuk menyimpan url repository kita yang dinamakan origin, jadi nantinya kita tidak perlu repot menulis ulang url setiap\\u00a0<em>push</em>. Lalu kita gunakan command\\u00a0<em>git push origin master,\\u00a0</em>yang artinya kita me-upload repository local kita ke branch master origin .</p>\"}, {\"type\": \"full_image\", \"value\": 37}, {\"type\": \"content\", \"value\": \"<p><br/></p><p>12. Cek apakah repository remote (GitHub) sudah sama dengan repository local kita.</p>\"}, {\"type\": \"full_image\", \"value\": 38}, {\"type\": \"content\", \"value\": \"<p><br/></p><p>13. Repository remote sudah sama dengan repository local. So far kita sudah berhasil commit ke repository local dan me-uploadnya ke repository remote. Selanjutnya kita coba untuk mengambil repository remote. Anggap saja kita berada pada PC yang lain, buat folder baru dan lakukan\\u00a0<em>git init</em>\\u00a0untuk mengubahnya menjadi folder Git. Karena kita sekarang berada pada folder Git yang masih baru, maka kita harus menambahkan origin lagi. Setelah itu, command untuk meng-copy/mengambil isi dari repository remote adalah\\u00a0<em>git pull origin master,\\u00a0</em>yang artinya ambil atau tarik branch master di origin. Setelah itu cek apakah ada file test.txt</p>\"}, {\"type\": \"full_image\", \"value\": 39}, {\"type\": \"content\", \"value\": \"<p><br/></p><p>14. Yup, file test.txt berhasil kita dapatkan. Sebagai gambaran, kita memiliki 3 repository, PC developer A, PC developer B, dan repository di GitHub, semuanya memiliki file dan isi yang sama. Contoh dalam pembuatan web, ganti saja peran PC developer B menjadi hostingan, sehingga proses development hanya terjadi di PC kita atau bahkan di device manapun (kita tinggal pull saja repository remote), peran hostingan hanya untuk menarik atau\\u00a0<em>pull</em>\\u00a0perubahan yang sudah kita\\u00a0<em>push</em>\\u00a0ke remote repository/GitHub, kita tidak perlu mengupload manual file yang kita ubah, cukup dengan 2 command semua file yang anda ubah akan otomatis terupload, dan dilengkapi dengan fitur VCS, seperti rollback ke revisi sebelumnya, atau merge dengan hasil kerja dari developer lain.</p>\"}, {\"type\": \"content\", \"value\": \"<h3>Kesimpulan</h3><p>Penggunaan VCS bagi saya merupakan hal yang mutlak untuk project skala menengah-besar, keuntungan yang didapatkan dengan menggunakan VCS jauh lebih banyak dibandingkan dengan usaha yang dibutuhkan untuk menerapkan dan mempelajarinya. All-in-all menurut saya mempelajari VCS adalah kewajiban bagi setiap mahasiswa yang ingin terjun ke dunia pemograman.</p>\"}]", "intro": "<p>Version Control System adalah sebuah software manajemen perubahan (revisi/versioning) pada source code, program komputer, website, maupun dokumen dan file-file lainnya. Setiap revisi akan dicatat di sebuah<em>repository\u00a0</em>secara detail, yaitu mencakup\u00a0waktu revisinya, siapa yang melakukan revisinya, dan file yang diubah itu sendiri</p>", "thumbnail_image": 30, "date": "2015-06-30", "main_img_disc": "", "main_background_image": null, "categories": "[{\"type\": \"name\", \"value\": \"Programming\"}]"}, "model": "blog.blogpostpage", "pk": 16}, {"fields": {"item": "[{\"type\": \"item\", \"value\": {\"image\": 1, \"link\": \"inventory-abiraf.rhcloud.com\", \"description\": \"<p>Inventory System using REST</p>\", \"title\": \"Inventory System V 0.1.0\"}}]"}, "model": "portofolio.portofoliopage", "pk": 5}, {"fields": {"focal_point_width": null, "title": "Untitled.jpg", "focal_point_height": null, "created_at": "2015-08-12T15:14:44.555Z", "focal_point_x": null, "focal_point_y": null, "height": 499, "width": 500, "file": "original_images/Untitled.jpg", "uploaded_by_user": 1}, "model": "wagtailimages.image", "pk": 1}, {"fields": {"focal_point_width": null, "title": "home-1", "focal_point_height": null, "created_at": "2015-08-12T22:57:21.257Z", "focal_point_x": null, "focal_point_y": null, "height": 1096, "width": 1600, "file": "original_images/Broadwell_Die_Diagonal_BWe.jpg", "uploaded_by_user": 1}, "model": "wagtailimages.image", "pk": 2}, {"fields": {"focal_point_width": null, "title": "home-2", "focal_point_height": null, "created_at": "2015-08-12T22:57:35.694Z", "focal_point_x": null, "focal_point_y": null, "height": 1077, "width": 1920, "file": "original_images/DSC03925.jpg", "uploaded_by_user": 1}, "model": "wagtailimages.image", "pk": 3}, {"fields": {"focal_point_width": null, "title": "home-3", "focal_point_height": null, "created_at": "2015-08-12T22:58:02.929Z", "focal_point_x": null, "focal_point_y": null, "height": 841, "width": 1598, "file": "original_images/Untitled34.png", "uploaded_by_user": 1}, "model": "wagtailimages.image", "pk": 4}, {"fields": {"focal_point_width": null, "title": "2015-06-19_00030.jpg", "focal_point_height": null, "created_at": "2015-08-12T23:05:28.215Z", "focal_point_x": null, "focal_point_y": null, "height": 891, "width": 1920, "file": "original_images/2015-06-19_00030.jpg", "uploaded_by_user": 1}, "model": "wagtailimages.image", "pk": 6}, {"fields": {"focal_point_width": null, "title": "open-source-gratis", "focal_point_height": null, "created_at": "2015-08-12T23:11:58.840Z", "focal_point_x": null, "focal_point_y": null, "height": 340, "width": 580, "file": "original_images/open_source_free.jpg", "uploaded_by_user": 1}, "model": "wagtailimages.image", "pk": 7}, {"fields": {"focal_point_width": null, "title": "square2.jpg", "focal_point_height": null, "created_at": "2015-08-12T23:29:30.984Z", "focal_point_x": null, "focal_point_y": null, "height": 300, "width": 300, "file": "original_images/square2.jpg", "uploaded_by_user": 1}, "model": "wagtailimages.image", "pk": 8}, {"fields": {"focal_point_width": null, "title": "GitHub-Mark-64px.png", "focal_point_height": null, "created_at": "2015-08-12T23:30:00.136Z", "focal_point_x": null, "focal_point_y": null, "height": 64, "width": 64, "file": "original_images/GitHub-Mark-64px.png", "uploaded_by_user": 1}, "model": "wagtailimages.image", "pk": 9}, {"fields": {"focal_point_width": null, "title": "steamIcon+copy.jpg", "focal_point_height": null, "created_at": "2015-08-12T23:30:04.617Z", "focal_point_x": null, "focal_point_y": null, "height": 64, "width": 64, "file": "original_images/steamIconcopy.jpg", "uploaded_by_user": 1}, "model": "wagtailimages.image", "pk": 10}, {"fields": {"focal_point_width": null, "title": "mantle", "focal_point_height": null, "created_at": "2015-08-12T23:41:15.835Z", "focal_point_x": null, "focal_point_y": null, "height": 1045, "width": 1920, "file": "original_images/mantle1920.jpg", "uploaded_by_user": 1}, "model": "wagtailimages.image", "pk": 11}, {"fields": {"focal_point_width": null, "title": "mantle-thumb", "focal_point_height": null, "created_at": "2015-08-12T23:41:29.049Z", "focal_point_x": null, "focal_point_y": null, "height": 111, "width": 1000, "file": "original_images/mantle1920thumb.jpg", "uploaded_by_user": 1}, "model": "wagtailimages.image", "pk": 12}, {"fields": {"focal_point_width": null, "title": "kivy-1-main", "focal_point_height": null, "created_at": "2015-08-13T00:00:52.699Z", "focal_point_x": null, "focal_point_y": null, "height": 400, "width": 940, "file": "original_images/kivy13-featured.jpg", "uploaded_by_user": 1}, "model": "wagtailimages.image", "pk": 13}, {"fields": {"focal_point_width": null, "title": "kivy-1-thumb", "focal_point_height": null, "created_at": "2015-08-13T00:01:37.410Z", "focal_point_x": null, "focal_point_y": null, "height": 110, "width": 940, "file": "original_images/kivy13-featured-thumb.jpg", "uploaded_by_user": 1}, "model": "wagtailimages.image", "pk": 14}, {"fields": {"focal_point_width": null, "title": "kivy-1-1", "focal_point_height": null, "created_at": "2015-08-13T00:02:31.151Z", "focal_point_x": null, "focal_point_y": null, "height": 275, "width": 626, "file": "original_images/Capture2.JPG", "uploaded_by_user": 1}, "model": "wagtailimages.image", "pk": 15}, {"fields": {"focal_point_width": null, "title": "kivy-1-processcraft", "focal_point_height": null, "created_at": "2015-08-13T00:03:43.201Z", "focal_point_x": null, "focal_point_y": null, "height": 360, "width": 480, "file": "original_images/screen480x480.jpeg", "uploaded_by_user": 1}, "model": "wagtailimages.image", "pk": 16}, {"fields": {"focal_point_width": null, "title": "kivy-1-flat", "focal_point_height": null, "created_at": "2015-08-13T00:04:09.064Z", "focal_point_x": null, "focal_point_y": null, "height": 816, "width": 461, "file": "original_images/Capture.JPG", "uploaded_by_user": 1}, "model": "wagtailimages.image", "pk": 17}, {"fields": {"focal_point_width": null, "title": "venv-pip-featured", "focal_point_height": null, "created_at": "2015-08-13T00:12:25.467Z", "focal_point_x": null, "focal_point_y": null, "height": 208, "width": 538, "file": "original_images/featured.JPG", "uploaded_by_user": 1}, "model": "wagtailimages.image", "pk": 18}, {"fields": {"focal_point_width": null, "title": "venv-pip-thumb", "focal_point_height": null, "created_at": "2015-08-13T00:13:28.779Z", "focal_point_x": null, "focal_point_y": null, "height": 70, "width": 538, "file": "original_images/featured-thumb.jpg", "uploaded_by_user": 1}, "model": "wagtailimages.image", "pk": 19}, {"fields": {"focal_point_width": null, "title": "kiv-tut-2-main", "focal_point_height": null, "created_at": "2015-08-14T00:37:06.429Z", "focal_point_x": null, "focal_point_y": null, "height": 524, "width": 1182, "file": "original_images/Capture_aazr0dW.JPG", "uploaded_by_user": 1}, "model": "wagtailimages.image", "pk": 20}, {"fields": {"focal_point_width": null, "title": "kiv-tut2-thumb", "focal_point_height": null, "created_at": "2015-08-14T00:38:24.098Z", "focal_point_x": null, "focal_point_y": null, "height": 120, "width": 1182, "file": "original_images/Capture-thumb.jpg", "uploaded_by_user": 1}, "model": "wagtailimages.image", "pk": 21}, {"fields": {"focal_point_width": null, "title": "orm-main", "focal_point_height": null, "created_at": "2015-08-14T03:16:28.195Z", "focal_point_x": null, "focal_point_y": null, "height": 359, "width": 700, "file": "original_images/ORMMapping.png", "uploaded_by_user": 1}, "model": "wagtailimages.image", "pk": 22}, {"fields": {"focal_point_width": null, "title": "orm-thumb", "focal_point_height": null, "created_at": "2015-08-14T03:25:16.089Z", "focal_point_x": null, "focal_point_y": null, "height": 157, "width": 700, "file": "original_images/thumb.png", "uploaded_by_user": 1}, "model": "wagtailimages.image", "pk": 23}, {"fields": {"focal_point_width": null, "title": "kiv-tut4-main", "focal_point_height": null, "created_at": "2015-08-14T04:04:08.085Z", "focal_point_x": null, "focal_point_y": null, "height": 528, "width": 1086, "file": "original_images/featured.png", "uploaded_by_user": 1}, "model": "wagtailimages.image", "pk": 24}, {"fields": {"focal_point_width": null, "title": "kiv-tut4-thumb", "focal_point_height": null, "created_at": "2015-08-14T04:04:21.260Z", "focal_point_x": null, "focal_point_y": null, "height": 239, "width": 1137, "file": "original_images/cropped.png", "uploaded_by_user": 1}, "model": "wagtailimages.image", "pk": 25}, {"fields": {"focal_point_width": null, "title": "kiv-tut4-1", "focal_point_height": null, "created_at": "2015-08-14T04:17:04.264Z", "focal_point_x": null, "focal_point_y": null, "height": 639, "width": 816, "file": "original_images/2.png", "uploaded_by_user": 1}, "model": "wagtailimages.image", "pk": 26}, {"fields": {"focal_point_width": null, "title": "kiv-tut4-2", "focal_point_height": null, "created_at": "2015-08-14T04:21:54.065Z", "focal_point_x": null, "focal_point_y": null, "height": 711, "width": 896, "file": "original_images/3.png", "uploaded_by_user": 1}, "model": "wagtailimages.image", "pk": 27}, {"fields": {"focal_point_width": null, "title": "kiv-tut5-main", "focal_point_height": null, "created_at": "2015-08-14T05:43:56.307Z", "focal_point_x": null, "focal_point_y": null, "height": 701, "width": 1200, "file": "original_images/featured_lYZ2Z2l.JPG", "uploaded_by_user": 1}, "model": "wagtailimages.image", "pk": 28}, {"fields": {"focal_point_width": null, "title": "django-main", "focal_point_height": null, "created_at": "2015-08-14T06:22:06.087Z", "focal_point_x": null, "focal_point_y": null, "height": 378, "width": 661, "file": "original_images/Capture.PNG", "uploaded_by_user": 1}, "model": "wagtailimages.image", "pk": 29}, {"fields": {"focal_point_width": null, "title": "vcs-main", "focal_point_height": null, "created_at": "2015-08-14T06:34:37.511Z", "focal_point_x": null, "focal_point_y": null, "height": 286, "width": 608, "file": "original_images/8e.png", "uploaded_by_user": 1}, "model": "wagtailimages.image", "pk": 30}, {"fields": {"focal_point_width": null, "title": "vcs-work", "focal_point_height": null, "created_at": "2015-08-15T00:12:50.908Z", "focal_point_x": null, "focal_point_y": null, "height": 391, "width": 600, "file": "original_images/branchmangement3.gif", "uploaded_by_user": 1}, "model": "wagtailimages.image", "pk": 31}, {"fields": {"focal_point_width": null, "title": "vcs-1", "focal_point_height": null, "created_at": "2015-08-15T00:13:20.171Z", "focal_point_x": null, "focal_point_y": null, "height": 213, "width": 394, "file": "original_images/1.png", "uploaded_by_user": 1}, "model": "wagtailimages.image", "pk": 32}, {"fields": {"focal_point_width": null, "title": "vcs-2", "focal_point_height": null, "created_at": "2015-08-15T00:13:59.650Z", "focal_point_x": null, "focal_point_y": null, "height": 252, "width": 597, "file": "original_images/2_JpPCz7R.png", "uploaded_by_user": 1}, "model": "wagtailimages.image", "pk": 33}, {"fields": {"focal_point_width": null, "title": "vcs-3", "focal_point_height": null, "created_at": "2015-08-15T00:16:44.814Z", "focal_point_x": null, "focal_point_y": null, "height": 252, "width": 597, "file": "original_images/3_98Awqwj.png", "uploaded_by_user": 1}, "model": "wagtailimages.image", "pk": 34}, {"fields": {"focal_point_width": null, "title": "vcs-4", "focal_point_height": null, "created_at": "2015-08-15T00:17:11.565Z", "focal_point_x": null, "focal_point_y": null, "height": 252, "width": 597, "file": "original_images/4.png", "uploaded_by_user": 1}, "model": "wagtailimages.image", "pk": 35}, {"fields": {"focal_point_width": null, "title": "vcs-5", "focal_point_height": null, "created_at": "2015-08-15T00:17:40.612Z", "focal_point_x": null, "focal_point_y": null, "height": 252, "width": 653, "file": "original_images/5.png", "uploaded_by_user": 1}, "model": "wagtailimages.image", "pk": 36}, {"fields": {"focal_point_width": null, "title": "vcs-6", "focal_point_height": null, "created_at": "2015-08-15T00:18:16.603Z", "focal_point_x": null, "focal_point_y": null, "height": 252, "width": 800, "file": "original_images/6.png", "uploaded_by_user": 1}, "model": "wagtailimages.image", "pk": 37}, {"fields": {"focal_point_width": null, "title": "vcs-7", "focal_point_height": null, "created_at": "2015-08-15T00:18:46.128Z", "focal_point_x": null, "focal_point_y": null, "height": 685, "width": 1063, "file": "original_images/7.png", "uploaded_by_user": 1}, "model": "wagtailimages.image", "pk": 38}, {"fields": {"focal_point_width": null, "title": "vcs-8", "focal_point_height": null, "created_at": "2015-08-15T00:19:19.065Z", "focal_point_x": null, "focal_point_y": null, "height": 348, "width": 793, "file": "original_images/8.png", "uploaded_by_user": 1}, "model": "wagtailimages.image", "pk": 39}, {"fields": {"focal_point_width": null, "title": "cover3.jpg", "focal_point_height": null, "created_at": "2015-08-15T02:13:50.511Z", "focal_point_x": null, "focal_point_y": null, "height": 906, "width": 1920, "file": "original_images/cover3.jpg", "uploaded_by_user": 1}, "model": "wagtailimages.image", "pk": 40}, {"fields": {"approved_go_live_at": null, "created_at": "2015-08-12T15:15:09.311Z", "submitted_for_moderation": false, "content_json": "{\"locked\": false, \"title\": \"Home\", \"overview\": \"\", \"numchild\": 0, \"show_in_menus\": false, \"live\": true, \"seo_title\": \"\", \"first_published_at\": null, \"search_description\": \"\", \"depth\": 2, \"latest_revision_created_at\": null, \"has_unpublished_changes\": false, \"content_type\": 32, \"path\": \"00010001\", \"owner\": 1, \"pk\": 3, \"url_path\": \"/home/\", \"expired\": false, \"slug\": \"home\", \"expire_at\": null, \"go_live_at\": null}", "user": 1, "page": 3}, "model": "wagtailcore.pagerevision", "pk": 1}, {"fields": {"approved_go_live_at": null, "created_at": "2015-08-12T15:15:19.013Z", "submitted_for_moderation": false, "content_json": "{\"locked\": false, \"featured_posts\": \"[]\", \"title\": \"Blog\", \"numchild\": 0, \"show_in_menus\": false, \"live\": true, \"seo_title\": \"\", \"first_published_at\": null, \"search_description\": \"\", \"depth\": 3, \"latest_revision_created_at\": null, \"has_unpublished_changes\": false, \"content_type\": 33, \"path\": \"000100010001\", \"owner\": 1, \"pk\": 4, \"url_path\": \"/home/blog/\", \"expired\": false, \"slug\": \"blog\", \"expire_at\": null, \"go_live_at\": null}", "user": 1, "page": 4}, "model": "wagtailcore.pagerevision", "pk": 2}, {"fields": {"approved_go_live_at": null, "created_at": "2015-08-12T15:16:05.569Z", "submitted_for_moderation": false, "content_json": "{\"locked\": false, \"title\": \"Portofolio\", \"item\": \"[{\\\"type\\\": \\\"item\\\", \\\"value\\\": {\\\"image\\\": 1, \\\"link\\\": \\\"inventory-abiraf.rhcloud.com\\\", \\\"description\\\": \\\"<p>Inventory System using REST</p>\\\", \\\"title\\\": \\\"Inventory System V 0.1.0\\\"}}]\", \"numchild\": 0, \"show_in_menus\": false, \"live\": true, \"seo_title\": \"\", \"first_published_at\": null, \"search_description\": \"\", \"depth\": 3, \"latest_revision_created_at\": null, \"has_unpublished_changes\": false, \"content_type\": 36, \"path\": \"000100010002\", \"owner\": 1, \"pk\": 5, \"url_path\": \"/home/portofolio/\", \"expired\": false, \"slug\": \"portofolio\", \"expire_at\": null, \"go_live_at\": null}", "user": 1, "page": 5}, "model": "wagtailcore.pagerevision", "pk": 3}, {"fields": {"approved_go_live_at": null, "created_at": "2015-08-12T23:12:10.313Z", "submitted_for_moderation": false, "content_json": "{\"search_description\": \"\", \"owner\": 1, \"intro\": \"\", \"latest_revision_created_at\": null, \"main_background_image\": null, \"go_live_at\": null, \"title\": \"Software Open Source Gratis?\", \"seo_title\": \"\", \"slug\": \"software-open-source-gratis\", \"content\": \"[{\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>blablalblab</p>\\\"}]\", \"live\": true, \"thumbnail_image\": null, \"has_unpublished_changes\": false, \"related_post\": \"[]\", \"angular_url\": \"software-open-source-gratis\", \"title_extended\": \"\", \"numchild\": 0, \"content_type\": 34, \"show_in_menus\": false, \"date\": \"2013-11-03\", \"path\": \"0001000100010001\", \"url_path\": \"/home/blog/software-open-source-gratis/\", \"expired\": false, \"pk\": 6, \"categories\": \"[{\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Technology\\\"}]\", \"main_image\": 7, \"locked\": false, \"author\": \"Abirafdi Raditya Putra\", \"depth\": 4, \"first_published_at\": null, \"expire_at\": null}", "user": 1, "page": 6}, "model": "wagtailcore.pagerevision", "pk": 4}, {"fields": {"approved_go_live_at": null, "created_at": "2015-08-12T23:31:55.092Z", "submitted_for_moderation": false, "content_json": "{\"search_description\": \"\", \"owner\": 1, \"intro\": \"<p>Banyak orang salah kapra tentang Open Source, orang banyak mengira software Open Source adalah gratis padahal nyatanya tidak.</p>\", \"latest_revision_created_at\": \"2015-08-12T23:12:10.313Z\", \"main_background_image\": null, \"go_live_at\": null, \"title\": \"Software Open Source Gratis?\", \"seo_title\": \"\", \"slug\": \"software-open-source-gratis\", \"content\": \"[{\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Banyak orang salah kapra tentang Open Source, orang banyak mengira software Open Source adalah gratis padahal\\\\u00a0<i>tidak</i><i>.\\\\u00a0</i>Dalam arti sebenarnya Open Source adalah\\\\u00a0memberikan hak kepada\\\\u00a0<i>siapapun\\\\u00a0</i>untuk melihat source code dari program tersebut, yaitu\\\\u00a0bagaimana program tersebut dibuat dan berjalan, setiap orang boleh memodifikasinya, hingga membuat program baru dari source code program tersebut.</p><p></p><p>Contoh adalah Linux, Linux adalah suatu program Open Source, siapapun berhak memodifikasinya. Sekarang banyak tipe Linux bertebaran, kita biasanya menyebutnya distro/distribution dan\\\\u00a0tidak semua distro tersebut gratis bukan? ada Linux yang berbayar, contohnya Linux untuk server, trustix.. Namun ada juga yang gratis contohnya ubuntu.\\\\u00a0</p><p></p><p>Jadi sebenarnya Open Source gratis atau tidak sih? Open source memiliki banyak tipe lisensi, contoh ada yang boleh source code nya dimodifikasi ada juga yang tidak dan lain-lain. Jenis-jenis lisensi bisa dilihat<a href=\\\\\\\"http://opensource.org/licenses/GPL-3.0\\\\\\\">disini</a>. Semua kembali ke developernya atau pengembangnya, para developer memodifikasi source code Linux dan menjadikan suatu program baru karena memang Linux berlisensi GPL yang artinya full-access. Berbayar atau tidak semua tergantung kepada para developer atau pengembangnya, ngerti kan?<br/><br/><p></p>Intinya, di software Open Source anda boleh melihat source code dan menggunakannya sesuai lisensinya\\\\u00a0bukan berarti Open Source itu adalah software gratis!</p>\\\"}]\", \"live\": true, \"thumbnail_image\": null, \"has_unpublished_changes\": false, \"related_post\": \"[]\", \"angular_url\": \"software-open-source-gratis\", \"title_extended\": \"\", \"numchild\": 0, \"content_type\": 34, \"show_in_menus\": false, \"date\": \"2013-11-03\", \"path\": \"0001000100010001\", \"url_path\": \"/home/blog/software-open-source-gratis/\", \"expired\": false, \"pk\": 6, \"categories\": \"[{\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Technology\\\"}]\", \"main_image\": 7, \"locked\": false, \"author\": \"Abirafdi Raditya Putra\", \"depth\": 4, \"first_published_at\": \"2015-08-12T23:12:10.363Z\", \"expire_at\": null}", "user": 1, "page": 6}, "model": "wagtailcore.pagerevision", "pk": 5}, {"fields": {"approved_go_live_at": null, "created_at": "2015-08-12T23:52:15.384Z", "submitted_for_moderation": false, "content_json": "{\"search_description\": \"\", \"owner\": 1, \"intro\": \"<p>Para gamer dan pengguna PC tentunya sudah akrab dengan API directX atau Open GL, keduanya kerap dipakai pengembang game sebagai landasan mereka membuat karya yang ciamik. Mantle merupakan pendatang baru dari AMD yang diharapkan dapat meningkatkan performa graphics.</p>\", \"latest_revision_created_at\": null, \"main_background_image\": null, \"go_live_at\": null, \"title\": \"Mantle Graphics API Terbaru Dari AMD\", \"seo_title\": \"\", \"slug\": \"mantle-graphics-api-terbaru-dari-amd\", \"content\": \"[{\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Para gamer dan pengguna PC tentunya sudah akrab dengan API directX atau Open GL, keduanya kerap dipakai pengembang game sebagai landasan mereka membuat karya yang ciamik.\\\\u00a0Mantle sama dengan directX dan Open GL. Hanya saja API ini dikembangkan oleh AMD dan dipercaya akan menjadi sebuah standart baru dari industri game. Berbeda dengan directX atau Open GL, Mantle memungkinkan pengembang game untuk membuat suatu 'bahasa' yang bisa langsung dimengerti oleh mesin, dalam hal ini adalah kartu grafis Radeon. Sekadar catatan, selama ini kebanyakan game menggunakan directX sebagai 'penterjemah bahasa' untuk berbagai kartu grafis. Alhasil, komunikasi antara game dengan mesin yang bertugas mengolah data akan semakin lancar. Ujung-ujungnya adalah, performa grafis yang meningkat, dan kebebasan developer untuk membuat animasi baru dengan memaksimalkan semua fitur pada sebuah kartu grafis.\\\\u00a0</p><p>Mantle, diklaim AMD akan menjadi standart baru di dunia game, dan sepertinya benar demikian, mengingat Xbox One dan PS4 sama-sama mengusung chip dari 'kubu merah'. Hal itu tentu saja membuat para developer dapat lebih mudah membuat game yang sama untuk konsol dan PC, terlebih lagi kedua platform ini bisa menggunakan API yang sama.\\\\u00a0Dengan seluruh konsep yang ditawarkan, kelahiran Mantle sudah pasti disambut baik oleh sejumlah pembuat game, salah satu DICE yang sukses membuat seri Battlefield.\\\\u00a0</p><p></p><p></p><p>Battlefield 4 akan diluncurkan akhir 2013 ini adalah game pertama yang menggunakan teknologi Mantle. Bukan hanya pada versi PC, versi konsolnya pun bakal kebagian fitur tersebut.\\\\u00a0Jadi sudah terbayang bukan, seperti apa jadinya jika ada satu game yang mampu memaksimalkan seluruh kekuatan dan fitur pada kartu grafis PC?\\\\u00a0Saat dirilis nanti Mantle hanya bisa dipakai pada jajaran kartu grafis Hawaii, belum bisa dipastikan apakah aplikasi ini juga akan kompatibel dengan seri Radeon terdahulu. Begitu juga soal kemungkinan bisa dipakai pada GPU lain.\\\\u00a0</p>\\\"}]\", \"live\": true, \"thumbnail_image\": 12, \"has_unpublished_changes\": false, \"related_post\": \"[]\", \"angular_url\": \"mantle-graphics-api-terbaru-dari-amd\", \"title_extended\": \"\", \"numchild\": 0, \"content_type\": 34, \"show_in_menus\": false, \"date\": \"2013-12-07\", \"path\": \"0001000100010002\", \"url_path\": \"/home/blog/mantle-graphics-api-terbaru-dari-amd/\", \"expired\": false, \"pk\": 7, \"categories\": \"[{\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Technology\\\"}]\", \"main_image\": 11, \"locked\": false, \"author\": \"Abirafdi Raditya Putra\", \"depth\": 4, \"first_published_at\": null, \"expire_at\": null}", "user": 1, "page": 7}, "model": "wagtailcore.pagerevision", "pk": 6}, {"fields": {"approved_go_live_at": null, "created_at": "2015-08-12T23:52:57.952Z", "submitted_for_moderation": false, "content_json": "{\"search_description\": \"\", \"owner\": 1, \"intro\": \"<p>Para gamer dan pengguna PC tentunya sudah akrab dengan API directX atau Open GL, keduanya kerap dipakai pengembang game sebagai landasan mereka membuat karya yang ciamik. Mantle merupakan pendatang baru dari AMD yang diharapkan dapat meningkatkan performa graphics.</p>\", \"latest_revision_created_at\": \"2015-08-12T23:52:15.384Z\", \"main_background_image\": null, \"go_live_at\": null, \"title\": \"Mantle Graphics API Terbaru Dari AMD\", \"seo_title\": \"\", \"slug\": \"mantle-graphics-api-terbaru-dari-amd\", \"content\": \"[{\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Para gamer dan pengguna PC tentunya sudah akrab dengan API directX atau Open GL, keduanya kerap dipakai pengembang game sebagai landasan mereka membuat karya yang ciamik.\\\\u00a0Mantle sama dengan directX dan Open GL. Hanya saja API ini dikembangkan oleh AMD dan dipercaya akan menjadi sebuah standart baru dari industri game. Berbeda dengan directX atau Open GL, Mantle memungkinkan pengembang game untuk membuat suatu 'bahasa' yang bisa langsung dimengerti oleh mesin, dalam hal ini adalah kartu grafis Radeon. Sekadar catatan, selama ini kebanyakan game menggunakan directX sebagai 'penterjemah bahasa' untuk berbagai kartu grafis. Alhasil, komunikasi antara game dengan mesin yang bertugas mengolah data akan semakin lancar. Ujung-ujungnya adalah, performa grafis yang meningkat, dan kebebasan developer untuk membuat animasi baru dengan memaksimalkan semua fitur pada sebuah kartu grafis.\\\\u00a0</p><p>Mantle, diklaim AMD akan menjadi standart baru di dunia game, dan sepertinya benar demikian, mengingat Xbox One dan PS4 sama-sama mengusung chip dari 'kubu merah'. Hal itu tentu saja membuat para developer dapat lebih mudah membuat game yang sama untuk konsol dan PC, terlebih lagi kedua platform ini bisa menggunakan API yang sama.\\\\u00a0Dengan seluruh konsep yang ditawarkan, kelahiran Mantle sudah pasti disambut baik oleh sejumlah pembuat game, salah satu DICE yang sukses membuat seri Battlefield.\\\\u00a0</p><p></p><p></p><p>Battlefield 4 akan diluncurkan akhir 2013 ini adalah game pertama yang menggunakan teknologi Mantle. Bukan hanya pada versi PC, versi konsolnya pun bakal kebagian fitur tersebut.\\\\u00a0Jadi sudah terbayang bukan, seperti apa jadinya jika ada satu game yang mampu memaksimalkan seluruh kekuatan dan fitur pada kartu grafis PC?\\\\u00a0Saat dirilis nanti Mantle hanya bisa dipakai pada jajaran kartu grafis Hawaii, belum bisa dipastikan apakah aplikasi ini juga akan kompatibel dengan seri Radeon terdahulu. Begitu juga soal kemungkinan bisa dipakai pada GPU lain.\\\\u00a0</p>\\\"}]\", \"live\": true, \"thumbnail_image\": 12, \"has_unpublished_changes\": false, \"related_post\": \"[]\", \"angular_url\": \"mantle-graphics-api-terbaru-dari-amd\", \"title_extended\": \"\", \"numchild\": 0, \"content_type\": 34, \"show_in_menus\": false, \"date\": \"2013-12-07\", \"path\": \"0001000100010002\", \"url_path\": \"/home/blog/mantle-graphics-api-terbaru-dari-amd/\", \"expired\": false, \"pk\": 7, \"categories\": \"[{\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Technology\\\"}]\", \"main_image\": 11, \"locked\": false, \"author\": \"Abirafdi Raditya Putra\", \"depth\": 4, \"first_published_at\": \"2015-08-12T23:52:15.433Z\", \"expire_at\": null}", "user": 1, "page": 7}, "model": "wagtailcore.pagerevision", "pk": 7}, {"fields": {"approved_go_live_at": null, "created_at": "2015-08-12T23:53:28.837Z", "submitted_for_moderation": false, "content_json": "{\"search_description\": \"\", \"owner\": 1, \"intro\": \"<p>Para gamer dan pengguna PC tentunya sudah akrab dengan API directX atau Open GL, keduanya kerap dipakai pengembang game sebagai landasan mereka membuat karya yang ciamik. Mantle merupakan pendatang baru dari AMD yang diharapkan dapat meningkatkan performa graphics.</p>\", \"latest_revision_created_at\": \"2015-08-12T23:52:57.952Z\", \"main_background_image\": null, \"go_live_at\": null, \"title\": \"Mantle Graphics API Terbaru Dari AMD\", \"seo_title\": \"\", \"slug\": \"mantle-graphics-api-terbaru-dari-amd\", \"content\": \"[{\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Para gamer dan pengguna PC tentunya sudah akrab dengan API directX atau Open GL, keduanya kerap dipakai pengembang game sebagai landasan mereka membuat karya yang ciamik.\\\\u00a0Mantle sama dengan directX dan Open GL. Hanya saja API ini dikembangkan oleh AMD dan dipercaya akan menjadi sebuah standart baru dari industri game. Berbeda dengan directX atau Open GL, Mantle memungkinkan pengembang game untuk membuat suatu 'bahasa' yang bisa langsung dimengerti oleh mesin, dalam hal ini adalah kartu grafis Radeon. Sekadar catatan, selama ini kebanyakan game menggunakan directX sebagai 'penterjemah bahasa' untuk berbagai kartu grafis. Alhasil, komunikasi antara game dengan mesin yang bertugas mengolah data akan semakin lancar. Ujung-ujungnya adalah, performa grafis yang meningkat, dan kebebasan developer untuk membuat animasi baru dengan memaksimalkan semua fitur pada sebuah kartu grafis.\\\\u00a0</p><p>Mantle, diklaim AMD akan menjadi standart baru di dunia game, dan sepertinya benar demikian, mengingat Xbox One dan PS4 sama-sama mengusung chip dari 'kubu merah'. Hal itu tentu saja membuat para developer dapat lebih mudah membuat game yang sama untuk konsol dan PC, terlebih lagi kedua platform ini bisa menggunakan API yang sama.\\\\u00a0Dengan seluruh konsep yang ditawarkan, kelahiran Mantle sudah pasti disambut baik oleh sejumlah pembuat game, salah satu DICE yang sukses membuat seri Battlefield.\\\\u00a0</p><p></p><p></p><p>Battlefield 4 akan diluncurkan akhir 2013 ini adalah game pertama yang menggunakan teknologi Mantle. Bukan hanya pada versi PC, versi konsolnya pun bakal kebagian fitur tersebut.\\\\u00a0Jadi sudah terbayang bukan, seperti apa jadinya jika ada satu game yang mampu memaksimalkan seluruh kekuatan dan fitur pada kartu grafis PC?\\\\u00a0Saat dirilis nanti Mantle hanya bisa dipakai pada jajaran kartu grafis Hawaii, belum bisa dipastikan apakah aplikasi ini juga akan kompatibel dengan seri Radeon terdahulu. Begitu juga soal kemungkinan bisa dipakai pada GPU lain.\\\\u00a0</p>\\\"}]\", \"live\": true, \"thumbnail_image\": null, \"has_unpublished_changes\": false, \"related_post\": \"[]\", \"angular_url\": \"mantle-graphics-api-terbaru-dari-amd\", \"title_extended\": \"\", \"numchild\": 0, \"content_type\": 34, \"show_in_menus\": false, \"date\": \"2013-12-07\", \"path\": \"0001000100010002\", \"url_path\": \"/home/blog/mantle-graphics-api-terbaru-dari-amd/\", \"expired\": false, \"pk\": 7, \"categories\": \"[{\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Technology\\\"}]\", \"main_image\": 11, \"locked\": false, \"author\": \"Abirafdi Raditya Putra\", \"depth\": 4, \"first_published_at\": \"2015-08-12T23:52:15.433Z\", \"expire_at\": null}", "user": 1, "page": 7}, "model": "wagtailcore.pagerevision", "pk": 8}, {"fields": {"approved_go_live_at": null, "created_at": "2015-08-12T23:53:38.611Z", "submitted_for_moderation": false, "content_json": "{\"search_description\": \"\", \"owner\": 1, \"intro\": \"<p>Para gamer dan pengguna PC tentunya sudah akrab dengan API directX atau Open GL, keduanya kerap dipakai pengembang game sebagai landasan mereka membuat karya yang ciamik. Mantle merupakan pendatang baru dari AMD yang diharapkan dapat meningkatkan performa graphics.</p>\", \"latest_revision_created_at\": \"2015-08-12T23:53:28.837Z\", \"main_background_image\": null, \"go_live_at\": null, \"title\": \"Mantle Graphics API Terbaru Dari AMD\", \"seo_title\": \"\", \"slug\": \"mantle-graphics-api-terbaru-dari-amd\", \"content\": \"[{\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Para gamer dan pengguna PC tentunya sudah akrab dengan API directX atau Open GL, keduanya kerap dipakai pengembang game sebagai landasan mereka membuat karya yang ciamik.\\\\u00a0Mantle sama dengan directX dan Open GL. Hanya saja API ini dikembangkan oleh AMD dan dipercaya akan menjadi sebuah standart baru dari industri game. Berbeda dengan directX atau Open GL, Mantle memungkinkan pengembang game untuk membuat suatu 'bahasa' yang bisa langsung dimengerti oleh mesin, dalam hal ini adalah kartu grafis Radeon. Sekadar catatan, selama ini kebanyakan game menggunakan directX sebagai 'penterjemah bahasa' untuk berbagai kartu grafis. Alhasil, komunikasi antara game dengan mesin yang bertugas mengolah data akan semakin lancar. Ujung-ujungnya adalah, performa grafis yang meningkat, dan kebebasan developer untuk membuat animasi baru dengan memaksimalkan semua fitur pada sebuah kartu grafis.\\\\u00a0</p><p>Mantle, diklaim AMD akan menjadi standart baru di dunia game, dan sepertinya benar demikian, mengingat Xbox One dan PS4 sama-sama mengusung chip dari 'kubu merah'. Hal itu tentu saja membuat para developer dapat lebih mudah membuat game yang sama untuk konsol dan PC, terlebih lagi kedua platform ini bisa menggunakan API yang sama.\\\\u00a0Dengan seluruh konsep yang ditawarkan, kelahiran Mantle sudah pasti disambut baik oleh sejumlah pembuat game, salah satu DICE yang sukses membuat seri Battlefield.\\\\u00a0</p><p></p><p></p><p>Battlefield 4 akan diluncurkan akhir 2013 ini adalah game pertama yang menggunakan teknologi Mantle. Bukan hanya pada versi PC, versi konsolnya pun bakal kebagian fitur tersebut.\\\\u00a0Jadi sudah terbayang bukan, seperti apa jadinya jika ada satu game yang mampu memaksimalkan seluruh kekuatan dan fitur pada kartu grafis PC?\\\\u00a0Saat dirilis nanti Mantle hanya bisa dipakai pada jajaran kartu grafis Hawaii, belum bisa dipastikan apakah aplikasi ini juga akan kompatibel dengan seri Radeon terdahulu. Begitu juga soal kemungkinan bisa dipakai pada GPU lain.\\\\u00a0</p>\\\"}]\", \"live\": true, \"thumbnail_image\": 12, \"has_unpublished_changes\": false, \"related_post\": \"[]\", \"angular_url\": \"mantle-graphics-api-terbaru-dari-amd\", \"title_extended\": \"\", \"numchild\": 0, \"content_type\": 34, \"show_in_menus\": false, \"date\": \"2013-12-07\", \"path\": \"0001000100010002\", \"url_path\": \"/home/blog/mantle-graphics-api-terbaru-dari-amd/\", \"expired\": false, \"pk\": 7, \"categories\": \"[{\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Technology\\\"}]\", \"main_image\": 11, \"locked\": false, \"author\": \"Abirafdi Raditya Putra\", \"depth\": 4, \"first_published_at\": \"2015-08-12T23:52:15.433Z\", \"expire_at\": null}", "user": 1, "page": 7}, "model": "wagtailcore.pagerevision", "pk": 9}, {"fields": {"approved_go_live_at": null, "created_at": "2015-08-12T23:55:06.236Z", "submitted_for_moderation": false, "content_json": "{\"search_description\": \"\", \"owner\": 1, \"intro\": \"<p>Para gamer dan pengguna PC tentunya sudah akrab dengan API directX atau Open GL, keduanya kerap dipakai pengembang game sebagai landasan mereka membuat karya yang ciamik. Mantle merupakan pendatang baru dari AMD yang diharapkan dapat meningkatkan performa graphics.</p>\", \"latest_revision_created_at\": \"2015-08-12T23:53:38.611Z\", \"main_background_image\": null, \"go_live_at\": null, \"title\": \"Mantle Graphics API Terbaru Dari AMD\", \"seo_title\": \"\", \"slug\": \"mantle-graphics-api-terbaru-dari-amd\", \"content\": \"[{\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Para gamer dan pengguna PC tentunya sudah akrab dengan API directX atau Open GL, keduanya kerap dipakai pengembang game sebagai landasan mereka membuat karya yang ciamik.\\\\u00a0Mantle sama dengan directX dan Open GL. Hanya saja API ini dikembangkan oleh AMD dan dipercaya akan menjadi sebuah standart baru dari industri game. Berbeda dengan directX atau Open GL, Mantle memungkinkan pengembang game untuk membuat suatu 'bahasa' yang bisa langsung dimengerti oleh mesin, dalam hal ini adalah kartu grafis Radeon. Sekadar catatan, selama ini kebanyakan game menggunakan directX sebagai 'penterjemah bahasa' untuk berbagai kartu grafis. Alhasil, komunikasi antara game dengan mesin yang bertugas mengolah data akan semakin lancar. Ujung-ujungnya adalah, performa grafis yang meningkat, dan kebebasan developer untuk membuat animasi baru dengan memaksimalkan semua fitur pada sebuah kartu grafis.\\\\u00a0</p><p>Mantle, diklaim AMD akan menjadi standart baru di dunia game, dan sepertinya benar demikian, mengingat Xbox One dan PS4 sama-sama mengusung chip dari 'kubu merah'. Hal itu tentu saja membuat para developer dapat lebih mudah membuat game yang sama untuk konsol dan PC, terlebih lagi kedua platform ini bisa menggunakan API yang sama.\\\\u00a0Dengan seluruh konsep yang ditawarkan, kelahiran Mantle sudah pasti disambut baik oleh sejumlah pembuat game, salah satu DICE yang sukses membuat seri Battlefield.\\\\u00a0</p><p></p><p></p><p>Battlefield 4 akan diluncurkan akhir 2013 ini adalah game pertama yang menggunakan teknologi Mantle. Bukan hanya pada versi PC, versi konsolnya pun bakal kebagian fitur tersebut.\\\\u00a0Jadi sudah terbayang bukan, seperti apa jadinya jika ada satu game yang mampu memaksimalkan seluruh kekuatan dan fitur pada kartu grafis PC?\\\\u00a0Saat dirilis nanti Mantle hanya bisa dipakai pada jajaran kartu grafis Hawaii, belum bisa dipastikan apakah aplikasi ini juga akan kompatibel dengan seri Radeon terdahulu. Begitu juga soal kemungkinan bisa dipakai pada GPU lain.\\\\u00a0</p>\\\"}]\", \"live\": true, \"thumbnail_image\": null, \"has_unpublished_changes\": false, \"related_post\": \"[]\", \"angular_url\": \"mantle-graphics-api-terbaru-dari-amd\", \"title_extended\": \"\", \"numchild\": 0, \"content_type\": 34, \"show_in_menus\": false, \"date\": \"2013-12-07\", \"path\": \"0001000100010002\", \"url_path\": \"/home/blog/mantle-graphics-api-terbaru-dari-amd/\", \"expired\": false, \"pk\": 7, \"categories\": \"[{\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Technology\\\"}]\", \"main_image\": 11, \"locked\": false, \"author\": \"Abirafdi Raditya Putra\", \"depth\": 4, \"first_published_at\": \"2015-08-12T23:52:15.433Z\", \"expire_at\": null}", "user": 1, "page": 7}, "model": "wagtailcore.pagerevision", "pk": 10}, {"fields": {"approved_go_live_at": null, "created_at": "2015-08-12T23:55:13.076Z", "submitted_for_moderation": false, "content_json": "{\"search_description\": \"\", \"owner\": 1, \"intro\": \"<p>Para gamer dan pengguna PC tentunya sudah akrab dengan API directX atau Open GL, keduanya kerap dipakai pengembang game sebagai landasan mereka membuat karya yang ciamik. Mantle merupakan pendatang baru dari AMD yang diharapkan dapat meningkatkan performa graphics.</p>\", \"latest_revision_created_at\": \"2015-08-12T23:55:06.236Z\", \"main_background_image\": null, \"go_live_at\": null, \"title\": \"Mantle Graphics API Terbaru Dari AMD\", \"seo_title\": \"\", \"slug\": \"mantle-graphics-api-terbaru-dari-amd\", \"content\": \"[{\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Para gamer dan pengguna PC tentunya sudah akrab dengan API directX atau Open GL, keduanya kerap dipakai pengembang game sebagai landasan mereka membuat karya yang ciamik.\\\\u00a0Mantle sama dengan directX dan Open GL. Hanya saja API ini dikembangkan oleh AMD dan dipercaya akan menjadi sebuah standart baru dari industri game. Berbeda dengan directX atau Open GL, Mantle memungkinkan pengembang game untuk membuat suatu 'bahasa' yang bisa langsung dimengerti oleh mesin, dalam hal ini adalah kartu grafis Radeon. Sekadar catatan, selama ini kebanyakan game menggunakan directX sebagai 'penterjemah bahasa' untuk berbagai kartu grafis. Alhasil, komunikasi antara game dengan mesin yang bertugas mengolah data akan semakin lancar. Ujung-ujungnya adalah, performa grafis yang meningkat, dan kebebasan developer untuk membuat animasi baru dengan memaksimalkan semua fitur pada sebuah kartu grafis.\\\\u00a0</p><p>Mantle, diklaim AMD akan menjadi standart baru di dunia game, dan sepertinya benar demikian, mengingat Xbox One dan PS4 sama-sama mengusung chip dari 'kubu merah'. Hal itu tentu saja membuat para developer dapat lebih mudah membuat game yang sama untuk konsol dan PC, terlebih lagi kedua platform ini bisa menggunakan API yang sama.\\\\u00a0Dengan seluruh konsep yang ditawarkan, kelahiran Mantle sudah pasti disambut baik oleh sejumlah pembuat game, salah satu DICE yang sukses membuat seri Battlefield.\\\\u00a0</p><p></p><p></p><p>Battlefield 4 akan diluncurkan akhir 2013 ini adalah game pertama yang menggunakan teknologi Mantle. Bukan hanya pada versi PC, versi konsolnya pun bakal kebagian fitur tersebut.\\\\u00a0Jadi sudah terbayang bukan, seperti apa jadinya jika ada satu game yang mampu memaksimalkan seluruh kekuatan dan fitur pada kartu grafis PC?\\\\u00a0Saat dirilis nanti Mantle hanya bisa dipakai pada jajaran kartu grafis Hawaii, belum bisa dipastikan apakah aplikasi ini juga akan kompatibel dengan seri Radeon terdahulu. Begitu juga soal kemungkinan bisa dipakai pada GPU lain.\\\\u00a0</p>\\\"}]\", \"live\": true, \"thumbnail_image\": 12, \"has_unpublished_changes\": false, \"related_post\": \"[]\", \"angular_url\": \"mantle-graphics-api-terbaru-dari-amd\", \"title_extended\": \"\", \"numchild\": 0, \"content_type\": 34, \"show_in_menus\": false, \"date\": \"2013-12-07\", \"path\": \"0001000100010002\", \"url_path\": \"/home/blog/mantle-graphics-api-terbaru-dari-amd/\", \"expired\": false, \"pk\": 7, \"categories\": \"[{\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Technology\\\"}]\", \"main_image\": 11, \"locked\": false, \"author\": \"Abirafdi Raditya Putra\", \"depth\": 4, \"first_published_at\": \"2015-08-12T23:52:15.433Z\", \"expire_at\": null}", "user": 1, "page": 7}, "model": "wagtailcore.pagerevision", "pk": 11}, {"fields": {"approved_go_live_at": null, "created_at": "2015-08-12T23:56:16.312Z", "submitted_for_moderation": false, "content_json": "{\"search_description\": \"\", \"owner\": 1, \"intro\": \"<p>Para gamer dan pengguna PC tentunya sudah akrab dengan API directX atau Open GL, keduanya kerap dipakai pengembang game sebagai landasan mereka membuat karya yang ciamik. Mantle merupakan pendatang baru dari AMD yang diharapkan dapat meningkatkan performa graphics.</p>\", \"latest_revision_created_at\": \"2015-08-12T23:55:13.076Z\", \"main_background_image\": null, \"go_live_at\": null, \"title\": \"Mantle Graphics API Terbaru Dari AMD\", \"seo_title\": \"\", \"slug\": \"mantle-graphics-api-terbaru-dari-amd\", \"content\": \"[{\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Para gamer dan pengguna PC tentunya sudah akrab dengan API directX atau Open GL, keduanya kerap dipakai pengembang game sebagai landasan mereka membuat karya yang ciamik.\\\\u00a0Mantle sama dengan directX dan Open GL. Hanya saja API ini dikembangkan oleh AMD dan dipercaya akan menjadi sebuah standart baru dari industri game. Berbeda dengan directX atau Open GL, Mantle memungkinkan pengembang game untuk membuat suatu 'bahasa' yang bisa langsung dimengerti oleh mesin, dalam hal ini adalah kartu grafis Radeon. Sekadar catatan, selama ini kebanyakan game menggunakan directX sebagai 'penterjemah bahasa' untuk berbagai kartu grafis. Alhasil, komunikasi antara game dengan mesin yang bertugas mengolah data akan semakin lancar. Ujung-ujungnya adalah, performa grafis yang meningkat, dan kebebasan developer untuk membuat animasi baru dengan memaksimalkan semua fitur pada sebuah kartu grafis.\\\\u00a0</p><p>Mantle, diklaim AMD akan menjadi standart baru di dunia game, dan sepertinya benar demikian, mengingat Xbox One dan PS4 sama-sama mengusung chip dari 'kubu merah'. Hal itu tentu saja membuat para developer dapat lebih mudah membuat game yang sama untuk konsol dan PC, terlebih lagi kedua platform ini bisa menggunakan API yang sama.\\\\u00a0Dengan seluruh konsep yang ditawarkan, kelahiran Mantle sudah pasti disambut baik oleh sejumlah pembuat game, salah satu DICE yang sukses membuat seri Battlefield.\\\\u00a0</p><p></p><p></p><p>Battlefield 4 akan diluncurkan akhir 2013 ini adalah game pertama yang menggunakan teknologi Mantle. Bukan hanya pada versi PC, versi konsolnya pun bakal kebagian fitur tersebut.\\\\u00a0Jadi sudah terbayang bukan, seperti apa jadinya jika ada satu game yang mampu memaksimalkan seluruh kekuatan dan fitur pada kartu grafis PC?\\\\u00a0Saat dirilis nanti Mantle hanya bisa dipakai pada jajaran kartu grafis Hawaii, belum bisa dipastikan apakah aplikasi ini juga akan kompatibel dengan seri Radeon terdahulu. Begitu juga soal kemungkinan bisa dipakai pada GPU lain.\\\\u00a0</p>\\\"}]\", \"live\": true, \"thumbnail_image\": 12, \"has_unpublished_changes\": false, \"related_post\": \"[]\", \"angular_url\": \"mantle-graphics-api-terbaru-dari-amd\", \"title_extended\": \"\", \"numchild\": 0, \"content_type\": 34, \"show_in_menus\": false, \"date\": \"2013-12-07\", \"path\": \"0001000100010002\", \"url_path\": \"/home/blog/mantle-graphics-api-terbaru-dari-amd/\", \"expired\": false, \"pk\": 7, \"categories\": \"[{\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Technology\\\"}]\", \"main_image\": 11, \"locked\": false, \"author\": \"Abirafdi Raditya Putra\", \"depth\": 4, \"first_published_at\": \"2015-08-12T23:52:15.433Z\", \"expire_at\": null}", "user": 1, "page": 7}, "model": "wagtailcore.pagerevision", "pk": 12}, {"fields": {"approved_go_live_at": null, "created_at": "2015-08-13T00:04:23.936Z", "submitted_for_moderation": false, "content_json": "{\"search_description\": \"\", \"owner\": 1, \"intro\": \"<p>Kivy adalah GUI/NUI framework yang menggunakan bahasa pemrograman Python, dapat dijalankan pada Windows, Linux, OS X, Android dan iOS dengan menggunakan code yang sama dan\\u00a0menggunakan MIT license sehingga 100% free to use dan boleh dikomersialisasikan.</p>\", \"latest_revision_created_at\": null, \"main_background_image\": null, \"go_live_at\": null, \"title\": \"Kivy Tutorial 1 - Apa itu Kivy?\", \"seo_title\": \"\", \"slug\": \"kivy-tutorial-1-apa-itu-kivy\", \"content\": \"[{\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Kivy adalah GUI/NUI framework yang menggunakan bahasa pemrograman Python, dapat dijalankan pada Windows, Linux, OS X, Android dan iOS dengan menggunakan code yang sama dan\\\\u00a0menggunakan MIT license sehingga 100% free to use dan boleh dikomersialisasikan. Kivy didesain untuk membantu pembuatan dan pengembangan aplikasi cross-platform secara cepat.</p><p>Berikut adalah beberapa kelebihan Kivy</p><ol><li>Cross-platform, code once run anywhere.</li><li>Support berbagai ragam input device dan juga multitouch support.</li><li>Menggunakan OpenGL ES sebagai graphics engine-nya.</li><li>Menggunakan bahasa Python, cocok bagi pemula seperti saya.</li><li>3rd party Python library goodness!</li></ol>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"Mandantory Hello World example! Sangat mudah bukan?\\\"}, {\\\"type\\\": \\\"full_image\\\", \\\"value\\\": 15}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Berikut ini adalah aplikasi menggunakan Kivy yang sudah ada di Play Store dan App Store.\\\\u00a0Disclosure, tidak ada hubungan antara saya dengan pembuat aplikasi dibawah ini melainkan hanya sebatas sharing saja.</p>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"ProcessCraft\\\"}, {\\\"type\\\": \\\"full_image\\\", \\\"value\\\": 16}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"FlatJewels\\\"}, {\\\"type\\\": \\\"full_image\\\", \\\"value\\\": 17}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Dibalik banyak kelebihan, Kivy juga mempunyai beberapa kelemahan.<br/></p><ol><li>Tidak memiliki 100% API support pada iOS (plyer).</li><li>Memiliki startup time yang agak sedikit lebih lama daripada aplikasi native dikarenakan menggunakan wrapper dan Python.</li><li>Tentunya memiliki performa dibawah aplikasi native, namun tidak akan terasa jika hanya sebatas game ringan atau everyday apps</li></ol><p>Menurut saya, Kivy cocok untuk project kecil-kecilan dan pribadi, namun bisa dikembangkan ke arah komersil. Di blog ini saya akan share pengalaman belajar saya menggunakan Kivy dan mudah-mudahan kita bisa saling bertukar ilmu. Di tutorial selanjutnya saya akan menjelaskan meng-configure environment untuk men-develop Kivy beserta GUI editornya. \\\\u00a0See ya!</p><p><br/>Images pulled from :\\\\u00a0<a href=\\\\\\\"https://play.google.com/store/apps/details?id=com.meltingrocks.flatjewels\\\\\\\">FlatJewels</a>\\\\u00a0<a href=\\\\\\\"https://itunes.apple.com/us/app/processcraft/id526377075\\\\\\\">ProcessCraft</a>\\\\u00a0<a href=\\\\\\\"http://kivy.org/#home\\\\\\\">Kivy</a></p>\\\"}]\", \"live\": true, \"thumbnail_image\": 14, \"has_unpublished_changes\": false, \"related_post\": \"[]\", \"angular_url\": \"kivy-tutorial-1-apa-itu-kivy\", \"title_extended\": \"\", \"numchild\": 0, \"content_type\": 34, \"show_in_menus\": false, \"date\": \"2015-03-29\", \"path\": \"0001000100010003\", \"url_path\": \"/home/blog/kivy-tutorial-1-apa-itu-kivy/\", \"expired\": false, \"pk\": 8, \"categories\": \"[{\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Kivy\\\"}, {\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Python\\\"}]\", \"main_image\": 13, \"locked\": false, \"author\": \"Abirafdi Raditya Putra\", \"depth\": 4, \"first_published_at\": null, \"expire_at\": null}", "user": 1, "page": 8}, "model": "wagtailcore.pagerevision", "pk": 13}, {"fields": {"approved_go_live_at": null, "created_at": "2015-08-13T00:04:50.526Z", "submitted_for_moderation": false, "content_json": "{\"search_description\": \"\", \"owner\": 1, \"intro\": \"<p>Kivy adalah GUI/NUI framework yang menggunakan bahasa pemrograman Python, dapat dijalankan pada Windows, Linux, OS X, Android dan iOS dengan menggunakan code yang sama dan\\u00a0menggunakan MIT license sehingga 100% free to use dan boleh dikomersialisasikan.</p>\", \"latest_revision_created_at\": \"2015-08-13T00:04:23.936Z\", \"main_background_image\": null, \"go_live_at\": null, \"title\": \"Kivy Tutorial 1 - Apa itu Kivy?\", \"seo_title\": \"\", \"slug\": \"kivy-tutorial-1---apa-itu-kivy\", \"content\": \"[{\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Kivy adalah GUI/NUI framework yang menggunakan bahasa pemrograman Python, dapat dijalankan pada Windows, Linux, OS X, Android dan iOS dengan menggunakan code yang sama dan\\\\u00a0menggunakan MIT license sehingga 100% free to use dan boleh dikomersialisasikan. Kivy didesain untuk membantu pembuatan dan pengembangan aplikasi cross-platform secara cepat.</p><p>Berikut adalah beberapa kelebihan Kivy</p><ol><li>Cross-platform, code once run anywhere.</li><li>Support berbagai ragam input device dan juga multitouch support.</li><li>Menggunakan OpenGL ES sebagai graphics engine-nya.</li><li>Menggunakan bahasa Python, cocok bagi pemula seperti saya.</li><li>3rd party Python library goodness!</li></ol>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"Mandantory Hello World example! Sangat mudah bukan?\\\"}, {\\\"type\\\": \\\"full_image\\\", \\\"value\\\": 15}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Berikut ini adalah aplikasi menggunakan Kivy yang sudah ada di Play Store dan App Store.\\\\u00a0Disclosure, tidak ada hubungan antara saya dengan pembuat aplikasi dibawah ini melainkan hanya sebatas sharing saja.</p>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"ProcessCraft\\\"}, {\\\"type\\\": \\\"full_image\\\", \\\"value\\\": 16}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"FlatJewels\\\"}, {\\\"type\\\": \\\"full_image\\\", \\\"value\\\": 17}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Dibalik banyak kelebihan, Kivy juga mempunyai beberapa kelemahan.<br/></p><ol><li>Tidak memiliki 100% API support pada iOS (plyer).</li><li>Memiliki startup time yang agak sedikit lebih lama daripada aplikasi native dikarenakan menggunakan wrapper dan Python.</li><li>Tentunya memiliki performa dibawah aplikasi native, namun tidak akan terasa jika hanya sebatas game ringan atau everyday apps</li></ol><p>Menurut saya, Kivy cocok untuk project kecil-kecilan dan pribadi, namun bisa dikembangkan ke arah komersil. Di blog ini saya akan share pengalaman belajar saya menggunakan Kivy dan mudah-mudahan kita bisa saling bertukar ilmu. Di tutorial selanjutnya saya akan menjelaskan meng-configure environment untuk men-develop Kivy beserta GUI editornya. \\\\u00a0See ya!</p><p><br/>Images pulled from :\\\\u00a0<a href=\\\\\\\"https://play.google.com/store/apps/details?id=com.meltingrocks.flatjewels\\\\\\\">FlatJewels</a>\\\\u00a0<a href=\\\\\\\"https://itunes.apple.com/us/app/processcraft/id526377075\\\\\\\">ProcessCraft</a>\\\\u00a0<a href=\\\\\\\"http://kivy.org/#home\\\\\\\">Kivy</a></p>\\\"}]\", \"live\": true, \"thumbnail_image\": 14, \"has_unpublished_changes\": false, \"related_post\": \"[]\", \"angular_url\": \"kivy-tutorial-1---apa-itu-kivy\", \"title_extended\": \"\", \"numchild\": 0, \"content_type\": 34, \"show_in_menus\": false, \"date\": \"2015-03-29\", \"path\": \"0001000100010003\", \"url_path\": \"/home/blog/kivy-tutorial-1-apa-itu-kivy/\", \"expired\": false, \"pk\": 8, \"categories\": \"[{\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Kivy\\\"}, {\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Python\\\"}]\", \"main_image\": 13, \"locked\": false, \"author\": \"Abirafdi Raditya Putra\", \"depth\": 4, \"first_published_at\": \"2015-08-13T00:04:23.945Z\", \"expire_at\": null}", "user": 1, "page": 8}, "model": "wagtailcore.pagerevision", "pk": 14}, {"fields": {"approved_go_live_at": null, "created_at": "2015-08-13T00:13:32.639Z", "submitted_for_moderation": false, "content_json": "{\"search_description\": \"\", \"owner\": 1, \"intro\": \"\", \"latest_revision_created_at\": null, \"main_background_image\": null, \"go_live_at\": null, \"title\": \"Modules Python Yang Wajib Dimiliki - virtualenv dan pip\", \"seo_title\": \"\", \"slug\": \"modules-python-yang-wajib-dimiliki---virtualenv-dan-pip\", \"content\": \"[]\", \"live\": true, \"thumbnail_image\": 19, \"has_unpublished_changes\": false, \"related_post\": \"[]\", \"angular_url\": \"modules-python-yang-wajib-dimiliki---virtualenv-dan-pip\", \"title_extended\": \"\", \"numchild\": 0, \"content_type\": 34, \"show_in_menus\": false, \"date\": \"2015-04-03\", \"path\": \"0001000100010004\", \"url_path\": \"/home/blog/modules-python-yang-wajib-dimiliki---virtualenv-dan-pip/\", \"expired\": false, \"pk\": 9, \"categories\": \"[{\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Kivy\\\"}, {\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Python\\\"}]\", \"main_image\": 18, \"locked\": false, \"author\": \"Abirafdi Raditya Putra\", \"depth\": 4, \"first_published_at\": null, \"expire_at\": null}", "user": 1, "page": 9}, "model": "wagtailcore.pagerevision", "pk": 15}, {"fields": {"approved_go_live_at": null, "created_at": "2015-08-13T00:15:23.164Z", "submitted_for_moderation": false, "content_json": "{\"search_description\": \"\", \"owner\": 1, \"intro\": \"<p>Bagi kalian yang sudah mulai menggunakan framework pasti sering mendengar kata pip dan virtualenv namun masih bingung atau ga ngerti-ngerti, saya akan mencoba menjelaskan apa itu virtualenv dan pip se-simple dan sejelas mungkin, semoga pembaca nantinya jadi mengerti.</p>\", \"latest_revision_created_at\": \"2015-08-13T00:13:32.639Z\", \"main_background_image\": null, \"go_live_at\": null, \"title\": \"Modules Python Yang Wajib Dimiliki - virtualenv dan pip\", \"seo_title\": \"\", \"slug\": \"modules-python-yang-wajib-dimiliki---virtualenv-dan-pip\", \"content\": \"[{\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Bagi kalian yang sudah mulai menggunakan framework pasti sering mendengar kata pip dan virtualenv namun masih bingung atau ga ngerti-ngerti, saya akan mencoba menjelaskan apa itu virtualenv dan pip se-simple dan sejelas mungkin, semoga pembaca nantinya jadi mengerti.\\\\u00a0pip sudah di include di python 2.7.9 dan 3.4, jika kalian menggunakan versi python yang berbeda ikuti petunjuk\\\\u00a0<a href=\\\\\\\"https://pip.pypa.io/en/latest/installing.html#install-pip\\\\\\\">ini</a>, mudah kok.</p><h3>PIP</h3><p>pip adalah singkatan dari\\\\u00a0<strong>P</strong>ip\\\\u00a0<strong>I</strong>nstalls\\\\u00a0<strong>P</strong>ython atau\\\\u00a0<strong>P</strong>IP\\\\u00a0<strong>I</strong>nstalls\\\\u00a0<strong>P</strong>ackages, kepanjangannya ga usah diperhatiin karena memang kalau diartikan terdengar aneh. Bayangkan pip adalah sebuah app store, yang jika diartikan di python adalah sebuah modules/library/package store yang diakses melalui terminal/command line interface dan memiliki fungsi-fungsi sederhana sebagai berikut.</p><ol><li>Install modules</li><li>uninstall modules</li><li>search modules yang tersedia</li><li>mengecek versi modules dan modules apa saja yang terinstall</li></ol><p>Walaupun fungsinya sederhana namun sangat berguna dibandingkan dengan cara menambahkan modules secara konvesional, dimana kita harus men-download source modules dengan mencarinya di internet, menambahkannya ke site-packages atau menjalankan script setup jika disediakan, dan juga jika modules sudah berjumlah banyak maka akan cukup merepotkan untuk keep on track modules-modules apa saja yang sudah kita install atau mengecek versinya. pip mengatasi semua masalah itu, untuk menginstall sebuah modules anda hanya cukup membuka command line dan mengetik commandnya. Berikut merupakan command-command pip.</p><p>\\\\u00a0\\\\u00a0</p><p></p>pip install &lt;package name&gt;<p>Contoh pip install django, maka akan pip akan otomatis me-download django versi terakhir dan beserta dependencies yang dibutuhkannya.</p><p>\\\\u00a0\\\\u00a0</p><p></p>pip show &lt;package name&gt;<p>Digunakan untuk memberi informasi suatu package yang sudah terinstall. Informasi yang diberikan adalah versi, lokasi package, dan dependencies dari package tersebut.</p><p>\\\\u00a0\\\\u00a0</p><p></p>pip list<p>Digunakan untuk melihat semua package yang sudah terinstall.</p><p>\\\\u00a0\\\\u00a0</p><p></p>pip uninstall &lt;package name&gt;<p>self-explanatory.</p><p>\\\\u00a0\\\\u00a0</p><p></p><p>Untuk melihat semua packages bisa dilihat di website\\\\u00a0<a href=\\\\\\\"https://pypi.python.org/pypi\\\\\\\">PyPI</a>\\\\u00a0(Python Packages Index). Anda juga bisa meng-install suatu package dengan versi tertentu dengan contoh command berikut</p>pip install django==1.6.0<p>\\\\u00a0\\\\u00a0</p><p></p><p>Satu lagi kelebihan dari pip adalah, and bisa membuat satu list package yang anda ingin install dengan menuliskannya di txt file, contoh jika anda ingin menggunakan komputer yang berbeda dan di komputer tersebut belum ada packages yang terinstall, anda hanya perlu me-run txt file tersebut dengan mengikuti cara\\\\u00a0<a href=\\\\\\\"https://pip.pypa.io/en/latest/user_guide.html#requirements-files\\\\\\\">ini</a>. Masih ada beberapa command yang lain seperti upgrade versi modul, namun saya akan menjelaskan sampai sini saja, karena yang penting kalian sudah mengerti apa itu sih pip (mudah-mudahan sudah ngerti hehehe maaf kalau penjelasan saya kurang jelas)</p><p>\\\\u00a0\\\\u00a0</p><h3>virtualenv</h3><p>Anggap anda sudah menginstall python versi 2.7 di komputer anda dan memiliki beberapa modules seperti django dll, nah kita sebut saja itu sebuah environment yang menggunakan python versi 2.7 sebagai interpreternya dan django sebagai salah satu modulenya. Lalu anggap anda ingin menggunakan python versi 3.3 dan juga ingin upgrade django ke versi 1.7, maka anda harus me-setting ulang environment path, install ulang lagi modules-modules yang dibutuhkan, dan ternyata aplikasi django di versi sebelumnya tidak jalan di versi 1.7, maka anda harus rollback kembali, kelihatannya repot bukan?\\\\u00a0</p><p>Virtualenv berguna untuk membuat virtual environment dengan mudah tanpa mempengaruhi python di sistem operasi anda. Ingin tes apakah aplikasi anda berjalan di modules versi terbaru? gampang, tinggal buat virtualenv dengan menggunakan modules versi terbaru, modules tersebut tidak akan terinstall di python sistem operasi kita, lalu cek apakah aplikasi kita berjalan, jika tidak maka tinggal hapus saja virtualenv tersebut.\\\\u00a0virtualenv juga menyediakan kita memilih interpreter yang kita inginkan, misal python 2.7 maupun 3.4 dan juga apakah include modules yang sudah terinstall di python sistem operasi kita atau tidak. Catatan, kita juga harus meng-install terlebih dahulu versi python di komputer kita sebelum kita ingin membuat virtualenv dengan versi tersebut.</p><p>pip juga bekerja di dalam virtualenv, misal kita sedang menggunakan virtualenv\\\\u00a0<em>aplikasiPOS,</em>\\\\u00a0tinggal gunakan saja pip untuk meng-install suatu module dan otomatis hanya terinstall di virtualenv\\\\u00a0<em>aplikasiPOS</em>. Berikut merupakan command-command virtualenv, namun sebelumnya kita harus install virtualenv dari pip terlebih dahulu, maka</p>pip install virtualenv<p>\\\\u00a0\\\\u00a0</p><p></p><p>Dengan menggunakan terminal, pindah ke folder yang and ingin virtualenv dibuat, lalu jalankan perintah berikut.</p>virtualenv aplikasiPOS<p>\\\\u00a0\\\\u00a0</p><p></p><p>Nantinya akan terbuat folder dengan nama environment yang berisi versi intrepeter yang sama dengan yang anda gunakan dan juga tanpa modules apapun. Sama seperti fresh install python. Nah untuk mengaktifkan/menggunakan virtualenv tersebut kita menggunakan file bat yang berada di nama-virtualenv\\\\\\\\Scripts\\\\\\\\activate.bat</p>aplikasiPOS\\\\\\\\Scripts\\\\\\\\activate.bat<p>atau di linux</p>source aplikasiPOS\\\\\\\\Scripts\\\\\\\\activate<p>\\\\u00a0\\\\u00a0</p><p></p><p>nantinya di terminal anda akan ada tulisan virtualenv yang sedang aktif, seperti</p>(aplikasiPOS) G:\\\\\\\\virtualenv\\\\\\\\<p>\\\\u00a0\\\\u00a0</p><p></p><p>Setelah aktif, kita bisa gunakan pip untuk menginstall modules-modules yang kita butuhkan atau dengan menggunakan requirements.txt. Modules apapun yang anda install hanya akan ter-install di virtual environment aplikasiPOS, sehingga anda tidak perlu khawatir dengan python sistem operasi anda, atau mungkin anda ingin membuat beberapa aplikasi yang menggunakan modules yang sama namun versi modules yang berbeda, maka virtualenv akan sangat berguna.</p><p>\\\\u00a0\\\\u00a0</p><p></p><p>untuk deactivate virtualenv yang sedang aktif, kita hanya ketik perintah</p>deactivate<p>\\\\u00a0 \\\\u00a0</p><p></p><p>untuk membuat virtualenv dengan versi python tertentu</p>virtualenv --python=c:\\\\\\\\Python34\\\\\\\\python.exe namavirtualenv<p>\\\\u00a0\\\\u00a0</p><p></p><p>untuk membuat virtualenv dengan modules yang sudah terinstall</p>virtualenv\\\\u00a0--system-site-packages\\\\u00a0namavirtualenv<p>\\\\u00a0\\\\u00a0</p><p></p><p>Sekian penjelasan virtualenv dan pip dari saya, semoga dapat memberi pencerahan.\\\\u00a0</p>\\\"}]\", \"live\": true, \"thumbnail_image\": 19, \"has_unpublished_changes\": false, \"related_post\": \"[]\", \"angular_url\": \"modules-python-yang-wajib-dimiliki---virtualenv-dan-pip\", \"title_extended\": \"\", \"numchild\": 0, \"content_type\": 34, \"show_in_menus\": false, \"date\": \"2015-04-03\", \"path\": \"0001000100010004\", \"url_path\": \"/home/blog/modules-python-yang-wajib-dimiliki---virtualenv-dan-pip/\", \"expired\": false, \"pk\": 9, \"categories\": \"[{\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Kivy\\\"}, {\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Python\\\"}]\", \"main_image\": 18, \"locked\": false, \"author\": \"Abirafdi Raditya Putra\", \"depth\": 4, \"first_published_at\": \"2015-08-13T00:13:32.647Z\", \"expire_at\": null}", "user": 1, "page": 9}, "model": "wagtailcore.pagerevision", "pk": 16}, {"fields": {"approved_go_live_at": null, "created_at": "2015-08-13T15:37:04.831Z", "submitted_for_moderation": false, "content_json": "{\"search_description\": \"\", \"owner\": 1, \"intro\": \"<p>Bagi kalian yang sudah mulai menggunakan framework pasti sering mendengar kata pip dan virtualenv namun masih bingung atau ga ngerti-ngerti, saya akan mencoba menjelaskan apa itu virtualenv dan pip se-simple dan sejelas mungkin, semoga pembaca nantinya jadi mengerti.</p>\", \"latest_revision_created_at\": \"2015-08-13T00:15:23.164Z\", \"main_background_image\": null, \"go_live_at\": null, \"title\": \"Modules Python Yang Wajib Dimiliki - virtualenv dan pip\", \"seo_title\": \"\", \"slug\": \"modules-python-yang-wajib-dimiliki---virtualenv-dan-pip\", \"content\": \"[{\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Bagi kalian yang sudah mulai menggunakan framework pasti sering mendengar kata pip dan virtualenv namun masih bingung atau ga ngerti-ngerti, saya akan mencoba menjelaskan apa itu virtualenv dan pip se-simple dan sejelas mungkin, semoga pembaca nantinya jadi mengerti.\\\\u00a0pip sudah di include di python 2.7.9 dan 3.4, jika kalian menggunakan versi python yang berbeda ikuti petunjuk\\\\u00a0<a href=\\\\\\\"https://pip.pypa.io/en/latest/installing.html#install-pip\\\\\\\">ini</a>, mudah kok.</p><h3>PIP</h3><p>pip adalah singkatan dari\\\\u00a0<strong>P</strong>ip\\\\u00a0<strong>I</strong>nstalls\\\\u00a0<strong>P</strong>ython atau\\\\u00a0<strong>P</strong>IP\\\\u00a0<strong>I</strong>nstalls\\\\u00a0<strong>P</strong>ackages, kepanjangannya ga usah diperhatiin karena memang kalau diartikan terdengar aneh. Bayangkan pip adalah sebuah app store, yang jika diartikan di python adalah sebuah modules/library/package store yang diakses melalui terminal/command line interface dan memiliki fungsi-fungsi sederhana sebagai berikut.</p><ol><li>Install modules</li><li>uninstall modules</li><li>search modules yang tersedia</li><li>mengecek versi modules dan modules apa saja yang terinstall</li></ol><p>Walaupun fungsinya sederhana namun sangat berguna dibandingkan dengan cara menambahkan modules secara konvesional, dimana kita harus men-download source modules dengan mencarinya di internet, menambahkannya ke site-packages atau menjalankan script setup jika disediakan, dan juga jika modules sudah berjumlah banyak maka akan cukup merepotkan untuk keep on track modules-modules apa saja yang sudah kita install atau mengecek versinya. pip mengatasi semua masalah itu, untuk menginstall sebuah modules anda hanya cukup membuka command line dan mengetik commandnya. Berikut merupakan command-command pip.</p><p>\\\\u00a0\\\\u00a0</p><p></p>pip install &lt;package name&gt;<p>Contoh pip install django, maka akan pip akan otomatis me-download django versi terakhir dan beserta dependencies yang dibutuhkannya.</p><p>\\\\u00a0\\\\u00a0</p><p></p>pip show &lt;package name&gt;<p>Digunakan untuk memberi informasi suatu package yang sudah terinstall. Informasi yang diberikan adalah versi, lokasi package, dan dependencies dari package tersebut.</p><p>\\\\u00a0\\\\u00a0</p><p></p>pip list<p>Digunakan untuk melihat semua package yang sudah terinstall.</p><p>\\\\u00a0\\\\u00a0</p><p></p>pip uninstall &lt;package name&gt;<p>self-explanatory.</p><p>\\\\u00a0\\\\u00a0</p><p></p><p>Untuk melihat semua packages bisa dilihat di website\\\\u00a0<a href=\\\\\\\"https://pypi.python.org/pypi\\\\\\\">PyPI</a>\\\\u00a0(Python Packages Index). Anda juga bisa meng-install suatu package dengan versi tertentu dengan contoh command berikut</p>pip install django==1.6.0<p>\\\\u00a0\\\\u00a0</p><p></p><p>Satu lagi kelebihan dari pip adalah, and bisa membuat satu list package yang anda ingin install dengan menuliskannya di txt file, contoh jika anda ingin menggunakan komputer yang berbeda dan di komputer tersebut belum ada packages yang terinstall, anda hanya perlu me-run txt file tersebut dengan mengikuti cara\\\\u00a0<a href=\\\\\\\"https://pip.pypa.io/en/latest/user_guide.html#requirements-files\\\\\\\">ini</a>. Masih ada beberapa command yang lain seperti upgrade versi modul, namun saya akan menjelaskan sampai sini saja, karena yang penting kalian sudah mengerti apa itu sih pip (mudah-mudahan sudah ngerti hehehe maaf kalau penjelasan saya kurang jelas)</p><p>\\\\u00a0\\\\u00a0</p><h3>virtualenv</h3><p>Anggap anda sudah menginstall python versi 2.7 di komputer anda dan memiliki beberapa modules seperti django dll, nah kita sebut saja itu sebuah environment yang menggunakan python versi 2.7 sebagai interpreternya dan django sebagai salah satu modulenya. Lalu anggap anda ingin menggunakan python versi 3.3 dan juga ingin upgrade django ke versi 1.7, maka anda harus me-setting ulang environment path, install ulang lagi modules-modules yang dibutuhkan, dan ternyata aplikasi django di versi sebelumnya tidak jalan di versi 1.7, maka anda harus rollback kembali, kelihatannya repot bukan?\\\\u00a0</p><p>Virtualenv berguna untuk membuat virtual environment dengan mudah tanpa mempengaruhi python di sistem operasi anda. Ingin tes apakah aplikasi anda berjalan di modules versi terbaru? gampang, tinggal buat virtualenv dengan menggunakan modules versi terbaru, modules tersebut tidak akan terinstall di python sistem operasi kita, lalu cek apakah aplikasi kita berjalan, jika tidak maka tinggal hapus saja virtualenv tersebut.\\\\u00a0virtualenv juga menyediakan kita memilih interpreter yang kita inginkan, misal python 2.7 maupun 3.4 dan juga apakah include modules yang sudah terinstall di python sistem operasi kita atau tidak. Catatan, kita juga harus meng-install terlebih dahulu versi python di komputer kita sebelum kita ingin membuat virtualenv dengan versi tersebut.</p><p>pip juga bekerja di dalam virtualenv, misal kita sedang menggunakan virtualenv\\\\u00a0<em>aplikasiPOS,</em>\\\\u00a0tinggal gunakan saja pip untuk meng-install suatu module dan otomatis hanya terinstall di virtualenv\\\\u00a0<em>aplikasiPOS</em>. Berikut merupakan command-command virtualenv, namun sebelumnya kita harus install virtualenv dari pip terlebih dahulu, maka</p>pip install virtualenv<p>\\\\u00a0\\\\u00a0</p><p></p><p>Dengan menggunakan terminal, pindah ke folder yang and ingin virtualenv dibuat, lalu jalankan perintah berikut.</p>virtualenv aplikasiPOS<p>\\\\u00a0\\\\u00a0</p><p></p><p>Nantinya akan terbuat folder dengan nama environment yang berisi versi intrepeter yang sama dengan yang anda gunakan dan juga tanpa modules apapun. Sama seperti fresh install python. Nah untuk mengaktifkan/menggunakan virtualenv tersebut kita menggunakan file bat yang berada di nama-virtualenv\\\\\\\\Scripts\\\\\\\\activate.bat</p>aplikasiPOS\\\\\\\\Scripts\\\\\\\\activate.bat<p>atau di linux</p>source aplikasiPOS\\\\\\\\Scripts\\\\\\\\activate<p>\\\\u00a0\\\\u00a0</p><p></p><p>nantinya di terminal anda akan ada tulisan virtualenv yang sedang aktif, seperti</p>(aplikasiPOS) G:\\\\\\\\virtualenv\\\\\\\\<p>\\\\u00a0\\\\u00a0</p><p></p><p>Setelah aktif, kita bisa gunakan pip untuk menginstall modules-modules yang kita butuhkan atau dengan menggunakan requirements.txt. Modules apapun yang anda install hanya akan ter-install di virtual environment aplikasiPOS, sehingga anda tidak perlu khawatir dengan python sistem operasi anda, atau mungkin anda ingin membuat beberapa aplikasi yang menggunakan modules yang sama namun versi modules yang berbeda, maka virtualenv akan sangat berguna.</p><p>\\\\u00a0\\\\u00a0</p><p></p><p>untuk deactivate virtualenv yang sedang aktif, kita hanya ketik perintah</p>deactivate<p>\\\\u00a0 \\\\u00a0</p><p></p><p>untuk membuat virtualenv dengan versi python tertentu</p>virtualenv --python=c:\\\\\\\\Python34\\\\\\\\python.exe namavirtualenv<p>\\\\u00a0\\\\u00a0</p><p></p><p>untuk membuat virtualenv dengan modules yang sudah terinstall</p>virtualenv\\\\u00a0--system-site-packages\\\\u00a0namavirtualenv<p>\\\\u00a0\\\\u00a0</p><p></p><p>Sekian penjelasan virtualenv dan pip dari saya, semoga dapat memberi pencerahan.\\\\u00a0</p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"virtualenv --python=c:\\\\\\\\Python34\\\\\\\\python.exe namavirtualenv\\\"}]\", \"live\": true, \"thumbnail_image\": 19, \"has_unpublished_changes\": false, \"related_post\": \"[]\", \"angular_url\": \"modules-python-yang-wajib-dimiliki---virtualenv-dan-pip\", \"title_extended\": \"\", \"numchild\": 0, \"content_type\": 34, \"show_in_menus\": false, \"date\": \"2015-04-03\", \"path\": \"0001000100010004\", \"url_path\": \"/home/blog/modules-python-yang-wajib-dimiliki---virtualenv-dan-pip/\", \"expired\": false, \"pk\": 9, \"categories\": \"[{\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Kivy\\\"}, {\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Python\\\"}]\", \"main_image\": 18, \"locked\": false, \"author\": \"Abirafdi Raditya Putra\", \"depth\": 4, \"first_published_at\": \"2015-08-13T00:13:32.647Z\", \"expire_at\": null}", "user": 1, "page": 9}, "model": "wagtailcore.pagerevision", "pk": 17}, {"fields": {"approved_go_live_at": null, "created_at": "2015-08-13T16:03:17.227Z", "submitted_for_moderation": false, "content_json": "{\"search_description\": \"\", \"owner\": 1, \"intro\": \"<p>Bagi kalian yang sudah mulai menggunakan framework pasti sering mendengar kata pip dan virtualenv namun masih bingung atau ga ngerti-ngerti, saya akan mencoba menjelaskan apa itu virtualenv dan pip se-simple dan sejelas mungkin, semoga pembaca nantinya jadi mengerti.</p>\", \"latest_revision_created_at\": \"2015-08-13T15:37:04.831Z\", \"main_background_image\": null, \"go_live_at\": null, \"title\": \"Modules Python Yang Wajib Dimiliki - virtualenv dan pip\", \"seo_title\": \"\", \"slug\": \"modules-python-yang-wajib-dimiliki---virtualenv-dan-pip\", \"content\": \"[{\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Bagi kalian yang sudah mulai menggunakan framework pasti sering mendengar kata pip dan virtualenv namun masih bingung atau ga ngerti-ngerti, saya akan mencoba menjelaskan apa itu virtualenv dan pip se-simple dan sejelas mungkin, semoga pembaca nantinya jadi mengerti.\\\\u00a0pip sudah di include di python 2.7.9 dan 3.4, jika kalian menggunakan versi python yang berbeda ikuti petunjuk\\\\u00a0<a href=\\\\\\\"https://pip.pypa.io/en/latest/installing.html#install-pip\\\\\\\">ini</a>, mudah kok.</p><h3>PIP</h3><p>pip adalah singkatan dari\\\\u00a0<strong>P</strong>ip\\\\u00a0<strong>I</strong>nstalls\\\\u00a0<strong>P</strong>ython atau\\\\u00a0<strong>P</strong>IP\\\\u00a0<strong>I</strong>nstalls\\\\u00a0<strong>P</strong>ackages, kepanjangannya ga usah diperhatiin karena memang kalau diartikan terdengar aneh. Bayangkan pip adalah sebuah app store, yang jika diartikan di python adalah sebuah modules/library/package store yang diakses melalui terminal/command line interface dan memiliki fungsi-fungsi sederhana sebagai berikut.</p><ol><li>Install modules</li><li>uninstall modules</li><li>search modules yang tersedia</li><li>mengecek versi modules dan modules apa saja yang terinstall</li></ol><p>Walaupun fungsinya sederhana namun sangat berguna dibandingkan dengan cara menambahkan modules secara konvesional, dimana kita harus men-download source modules dengan mencarinya di internet, menambahkannya ke site-packages atau menjalankan script setup jika disediakan, dan juga jika modules sudah berjumlah banyak maka akan cukup merepotkan untuk keep on track modules-modules apa saja yang sudah kita install atau mengecek versinya. pip mengatasi semua masalah itu, untuk menginstall sebuah modules anda hanya cukup membuka command line dan mengetik commandnya. Berikut merupakan command-command pip.</p><p>\\\\u00a0\\\\u00a0</p><p></p>pip install &lt;package name&gt;<p>Contoh pip install django, maka akan pip akan otomatis me-download django versi terakhir dan beserta dependencies yang dibutuhkannya.</p><p>\\\\u00a0\\\\u00a0</p><p></p>pip show &lt;package name&gt;<p>Digunakan untuk memberi informasi suatu package yang sudah terinstall. Informasi yang diberikan adalah versi, lokasi package, dan dependencies dari package tersebut.</p><p>\\\\u00a0\\\\u00a0</p><p></p>pip list<p>Digunakan untuk melihat semua package yang sudah terinstall.</p><p>\\\\u00a0\\\\u00a0</p><p></p>pip uninstall &lt;package name&gt;<p>self-explanatory.</p><p>\\\\u00a0\\\\u00a0</p><p></p><p>Untuk melihat semua packages bisa dilihat di website\\\\u00a0<a href=\\\\\\\"https://pypi.python.org/pypi\\\\\\\">PyPI</a>\\\\u00a0(Python Packages Index). Anda juga bisa meng-install suatu package dengan versi tertentu dengan contoh command berikut</p>pip install django==1.6.0<p>\\\\u00a0\\\\u00a0</p><p></p><p>Satu lagi kelebihan dari pip adalah, and bisa membuat satu list package yang anda ingin install dengan menuliskannya di txt file, contoh jika anda ingin menggunakan komputer yang berbeda dan di komputer tersebut belum ada packages yang terinstall, anda hanya perlu me-run txt file tersebut dengan mengikuti cara\\\\u00a0<a href=\\\\\\\"https://pip.pypa.io/en/latest/user_guide.html#requirements-files\\\\\\\">ini</a>. Masih ada beberapa command yang lain seperti upgrade versi modul, namun saya akan menjelaskan sampai sini saja, karena yang penting kalian sudah mengerti apa itu sih pip (mudah-mudahan sudah ngerti hehehe maaf kalau penjelasan saya kurang jelas)</p><p>\\\\u00a0\\\\u00a0</p><h3>virtualenv</h3><p>Anggap anda sudah menginstall python versi 2.7 di komputer anda dan memiliki beberapa modules seperti django dll, nah kita sebut saja itu sebuah environment yang menggunakan python versi 2.7 sebagai interpreternya dan django sebagai salah satu modulenya. Lalu anggap anda ingin menggunakan python versi 3.3 dan juga ingin upgrade django ke versi 1.7, maka anda harus me-setting ulang environment path, install ulang lagi modules-modules yang dibutuhkan, dan ternyata aplikasi django di versi sebelumnya tidak jalan di versi 1.7, maka anda harus rollback kembali, kelihatannya repot bukan?\\\\u00a0</p><p>Virtualenv berguna untuk membuat virtual environment dengan mudah tanpa mempengaruhi python di sistem operasi anda. Ingin tes apakah aplikasi anda berjalan di modules versi terbaru? gampang, tinggal buat virtualenv dengan menggunakan modules versi terbaru, modules tersebut tidak akan terinstall di python sistem operasi kita, lalu cek apakah aplikasi kita berjalan, jika tidak maka tinggal hapus saja virtualenv tersebut.\\\\u00a0virtualenv juga menyediakan kita memilih interpreter yang kita inginkan, misal python 2.7 maupun 3.4 dan juga apakah include modules yang sudah terinstall di python sistem operasi kita atau tidak. Catatan, kita juga harus meng-install terlebih dahulu versi python di komputer kita sebelum kita ingin membuat virtualenv dengan versi tersebut.</p><p>pip juga bekerja di dalam virtualenv, misal kita sedang menggunakan virtualenv\\\\u00a0<em>aplikasiPOS,</em>\\\\u00a0tinggal gunakan saja pip untuk meng-install suatu module dan otomatis hanya terinstall di virtualenv\\\\u00a0<em>aplikasiPOS</em>. Berikut merupakan command-command virtualenv, namun sebelumnya kita harus install virtualenv dari pip terlebih dahulu, maka</p>pip install virtualenv<p>\\\\u00a0\\\\u00a0</p><p></p><p>Dengan menggunakan terminal, pindah ke folder yang and ingin virtualenv dibuat, lalu jalankan perintah berikut.</p>virtualenv aplikasiPOS<p>\\\\u00a0\\\\u00a0</p><p></p><p>Nantinya akan terbuat folder dengan nama environment yang berisi versi intrepeter yang sama dengan yang anda gunakan dan juga tanpa modules apapun. Sama seperti fresh install python. Nah untuk mengaktifkan/menggunakan virtualenv tersebut kita menggunakan file bat yang berada di nama-virtualenv\\\\\\\\Scripts\\\\\\\\activate.bat</p>aplikasiPOS\\\\\\\\Scripts\\\\\\\\activate.bat<p>atau di linux</p>source aplikasiPOS\\\\\\\\Scripts\\\\\\\\activate<p>\\\\u00a0\\\\u00a0</p><p></p><p>nantinya di terminal anda akan ada tulisan virtualenv yang sedang aktif, seperti</p>(aplikasiPOS) G:\\\\\\\\virtualenv\\\\\\\\<p>\\\\u00a0\\\\u00a0</p><p></p><p>Setelah aktif, kita bisa gunakan pip untuk menginstall modules-modules yang kita butuhkan atau dengan menggunakan requirements.txt. Modules apapun yang anda install hanya akan ter-install di virtual environment aplikasiPOS, sehingga anda tidak perlu khawatir dengan python sistem operasi anda, atau mungkin anda ingin membuat beberapa aplikasi yang menggunakan modules yang sama namun versi modules yang berbeda, maka virtualenv akan sangat berguna.</p><p>\\\\u00a0\\\\u00a0</p><p></p><p>untuk deactivate virtualenv yang sedang aktif, kita hanya ketik perintah</p>deactivate<p>\\\\u00a0 \\\\u00a0</p><p></p><p>untuk membuat virtualenv dengan versi python tertentu</p>virtualenv --python=c:\\\\\\\\Python34\\\\\\\\python.exe namavirtualenv<p>\\\\u00a0\\\\u00a0</p><p></p><p>untuk membuat virtualenv dengan modules yang sudah terinstall</p>virtualenv\\\\u00a0--system-site-packages\\\\u00a0namavirtualenv<p>\\\\u00a0\\\\u00a0</p><p></p><p>Sekian penjelasan virtualenv dan pip dari saya, semoga dapat memberi pencerahan.\\\\u00a0</p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"var blogApp = angular.module('blog', [\\\\r\\\\n  'blogControllers',\\\\r\\\\n  'blogServices',\\\\r\\\\n  'ngRoute',\\\\r\\\\n\\\\t'ngDisqus',\\\\r\\\\n  'ngSanitize',\\\\r\\\\n\\\\t'duScroll'\\\\r\\\\n]);\\\\r\\\\n\\\\r\\\\nblogApp.config(function($interpolateProvider) {\\\\r\\\\n    $interpolateProvider.startSymbol('{$');\\\\r\\\\n    $interpolateProvider.endSymbol('$}');\\\\r\\\\n});\\\\r\\\\n\\\\r\\\\nblogApp.config(function($disqusProvider) {\\\\r\\\\n    $disqusProvider.setShortname('pythonified');\\\\r\\\\n});\\\\r\\\\n\\\\r\\\\nblogApp.filter('unsafe', function($sce) { return $sce.trustAsHtml; });\\\\r\\\\n\\\\r\\\\nblogApp.filter('object2Array', function() {\\\\r\\\\n\\\\treturn function(input) {\\\\r\\\\n\\\\t\\\\tvar out = [];\\\\r\\\\n\\\\t\\\\tfor(i in input){\\\\r\\\\n\\\\t\\\\t\\\\tout.push(input[i]);\\\\r\\\\n\\\\t\\\\t}\\\\r\\\\n\\\\t\\\\treturn out;\\\\r\\\\n\\\\t}\\\\r\\\\n});\\\\r\\\\n\\\\r\\\\nblogApp.filter('orderObjectBy', function(){\\\\r\\\\n return function(input, attribute) {\\\\r\\\\n    if (!angular.isObject(input)) return input;\\\\r\\\\n\\\\r\\\\n    var array = [];\\\\r\\\\n    for(var objectKey in input) {\\\\r\\\\n        array.push(input[objectKey]);\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    array.sort(function(a, b){\\\\r\\\\n        a = parseInt(a[attribute]);\\\\r\\\\n        b = parseInt(b[attribute]);\\\\r\\\\n        return a - b;\\\\r\\\\n    });\\\\r\\\\n    return array;\\\\r\\\\n }\\\\r\\\\n});\\\\r\\\\n\\\\r\\\\nblogApp.config(['$routeProvider', '$httpProvider', \\\\r\\\\n\\\\tfunction($routeProvider, $httpProvider) {\\\\r\\\\n\\\\t    $routeProvider.\\\\r\\\\n\\\\t    \\\\twhen('/home', {\\\\r\\\\n\\\\t\\\\t\\\\t\\\\ttemplateUrl: '/home-page',\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tactivetab: 'home',\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tcontroller: 'HomeCtrl'\\\\r\\\\n\\\\t\\\\t\\\\t}).\\\\r\\\\n\\\\t    \\\\twhen('/blog', {\\\\r\\\\n\\\\t\\\\t\\\\t\\\\ttemplateUrl: '/blog',\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tcontroller: 'BlogIndexCtrl',\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tactivetab: 'blog',\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tcategory: 'all'\\\\r\\\\n\\\\t\\\\t\\\\t}).\\\\r\\\\n\\\\t\\\\t\\\\twhen('/blog?category=:category', {\\\\r\\\\n\\\\t\\\\t\\\\t\\\\ttemplateUrl: '/blog',\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tcontroller: 'BlogIndexCtrl'\\\\r\\\\n\\\\t\\\\t\\\\t}).\\\\r\\\\n\\\\t\\\\t\\\\twhen('/blog?author=:author', {\\\\r\\\\n\\\\t\\\\t\\\\t\\\\ttemplateUrl: '/blog',\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tcontroller: 'BlogIndexCtrl'\\\\r\\\\n\\\\t\\\\t\\\\t}).\\\\r\\\\n\\\\t\\\\t\\\\twhen('/blog/:postTitle', {\\\\r\\\\n\\\\t\\\\t\\\\t\\\\ttemplateUrl: function (params) {return '/blog/'+params.postTitle},\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tcontroller: 'PostCtrl',\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tactivetab: 'blog'\\\\r\\\\n\\\\t\\\\t\\\\t}).\\\\r\\\\n\\\\t\\\\t\\\\twhen('/about', {\\\\r\\\\n\\\\t\\\\t\\\\t\\\\ttemplateUrl: '/about',\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tcontroller: 'AboutCtrl',\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tactivetab: 'about',\\\\r\\\\n\\\\t\\\\t\\\\t}).\\\\r\\\\n\\\\t\\\\t\\\\twhen('/portofolio', {\\\\r\\\\n\\\\t\\\\t\\\\t\\\\ttemplateUrl: '/portofolio',\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tcontroller: 'PortofolioCtrl',\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tactivetab: 'portofolio',\\\\r\\\\n\\\\t\\\\t\\\\t}).\\\\r\\\\n\\\\t\\\\t\\\\totherwise({\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tredirectTo: '/home'\\\\r\\\\n\\\\t\\\\t\\\\t})\\\\r\\\\n\\\\r\\\\n\\\\t\\\\r\\\\n}]);\\\"}]\", \"live\": true, \"thumbnail_image\": 19, \"has_unpublished_changes\": false, \"related_post\": \"[]\", \"angular_url\": \"modules-python-yang-wajib-dimiliki---virtualenv-dan-pip\", \"title_extended\": \"\", \"numchild\": 0, \"content_type\": 34, \"show_in_menus\": false, \"date\": \"2015-04-03\", \"path\": \"0001000100010004\", \"url_path\": \"/home/blog/modules-python-yang-wajib-dimiliki---virtualenv-dan-pip/\", \"expired\": false, \"pk\": 9, \"categories\": \"[{\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Kivy\\\"}, {\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Python\\\"}]\", \"main_image\": 18, \"locked\": false, \"author\": \"Abirafdi Raditya Putra\", \"depth\": 4, \"first_published_at\": \"2015-08-13T00:13:32.647Z\", \"expire_at\": null}", "user": 1, "page": 9}, "model": "wagtailcore.pagerevision", "pk": 18}, {"fields": {"approved_go_live_at": null, "created_at": "2015-08-13T16:13:39.694Z", "submitted_for_moderation": false, "content_json": "{\"search_description\": \"\", \"owner\": 1, \"intro\": \"<p>Bagi kalian yang sudah mulai menggunakan framework pasti sering mendengar kata pip dan virtualenv namun masih bingung atau ga ngerti-ngerti, saya akan mencoba menjelaskan apa itu virtualenv dan pip se-simple dan sejelas mungkin, semoga pembaca nantinya jadi mengerti.</p>\", \"latest_revision_created_at\": \"2015-08-13T16:03:17.227Z\", \"main_background_image\": null, \"go_live_at\": null, \"title\": \"Modules Python Yang Wajib Dimiliki - virtualenv dan pip\", \"seo_title\": \"\", \"slug\": \"modules-python-yang-wajib-dimiliki---virtualenv-dan-pip\", \"content\": \"[{\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"var blogApp = angular.module('blog', [\\\\r\\\\n  'blogControllers',\\\\r\\\\n  'blogServices',\\\\r\\\\n  'ngRoute',\\\\r\\\\n\\\\t'ngDisqus',\\\\r\\\\n  'ngSanitize',\\\\r\\\\n\\\\t'duScroll'\\\\r\\\\n]);\\\\r\\\\n\\\\r\\\\nblogApp.config(function($interpolateProvider) {\\\\r\\\\n    $interpolateProvider.startSymbol('{$');\\\\r\\\\n    $interpolateProvider.endSymbol('$}');\\\\r\\\\n});\\\\r\\\\n\\\\r\\\\nblogApp.config(function($disqusProvider) {\\\\r\\\\n    $disqusProvider.setShortname('pythonified');\\\\r\\\\n});\\\\r\\\\n\\\\r\\\\nblogApp.filter('unsafe', function($sce) { return $sce.trustAsHtml; });\\\\r\\\\n\\\\r\\\\nblogApp.filter('object2Array', function() {\\\\r\\\\n\\\\treturn function(input) {\\\\r\\\\n\\\\t\\\\tvar out = [];\\\\r\\\\n\\\\t\\\\tfor(i in input){\\\\r\\\\n\\\\t\\\\t\\\\tout.push(input[i]);\\\\r\\\\n\\\\t\\\\t}\\\\r\\\\n\\\\t\\\\treturn out;\\\\r\\\\n\\\\t}\\\\r\\\\n});\\\\r\\\\n\\\\r\\\\nblogApp.filter('orderObjectBy', function(){\\\\r\\\\n return function(input, attribute) {\\\\r\\\\n    if (!angular.isObject(input)) return input;\\\\r\\\\n\\\\r\\\\n    var array = [];\\\\r\\\\n    for(var objectKey in input) {\\\\r\\\\n        array.push(input[objectKey]);\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    array.sort(function(a, b){\\\\r\\\\n        a = parseInt(a[attribute]);\\\\r\\\\n        b = parseInt(b[attribute]);\\\\r\\\\n        return a - b;\\\\r\\\\n    });\\\\r\\\\n    return array;\\\\r\\\\n }\\\\r\\\\n});\\\\r\\\\n\\\\r\\\\nblogApp.config(['$routeProvider', '$httpProvider', \\\\r\\\\n\\\\tfunction($routeProvider, $httpProvider) {\\\\r\\\\n\\\\t    $routeProvider.\\\\r\\\\n\\\\t    \\\\twhen('/home', {\\\\r\\\\n\\\\t\\\\t\\\\t\\\\ttemplateUrl: '/home-page',\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tactivetab: 'home',\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tcontroller: 'HomeCtrl'\\\\r\\\\n\\\\t\\\\t\\\\t}).\\\\r\\\\n\\\\t    \\\\twhen('/blog', {\\\\r\\\\n\\\\t\\\\t\\\\t\\\\ttemplateUrl: '/blog',\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tcontroller: 'BlogIndexCtrl',\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tactivetab: 'blog',\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tcategory: 'all'\\\\r\\\\n\\\\t\\\\t\\\\t}).\\\\r\\\\n\\\\t\\\\t\\\\twhen('/blog?category=:category', {\\\\r\\\\n\\\\t\\\\t\\\\t\\\\ttemplateUrl: '/blog',\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tcontroller: 'BlogIndexCtrl'\\\\r\\\\n\\\\t\\\\t\\\\t}).\\\\r\\\\n\\\\t\\\\t\\\\twhen('/blog?author=:author', {\\\\r\\\\n\\\\t\\\\t\\\\t\\\\ttemplateUrl: '/blog',\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tcontroller: 'BlogIndexCtrl'\\\\r\\\\n\\\\t\\\\t\\\\t}).\\\\r\\\\n\\\\t\\\\t\\\\twhen('/blog/:postTitle', {\\\\r\\\\n\\\\t\\\\t\\\\t\\\\ttemplateUrl: function (params) {return '/blog/'+params.postTitle},\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tcontroller: 'PostCtrl',\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tactivetab: 'blog'\\\\r\\\\n\\\\t\\\\t\\\\t}).\\\\r\\\\n\\\\t\\\\t\\\\twhen('/about', {\\\\r\\\\n\\\\t\\\\t\\\\t\\\\ttemplateUrl: '/about',\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tcontroller: 'AboutCtrl',\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tactivetab: 'about',\\\\r\\\\n\\\\t\\\\t\\\\t}).\\\\r\\\\n\\\\t\\\\t\\\\twhen('/portofolio', {\\\\r\\\\n\\\\t\\\\t\\\\t\\\\ttemplateUrl: '/portofolio',\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tcontroller: 'PortofolioCtrl',\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tactivetab: 'portofolio',\\\\r\\\\n\\\\t\\\\t\\\\t}).\\\\r\\\\n\\\\t\\\\t\\\\totherwise({\\\\r\\\\n\\\\t\\\\t\\\\t\\\\tredirectTo: '/home'\\\\r\\\\n\\\\t\\\\t\\\\t})\\\\r\\\\n\\\\r\\\\n\\\\t\\\\r\\\\n}]);\\\"}]\", \"live\": true, \"thumbnail_image\": 19, \"has_unpublished_changes\": false, \"related_post\": \"[]\", \"angular_url\": \"modules-python-yang-wajib-dimiliki---virtualenv-dan-pip\", \"title_extended\": \"\", \"numchild\": 0, \"content_type\": 34, \"show_in_menus\": false, \"date\": \"2015-04-03\", \"path\": \"0001000100010004\", \"url_path\": \"/home/blog/modules-python-yang-wajib-dimiliki---virtualenv-dan-pip/\", \"expired\": false, \"pk\": 9, \"categories\": \"[{\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Kivy\\\"}, {\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Python\\\"}]\", \"main_image\": 18, \"locked\": false, \"author\": \"Abirafdi Raditya Putra\", \"depth\": 4, \"first_published_at\": \"2015-08-13T00:13:32.647Z\", \"expire_at\": null}", "user": 1, "page": 9}, "model": "wagtailcore.pagerevision", "pk": 19}, {"fields": {"approved_go_live_at": null, "created_at": "2015-08-13T16:29:24.206Z", "submitted_for_moderation": false, "content_json": "{\"search_description\": \"\", \"owner\": 1, \"intro\": \"<p>Bagi kalian yang sudah mulai menggunakan framework pasti sering mendengar kata pip dan virtualenv namun masih bingung atau ga ngerti-ngerti, saya akan mencoba menjelaskan apa itu virtualenv dan pip se-simple dan sejelas mungkin, semoga pembaca nantinya jadi mengerti.</p>\", \"latest_revision_created_at\": \"2015-08-13T16:13:39.694Z\", \"main_background_image\": null, \"go_live_at\": null, \"title\": \"Modules Python Yang Wajib Dimiliki - virtualenv dan pip\", \"seo_title\": \"\", \"slug\": \"modules-python-yang-wajib-dimiliki---virtualenv-dan-pip\", \"content\": \"[{\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Bagi kalian yang sudah mulai menggunakan framework pasti sering mendengar kata pip dan virtualenv namun masih bingung atau ga ngerti-ngerti, saya akan mencoba menjelaskan apa itu virtualenv dan pip se-simple dan sejelas mungkin, semoga pembaca nantinya jadi mengerti hehehe.\\\\u00a0pip sudah di include di python 2.7.9 dan 3.4, jika kalian menggunakan versi python yang berbeda ikuti petunjuk\\\\u00a0<a href=\\\\\\\"https://pip.pypa.io/en/latest/installing.html#install-pip\\\\\\\">ini</a>, mudah kok.</p><h3>PIP</h3><p>pip adalah singkatan dari\\\\u00a0<strong>P</strong>ip\\\\u00a0<strong>I</strong>nstalls\\\\u00a0<strong>P</strong>ython atau\\\\u00a0<strong>P</strong>IP\\\\u00a0<strong>I</strong>nstalls\\\\u00a0<strong>P</strong>ackages, kepanjangannya ga usah diperhatiin karena memang kalau diartikan terdengar aneh. Bayangkan pip adalah sebuah app store, yang jika diartikan di python adalah sebuah modules/library/package store yang diakses melalui terminal/command line interface dan memiliki fungsi-fungsi sederhana sebagai berikut.</p><ol><li>Install modules</li><li>uninstall modules</li><li>search modules yang tersedia</li><li>mengecek versi modules dan modules apa saja yang terinstall</li></ol><p>Walaupun fungsinya sederhana namun sangat berguna dibandingkan dengan cara menambahkan modules secara konvesional, dimana kita harus men-download source modules dengan mencarinya di internet, menambahkannya ke site-packages atau menjalankan script setup jika disediakan, dan juga jika modules sudah berjumlah banyak maka akan cukup merepotkan untuk keep on track modules-modules apa saja yang sudah kita install atau mengecek versinya. pip mengatasi semua masalah itu, untuk menginstall sebuah modules anda hanya cukup membuka command line dan mengetik commandnya. Berikut merupakan command-command pip.</p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"pip install <package name>\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Contoh pip install django, maka akan pip akan otomatis me-download django versi terakhir dan beserta dependencies yang dibutuhkannya.</p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"pip show <package name>\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Digunakan untuk memberi informasi suatu package yang sudah terinstall. Informasi yang diberikan adalah versi, lokasi package, dan dependencies dari package tersebut.</p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"pip list\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Digunakan untuk melihat semua package yang sudah terinstall.</p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"pip uninstall <package name>\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>self-explanatory.</p>\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Untuk melihat semua packages bisa dilihat di website\\\\u00a0<a href=\\\\\\\"https://pypi.python.org/pypi\\\\\\\">PyPI</a>\\\\u00a0(Python Packages Index). Anda juga bisa meng-install suatu package dengan versi tertentu dengan contoh command berikut</p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"pip install django==1.6.0\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Satu lagi kelebihan dari pip adalah, and bisa membuat satu list package yang anda ingin install dengan menuliskannya di txt file, contoh jika anda ingin menggunakan komputer yang berbeda dan di komputer tersebut belum ada packages yang terinstall, anda hanya perlu me-run txt file tersebut dengan mengikuti cara\\\\u00a0<a href=\\\\\\\"https://pip.pypa.io/en/latest/user_guide.html#requirements-files\\\\\\\">ini</a>. Masih ada beberapa command yang lain seperti upgrade versi modul, namun saya akan menjelaskan sampai sini saja, karena yang penting kalian sudah mengerti apa itu sih pip (mudah-mudahan sudah ngerti hehehe maaf kalau penjelasan saya kurang jelas)</p><p>\\\\u00a0\\\\u00a0</p><h3>virtualenv</h3><p>Anggap anda sudah menginstall python versi 2.7 di komputer anda dan memiliki beberapa modules seperti django dll, nah kita sebut saja itu sebuah environment yang menggunakan python versi 2.7 sebagai interpreternya dan django sebagai salah satu modulenya. Lalu anggap anda ingin menggunakan python versi 3.3 dan juga ingin upgrade django ke versi 1.7, maka anda harus me-setting ulang environment path, install ulang lagi modules-modules yang dibutuhkan, dan ternyata aplikasi django di versi sebelumnya tidak jalan di versi 1.7, maka anda harus rollback kembali, kelihatannya repot bukan?\\\\u00a0</p><p>Virtualenv berguna untuk membuat virtual environment dengan mudah tanpa mempengaruhi python di sistem operasi anda. Ingin tes apakah aplikasi anda berjalan di modules versi terbaru? gampang, tinggal buat virtualenv dengan menggunakan modules versi terbaru, modules tersebut tidak akan terinstall di python sistem operasi kita, lalu cek apakah aplikasi kita berjalan, jika tidak maka tinggal hapus saja virtualenv tersebut.\\\\u00a0virtualenv juga menyediakan kita memilih interpreter yang kita inginkan, misal python 2.7 maupun 3.4 dan juga apakah include modules yang sudah terinstall di python sistem operasi kita atau tidak. Catatan, kita juga harus meng-install terlebih dahulu versi python di komputer kita sebelum kita ingin membuat virtualenv dengan versi tersebut.</p><p>pip juga bekerja di dalam virtualenv, misal kita sedang menggunakan virtualenv\\\\u00a0<em>aplikasiPOS,</em>\\\\u00a0tinggal gunakan saja pip untuk meng-install suatu module dan otomatis hanya terinstall di virtualenv\\\\u00a0<em>aplikasiPOS</em>. Berikut merupakan command-command virtualenv, namun sebelumnya kita harus install virtualenv dari pip terlebih dahulu, maka</p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"pip install virtualenv\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Dengan menggunakan terminal, pindah ke folder yang and ingin virtualenv dibuat, lalu jalankan perintah berikut.</p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"virtualenv aplikasiPOS\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Nantinya akan terbuat folder dengan nama environment yang berisi versi intrepeter yang sama dengan yang anda gunakan dan juga tanpa modules apapun. Sama seperti fresh install python. Nah untuk mengaktifkan/menggunakan virtualenv tersebut kita menggunakan file bat yang berada di nama-virtualenv\\\\\\\\Scripts\\\\\\\\activate.bat</p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"aplikasiPOS\\\\\\\\Scripts\\\\\\\\activate.bat\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>atau di linux</p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"source aplikasiPOS\\\\\\\\Scripts\\\\\\\\activate\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>nantinya di terminal anda akan ada tulisan virtualenv yang sedang aktif, seperti</p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"(aplikasiPOS) G:\\\\\\\\virtualenv\\\\\\\\\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Setelah aktif, kita bisa gunakan pip untuk menginstall modules-modules yang kita butuhkan atau dengan menggunakan requirements.txt. Modules apapun yang anda install hanya akan ter-install di virtual environment aplikasiPOS, sehingga anda tidak perlu khawatir dengan python sistem operasi anda, atau mungkin anda ingin membuat beberapa aplikasi yang menggunakan modules yang sama namun versi modules yang berbeda, maka virtualenv akan sangat berguna.</p><p>\\\\u00a0\\\\u00a0</p><p></p><p>untuk deactivate virtualenv yang sedang aktif, kita hanya ketik perintah</p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"deactivate\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>untuk membuat virtualenv dengan versi python tertentu</p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"virtualenv --python=c:\\\\\\\\Python34\\\\\\\\python.exe namavirtualenv\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>untuk membuat virtualenv dengan modules yang sudah terinstall</p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"virtualenv --system-site-packages namavirtualenv\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Sekian penjelasan virtualenv dan pip dari saya, semoga dapat memberi pencerahan.\\\\u00a0</p>\\\"}]\", \"live\": true, \"thumbnail_image\": 19, \"has_unpublished_changes\": false, \"related_post\": \"[]\", \"angular_url\": \"modules-python-yang-wajib-dimiliki---virtualenv-dan-pip\", \"title_extended\": \"\", \"numchild\": 0, \"content_type\": 34, \"show_in_menus\": false, \"date\": \"2015-04-03\", \"path\": \"0001000100010004\", \"url_path\": \"/home/blog/modules-python-yang-wajib-dimiliki---virtualenv-dan-pip/\", \"expired\": false, \"pk\": 9, \"categories\": \"[{\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Kivy\\\"}, {\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Python\\\"}]\", \"main_image\": 18, \"locked\": false, \"author\": \"Abirafdi Raditya Putra\", \"depth\": 4, \"first_published_at\": \"2015-08-13T00:13:32.647Z\", \"expire_at\": null}", "user": 1, "page": 9}, "model": "wagtailcore.pagerevision", "pk": 20}, {"fields": {"approved_go_live_at": null, "created_at": "2015-08-13T16:31:04.763Z", "submitted_for_moderation": false, "content_json": "{\"search_description\": \"\", \"owner\": 1, \"intro\": \"<p>Bagi kalian yang sudah mulai menggunakan framework pasti sering mendengar kata pip dan virtualenv namun masih bingung atau ga ngerti-ngerti, saya akan mencoba menjelaskan apa itu virtualenv dan pip se-simple dan sejelas mungkin, semoga pembaca nantinya jadi mengerti.</p>\", \"latest_revision_created_at\": \"2015-08-13T16:29:24.206Z\", \"main_background_image\": null, \"go_live_at\": null, \"title\": \"Modules Python Yang Wajib Dimiliki - virtualenv dan pip\", \"seo_title\": \"\", \"slug\": \"modules-python-yang-wajib-dimiliki---virtualenv-dan-pip\", \"content\": \"[{\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Bagi kalian yang sudah mulai menggunakan framework pasti sering mendengar kata pip dan virtualenv namun masih bingung atau ga ngerti-ngerti, saya akan mencoba menjelaskan apa itu virtualenv dan pip se-simple dan sejelas mungkin, semoga pembaca nantinya jadi mengerti hehehe.\\\\u00a0pip sudah di include di python 2.7.9 dan 3.4, jika kalian menggunakan versi python yang berbeda ikuti petunjuk\\\\u00a0<a href=\\\\\\\"https://pip.pypa.io/en/latest/installing.html#install-pip\\\\\\\">ini</a>, mudah kok.</p><h3>PIP</h3><p>pip adalah singkatan dari\\\\u00a0<strong>P</strong>ip\\\\u00a0<strong>I</strong>nstalls\\\\u00a0<strong>P</strong>ython atau\\\\u00a0<strong>P</strong>IP\\\\u00a0<strong>I</strong>nstalls\\\\u00a0<strong>P</strong>ackages, kepanjangannya ga usah diperhatiin karena memang kalau diartikan terdengar aneh. Bayangkan pip adalah sebuah app store, yang jika diartikan di python adalah sebuah modules/library/package store yang diakses melalui terminal/command line interface dan memiliki fungsi-fungsi sederhana sebagai berikut.</p><ol><li>Install modules</li><li>uninstall modules</li><li>search modules yang tersedia</li><li>mengecek versi modules dan modules apa saja yang terinstall</li></ol><p>Walaupun fungsinya sederhana namun sangat berguna dibandingkan dengan cara menambahkan modules secara konvesional, dimana kita harus men-download source modules dengan mencarinya di internet, menambahkannya ke site-packages atau menjalankan script setup jika disediakan, dan juga jika modules sudah berjumlah banyak maka akan cukup merepotkan untuk keep on track modules-modules apa saja yang sudah kita install atau mengecek versinya. pip mengatasi semua masalah itu, untuk menginstall sebuah modules anda hanya cukup membuka command line dan mengetik commandnya. Berikut merupakan command-command pip.</p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"pip install <package name>\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Contoh pip install django, maka akan pip akan otomatis me-download django versi terakhir dan beserta dependencies yang dibutuhkannya.</p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"pip show <package name>\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Digunakan untuk memberi informasi suatu package yang sudah terinstall. Informasi yang diberikan adalah versi, lokasi package, dan dependencies dari package tersebut.</p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"pip list\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Digunakan untuk melihat semua package yang sudah terinstall.</p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"pip uninstall <package name>\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>self-explanatory.</p>\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Untuk melihat semua packages bisa dilihat di website\\\\u00a0<a href=\\\\\\\"https://pypi.python.org/pypi\\\\\\\">PyPI</a>\\\\u00a0(Python Packages Index). Anda juga bisa meng-install suatu package dengan versi tertentu dengan contoh command berikut</p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"pip install django==1.6.0\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Satu lagi kelebihan dari pip adalah, and bisa membuat satu list package yang anda ingin install dengan menuliskannya di txt file, contoh jika anda ingin menggunakan komputer yang berbeda dan di komputer tersebut belum ada packages yang terinstall, anda hanya perlu me-run txt file tersebut dengan mengikuti cara\\\\u00a0<a href=\\\\\\\"https://pip.pypa.io/en/latest/user_guide.html#requirements-files\\\\\\\">ini</a>. Masih ada beberapa command yang lain seperti upgrade versi modul, namun saya akan menjelaskan sampai sini saja, karena yang penting kalian sudah mengerti apa itu sih pip (mudah-mudahan sudah ngerti hehehe maaf kalau penjelasan saya kurang jelas)</p><p>\\\\u00a0\\\\u00a0</p><h3>virtualenv</h3><p>Anggap anda sudah menginstall python versi 2.7 di komputer anda dan memiliki beberapa modules seperti django dll, nah kita sebut saja itu sebuah environment yang menggunakan python versi 2.7 sebagai interpreternya dan django sebagai salah satu modulenya. Lalu anggap anda ingin menggunakan python versi 3.3 dan juga ingin upgrade django ke versi 1.7, maka anda harus me-setting ulang environment path, install ulang lagi modules-modules yang dibutuhkan, dan ternyata aplikasi django di versi sebelumnya tidak jalan di versi 1.7, maka anda harus rollback kembali, kelihatannya repot bukan?\\\\u00a0</p><p>Virtualenv berguna untuk membuat virtual environment dengan mudah tanpa mempengaruhi python di sistem operasi anda. Ingin tes apakah aplikasi anda berjalan di modules versi terbaru? gampang, tinggal buat virtualenv dengan menggunakan modules versi terbaru, modules tersebut tidak akan terinstall di python sistem operasi kita, lalu cek apakah aplikasi kita berjalan, jika tidak maka tinggal hapus saja virtualenv tersebut.\\\\u00a0virtualenv juga menyediakan kita memilih interpreter yang kita inginkan, misal python 2.7 maupun 3.4 dan juga apakah include modules yang sudah terinstall di python sistem operasi kita atau tidak. Catatan, kita juga harus meng-install terlebih dahulu versi python di komputer kita sebelum kita ingin membuat virtualenv dengan versi tersebut.</p><p>pip juga bekerja di dalam virtualenv, misal kita sedang menggunakan virtualenv\\\\u00a0<em>aplikasiPOS,</em>\\\\u00a0tinggal gunakan saja pip untuk meng-install suatu module dan otomatis hanya terinstall di virtualenv\\\\u00a0<em>aplikasiPOS</em>. Berikut merupakan command-command virtualenv, namun sebelumnya kita harus install virtualenv dari pip terlebih dahulu, maka</p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"pip install virtualenv\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Dengan menggunakan terminal, pindah ke folder yang and ingin virtualenv dibuat, lalu jalankan perintah berikut.</p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"virtualenv aplikasiPOS\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Nantinya akan terbuat folder dengan nama environment yang berisi versi intrepeter yang sama dengan yang anda gunakan dan juga tanpa modules apapun. Sama seperti fresh install python. Nah untuk mengaktifkan/menggunakan virtualenv tersebut kita menggunakan file bat yang berada di nama-virtualenv\\\\\\\\Scripts\\\\\\\\activate.bat</p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"aplikasiPOS\\\\\\\\Scripts\\\\\\\\activate.bat\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>atau di linux</p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"source aplikasiPOS\\\\\\\\Scripts\\\\\\\\activate\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>nantinya di terminal anda akan ada tulisan virtualenv yang sedang aktif, seperti</p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"(aplikasiPOS) G:\\\\\\\\virtualenv\\\\\\\\\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Setelah aktif, kita bisa gunakan pip untuk menginstall modules-modules yang kita butuhkan atau dengan menggunakan requirements.txt. Modules apapun yang anda install hanya akan ter-install di virtual environment aplikasiPOS, sehingga anda tidak perlu khawatir dengan python sistem operasi anda, atau mungkin anda ingin membuat beberapa aplikasi yang menggunakan modules yang sama namun versi modules yang berbeda, maka virtualenv akan sangat berguna.</p><p>\\\\u00a0\\\\u00a0</p><p></p><p>untuk deactivate virtualenv yang sedang aktif, kita hanya ketik perintah</p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"deactivate\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>untuk membuat virtualenv dengan versi python tertentu</p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"virtualenv --python=c:\\\\\\\\Python34\\\\\\\\python.exe namavirtualenv\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>untuk membuat virtualenv dengan modules yang sudah terinstall</p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"virtualenv --system-site-packages namavirtualenv\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Sekian penjelasan virtualenv dan pip dari saya, semoga dapat memberi pencerahan.\\\\u00a0</p>\\\"}]\", \"live\": true, \"thumbnail_image\": 19, \"has_unpublished_changes\": false, \"related_post\": \"[]\", \"angular_url\": \"modules-python-yang-wajib-dimiliki---virtualenv-dan-pip\", \"title_extended\": \"\", \"numchild\": 0, \"content_type\": 34, \"show_in_menus\": false, \"date\": \"2015-04-03\", \"path\": \"0001000100010004\", \"url_path\": \"/home/blog/modules-python-yang-wajib-dimiliki---virtualenv-dan-pip/\", \"expired\": false, \"pk\": 9, \"categories\": \"[{\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Kivy\\\"}, {\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Python\\\"}]\", \"main_image\": 18, \"locked\": false, \"author\": \"Abirafdi Raditya Putra\", \"depth\": 4, \"first_published_at\": \"2015-08-13T00:13:32.647Z\", \"expire_at\": null}", "user": 1, "page": 9}, "model": "wagtailcore.pagerevision", "pk": 21}, {"fields": {"approved_go_live_at": null, "created_at": "2015-08-13T23:36:40.212Z", "submitted_for_moderation": false, "content_json": "{\"search_description\": \"\", \"owner\": 1, \"intro\": \"<p>Bagi kalian yang sudah mulai menggunakan framework pasti sering mendengar kata pip dan virtualenv namun masih bingung atau ga ngerti-ngerti, saya akan mencoba menjelaskan apa itu virtualenv dan pip se-simple dan sejelas mungkin, semoga pembaca nantinya jadi mengerti.</p>\", \"latest_revision_created_at\": \"2015-08-13T16:31:04.763Z\", \"main_background_image\": null, \"go_live_at\": null, \"title\": \"Modules Python Yang Wajib Dimiliki - virtualenv dan pip\", \"seo_title\": \"\", \"slug\": \"modules-python-yang-wajib-dimiliki---virtualenv-dan-pip\", \"content\": \"[{\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Bagi kalian yang sudah mulai sering menggunakan python pasti sering mendengar kata pip dan virtualenv, saya akan mencoba menjelaskan apa itu virtualenv dan pip se-simple dan sejelas mungkin, semoga dapat memberikan pencerahan.\\\\u00a0pip sudah di-include di python 2.7.9 dan 3.4, jika kalian menggunakan versi python yang berbeda ikuti petunjuk\\\\u00a0<a href=\\\\\\\"https://pip.pypa.io/en/latest/installing.html#install-pip\\\\\\\">ini</a>.</p><h3>PIP</h3><p>pip adalah singkatan dari\\\\u00a0<strong>P</strong>ip\\\\u00a0<strong>I</strong>nstalls\\\\u00a0<strong>P</strong>ython atau\\\\u00a0<strong>P</strong>IP\\\\u00a0<strong>I</strong>nstalls\\\\u00a0<strong>P</strong>ackages, kepanjangannya ga usah diperhatiin karena memang kalau diartikan terdengar aneh. Bayangkan pip adalah sebuah app store (atau biasa disebut sebagai package manager), kita bisa mencari, menginstall, me-manage modules atau package pada installasi python kita. Berikut merupakan fungsi dasar PIP.</p><ol><li>Install modules</li><li>uninstall modules</li><li>search modules yang tersedia</li><li>mengecek versi modules dan modules apa saja yang terinstall</li></ol><p>Walaupun fungsinya sederhana namun sangat memberikan kemudahan dibandingkan dengan cara menambahkan modules secara konvesional, dimana kita harus men-download source modules dengan mencarinya di internet, menambahkannya ke site-packages atau menjalankan script setup jika disediakan, dan juga jika modules sudah berjumlah banyak maka akan cukup merepotkan untuk keep on track modules-modules apa saja yang sudah kita install atau mengecek versinya. pip mengatasi semua masalah itu, untuk menginstall sebuah modules anda hanya cukup membuka command line dan mengetik commandnya. Berikut merupakan command-command pip.</p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"pip install <package name>\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Contoh jika kita ingin meng-install django kita gunakan command \\\\\\\"pip install django\\\\\\\", maka akan pip akan otomatis me-download django versi terakhir dan beserta dependencies yang dibutuhkannya.</p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"pip show <package name>\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Digunakan untuk memberi informasi suatu package yang sudah terinstall. Informasi yang diberikan adalah versi, lokasi package, dan dependencies dari package tersebut.</p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"pip list\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Digunakan untuk melihat semua package yang sudah terinstall.</p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"pip uninstall <package name>\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>self-explanatory.</p>\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Untuk melihat semua packages bisa dilihat di website\\\\u00a0<a href=\\\\\\\"https://pypi.python.org/pypi\\\\\\\">PyPI</a>\\\\u00a0(Python Packages Index). Anda juga bisa meng-install suatu package dengan versi tertentu dengan contoh command berikut</p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"pip install django==1.6.0\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Satu lagi kelebihan dari pip adalah, and bisa membuat satu list package yang anda ingin install dengan menuliskannya di txt file, contoh jika anda ingin menggunakan komputer yang berbeda dan di komputer tersebut belum ada packages yang terinstall, anda hanya perlu me-run txt file tersebut dengan mengikuti cara\\\\u00a0<a href=\\\\\\\"https://pip.pypa.io/en/latest/user_guide.html#requirements-files\\\\\\\">ini</a>. Masih banyak command-command lain yang tersedia, untuk lebih jelasnya bisa lihat di\\\\u00a0<a href=\\\\\\\"https://pip.pypa.io/en/stable/reference/index.html\\\\\\\">dokumentasinya</a>.</p><p>\\\\u00a0\\\\u00a0</p><h3>virtualenv</h3><p>Anggap anda sudah menginstall python versi 2.7 di komputer anda dan memiliki beberapa modules seperti django dll, nah kita sebut itu sebagai sebuah environment yang menggunakan python versi 2.7 sebagai interpreternya dan django sebagai salah satu modulenya. Lalu anggap anda ingin menggunakan python versi 3.3 dan juga ingin upgrade django ke versi 1.7, maka anda harus me-setting ulang environment path, install ulang lagi modules-modules yang dibutuhkan, dan ternyata aplikasi django di versi sebelumnya tidak jalan di versi 1.7, maka anda harus rollback kembali, kelihatannya repot bukan?\\\\u00a0</p><p>Virtualenv berguna untuk membuat virtual environment dengan mudah tanpa mempengaruhi python di sistem operasi anda. Ingin tes apakah aplikasi anda berjalan di modules versi terbaru? gampang, tinggal buat virtualenv dengan menggunakan modules versi terbaru, modules tersebut tidak akan terinstall di python sistem operasi kita, lalu cek apakah aplikasi kita berjalan, jika tidak maka tinggal hapus saja virtualenv tersebut.\\\\u00a0virtualenv juga menyediakan kita memilih interpreter yang kita inginkan, misal python 2.7 maupun 3.4 dan juga apakah include modules yang sudah terinstall di python sistem operasi kita atau tidak. Catatan, kita juga harus meng-install terlebih dahulu versi python di komputer kita sebelum kita ingin membuat virtualenv dengan versi tersebut.</p><p>pip juga bekerja di dalam virtualenv, misal kita sedang menggunakan virtualenv\\\\u00a0<em>aplikasiPOS,</em>\\\\u00a0tinggal gunakan saja pip untuk meng-install suatu module dan otomatis hanya terinstall di virtualenv\\\\u00a0<em>aplikasiPOS</em>. Berikut merupakan command-command virtualenv, namun sebelumnya kita harus install virtualenv dari pip terlebih dahulu, maka</p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"pip install virtualenv\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Dengan menggunakan terminal, pindah ke folder yang and ingin virtualenv dibuat, lalu jalankan perintah berikut.</p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"virtualenv aplikasiPOS\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Nantinya akan terbuat folder dengan nama environment yang berisi versi intrepeter yang sama dengan yang anda gunakan dan juga tanpa modules apapun. Sama seperti fresh install python. Nah untuk mengaktifkan/menggunakan virtualenv tersebut kita menggunakan file bat yang berada di nama-virtualenv\\\\\\\\Scripts\\\\\\\\activate.bat</p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"aplikasiPOS\\\\\\\\Scripts\\\\\\\\activate.bat\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>atau di linux</p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"source aplikasiPOS\\\\\\\\Scripts\\\\\\\\activate\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>nantinya di terminal anda akan ada tulisan virtualenv yang sedang aktif, seperti</p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"(aplikasiPOS) G:\\\\\\\\virtualenv\\\\\\\\\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Setelah aktif, kita bisa gunakan pip untuk menginstall modules-modules yang kita butuhkan atau dengan menggunakan requirements.txt. Modules apapun yang anda install hanya akan ter-install di virtual environment aplikasiPOS, sehingga anda tidak perlu khawatir dengan python sistem operasi anda, atau mungkin anda ingin membuat beberapa aplikasi yang menggunakan modules yang sama namun versi modules yang berbeda, maka virtualenv akan sangat berguna.</p><p>\\\\u00a0\\\\u00a0</p><p></p><p>untuk deactivate virtualenv yang sedang aktif, kita hanya ketik perintah</p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"deactivate\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>untuk membuat virtualenv dengan versi python tertentu</p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"virtualenv --python=c:\\\\\\\\Python34\\\\\\\\python.exe namavirtualenv\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>untuk membuat virtualenv dengan modules yang sudah terinstall</p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"virtualenv --system-site-packages namavirtualenv\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Sekian penjelasan virtualenv dan pip dari saya, semoga dapat memberi pencerahan.\\\\u00a0</p>\\\"}]\", \"live\": true, \"thumbnail_image\": 19, \"has_unpublished_changes\": false, \"related_post\": \"[]\", \"angular_url\": \"modules-python-yang-wajib-dimiliki---virtualenv-dan-pip\", \"title_extended\": \"\", \"numchild\": 0, \"content_type\": 34, \"show_in_menus\": false, \"date\": \"2015-04-03\", \"path\": \"0001000100010004\", \"url_path\": \"/home/blog/modules-python-yang-wajib-dimiliki---virtualenv-dan-pip/\", \"expired\": false, \"pk\": 9, \"categories\": \"[{\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Kivy\\\"}, {\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Python\\\"}]\", \"main_image\": 18, \"locked\": false, \"author\": \"Abirafdi Raditya Putra\", \"depth\": 4, \"first_published_at\": \"2015-08-13T00:13:32.647Z\", \"expire_at\": null}", "user": 1, "page": 9}, "model": "wagtailcore.pagerevision", "pk": 22}, {"fields": {"approved_go_live_at": null, "created_at": "2015-08-13T23:37:22.659Z", "submitted_for_moderation": false, "content_json": "{\"search_description\": \"\", \"owner\": 1, \"intro\": \"<p>Bagi kalian yang sudah mulai menggunakan framework pasti sering mendengar kata pip dan virtualenv namun masih bingung atau ga ngerti-ngerti, saya akan mencoba menjelaskan apa itu virtualenv dan pip se-simple dan sejelas mungkin, semoga pembaca nantinya jadi mengerti.</p>\", \"latest_revision_created_at\": \"2015-08-13T23:36:40.212Z\", \"main_background_image\": null, \"go_live_at\": null, \"title\": \"Modules Python Yang Wajib Dimiliki - virtualenv dan pip\", \"seo_title\": \"\", \"slug\": \"modules-python-yang-wajib-dimiliki---virtualenv-dan-pip\", \"content\": \"[{\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Bagi kalian yang sudah mulai sering menggunakan python pasti sering mendengar kata pip dan virtualenv, saya akan mencoba menjelaskan apa itu virtualenv dan pip se-simple dan sejelas mungkin, semoga dapat memberikan pencerahan.\\\\u00a0pip sudah di-include di python 2.7.9 dan 3.4, jika kalian menggunakan versi python yang berbeda ikuti petunjuk\\\\u00a0<a href=\\\\\\\"https://pip.pypa.io/en/latest/installing.html#install-pip\\\\\\\">ini</a>.</p><h3>PIP</h3><p>pip adalah singkatan dari\\\\u00a0<strong>P</strong>ip\\\\u00a0<strong>I</strong>nstalls\\\\u00a0<strong>P</strong>ython atau\\\\u00a0<strong>P</strong>IP\\\\u00a0<strong>I</strong>nstalls\\\\u00a0<strong>P</strong>ackages, kepanjangannya ga usah diperhatiin karena memang kalau diartikan terdengar aneh. Bayangkan pip adalah sebuah app store (atau biasa disebut sebagai package manager), kita bisa mencari, menginstall, me-manage modules atau package pada installasi python kita. Berikut merupakan fungsi dasar PIP.</p><ol><li>Install modules</li><li>uninstall modules</li><li>search modules yang tersedia</li><li>mengecek versi modules dan modules apa saja yang terinstall</li></ol><p>Walaupun fungsinya sederhana namun sangat memberikan kemudahan dibandingkan dengan cara menambahkan modules secara konvesional, dimana kita harus men-download source modules dengan mencarinya di internet, menambahkannya ke site-packages atau menjalankan script setup jika disediakan, dan juga jika modules sudah berjumlah banyak maka akan cukup merepotkan untuk keep on track modules-modules apa saja yang sudah kita install atau mengecek versinya. pip mengatasi semua masalah itu, untuk menginstall sebuah modules anda hanya cukup membuka command line dan mengetik commandnya. Berikut merupakan command-command pip.</p><p><br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"pip install <package name>\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Contoh jika kita ingin meng-install django kita gunakan command \\\\\\\"pip install django\\\\\\\", maka akan pip akan otomatis me-download django versi terakhir dan beserta dependencies yang dibutuhkannya.</p><p><br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"pip show <package name>\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Digunakan untuk memberi informasi suatu package yang sudah terinstall. Informasi yang diberikan adalah versi, lokasi package, dan dependencies dari package tersebut.</p><p><br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"pip list\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Digunakan untuk melihat semua package yang sudah terinstall.</p><p><br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"pip uninstall <package name>\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>self-explanatory.</p><p><br/></p>\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Untuk melihat semua packages bisa dilihat di website\\\\u00a0<a href=\\\\\\\"https://pypi.python.org/pypi\\\\\\\">PyPI</a>\\\\u00a0(Python Packages Index). Anda juga bisa meng-install suatu package dengan versi tertentu dengan contoh command berikut</p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"pip install django==1.6.0\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p><br/></p><p>Satu lagi kelebihan dari pip adalah, and bisa membuat satu list package yang anda ingin install dengan menuliskannya di txt file, contoh jika anda ingin menggunakan komputer yang berbeda dan di komputer tersebut belum ada packages yang terinstall, anda hanya perlu me-run txt file tersebut dengan mengikuti cara\\\\u00a0<a href=\\\\\\\"https://pip.pypa.io/en/latest/user_guide.html#requirements-files\\\\\\\">ini</a>. Masih banyak command-command lain yang tersedia, untuk lebih jelasnya bisa lihat di\\\\u00a0<a href=\\\\\\\"https://pip.pypa.io/en/stable/reference/index.html\\\\\\\">dokumentasinya</a>.</p><p>\\\\u00a0\\\\u00a0</p><h3>virtualenv</h3><p>Anggap anda sudah menginstall python versi 2.7 di komputer anda dan memiliki beberapa modules seperti django dll, nah kita sebut itu sebagai sebuah environment yang menggunakan python versi 2.7 sebagai interpreternya dan django sebagai salah satu modulenya. Lalu anggap anda ingin menggunakan python versi 3.3 dan juga ingin upgrade django ke versi 1.7, maka anda harus me-setting ulang environment path, install ulang lagi modules-modules yang dibutuhkan, dan ternyata aplikasi django di versi sebelumnya tidak jalan di versi 1.7, maka anda harus rollback kembali, kelihatannya repot bukan?\\\\u00a0</p><p>Virtualenv berguna untuk membuat virtual environment dengan mudah tanpa mempengaruhi python di sistem operasi anda. Ingin tes apakah aplikasi anda berjalan di modules versi terbaru? gampang, tinggal buat virtualenv dengan menggunakan modules versi terbaru, modules tersebut tidak akan terinstall di python sistem operasi kita, lalu cek apakah aplikasi kita berjalan, jika tidak maka tinggal hapus saja virtualenv tersebut.\\\\u00a0virtualenv juga menyediakan kita memilih interpreter yang kita inginkan, misal python 2.7 maupun 3.4 dan juga apakah include modules yang sudah terinstall di python sistem operasi kita atau tidak. Catatan, kita juga harus meng-install terlebih dahulu versi python di komputer kita sebelum kita ingin membuat virtualenv dengan versi tersebut.</p><p>pip juga bekerja di dalam virtualenv, misal kita sedang menggunakan virtualenv\\\\u00a0<em>aplikasiPOS,</em>\\\\u00a0tinggal gunakan saja pip untuk meng-install suatu module dan otomatis hanya terinstall di virtualenv\\\\u00a0<em>aplikasiPOS</em>. Berikut merupakan command-command virtualenv, namun sebelumnya kita harus install virtualenv dari pip terlebih dahulu, maka</p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"pip install virtualenv\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Dengan menggunakan terminal, pindah ke folder yang and ingin virtualenv dibuat, lalu jalankan perintah berikut.</p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"virtualenv aplikasiPOS\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Nantinya akan terbuat folder dengan nama environment yang berisi versi intrepeter yang sama dengan yang anda gunakan dan juga tanpa modules apapun. Sama seperti fresh install python. Nah untuk mengaktifkan/menggunakan virtualenv tersebut kita menggunakan file bat yang berada di nama-virtualenv\\\\\\\\Scripts\\\\\\\\activate.bat</p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"aplikasiPOS\\\\\\\\Scripts\\\\\\\\activate.bat\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>atau di linux</p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"source aplikasiPOS\\\\\\\\Scripts\\\\\\\\activate\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>nantinya di terminal anda akan ada tulisan virtualenv yang sedang aktif, seperti</p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"(aplikasiPOS) G:\\\\\\\\virtualenv\\\\\\\\\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Setelah aktif, kita bisa gunakan pip untuk menginstall modules-modules yang kita butuhkan atau dengan menggunakan requirements.txt. Modules apapun yang anda install hanya akan ter-install di virtual environment aplikasiPOS, sehingga anda tidak perlu khawatir dengan python sistem operasi anda, atau mungkin anda ingin membuat beberapa aplikasi yang menggunakan modules yang sama namun versi modules yang berbeda, maka virtualenv akan sangat berguna.</p><p>\\\\u00a0\\\\u00a0</p><p></p><p>untuk deactivate virtualenv yang sedang aktif, kita hanya ketik perintah</p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"deactivate\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>untuk membuat virtualenv dengan versi python tertentu</p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"virtualenv --python=c:\\\\\\\\Python34\\\\\\\\python.exe namavirtualenv\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>untuk membuat virtualenv dengan modules yang sudah terinstall</p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"virtualenv --system-site-packages namavirtualenv\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Sekian penjelasan virtualenv dan pip dari saya, semoga dapat memberi pencerahan.\\\\u00a0</p>\\\"}]\", \"live\": true, \"thumbnail_image\": 19, \"has_unpublished_changes\": false, \"related_post\": \"[]\", \"angular_url\": \"modules-python-yang-wajib-dimiliki---virtualenv-dan-pip\", \"title_extended\": \"\", \"numchild\": 0, \"content_type\": 34, \"show_in_menus\": false, \"date\": \"2015-04-03\", \"path\": \"0001000100010004\", \"url_path\": \"/home/blog/modules-python-yang-wajib-dimiliki---virtualenv-dan-pip/\", \"expired\": false, \"pk\": 9, \"categories\": \"[{\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Kivy\\\"}, {\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Python\\\"}]\", \"main_image\": 18, \"locked\": false, \"author\": \"Abirafdi Raditya Putra\", \"depth\": 4, \"first_published_at\": \"2015-08-13T00:13:32.647Z\", \"expire_at\": null}", "user": 1, "page": 9}, "model": "wagtailcore.pagerevision", "pk": 23}, {"fields": {"approved_go_live_at": null, "created_at": "2015-08-13T23:40:08.846Z", "submitted_for_moderation": false, "content_json": "{\"search_description\": \"\", \"owner\": 1, \"intro\": \"<p>Bagi kalian yang sudah mulai menggunakan framework pasti sering mendengar kata pip dan virtualenv namun masih bingung atau ga ngerti-ngerti, saya akan mencoba menjelaskan apa itu virtualenv dan pip se-simple dan sejelas mungkin, semoga pembaca nantinya jadi mengerti.</p>\", \"latest_revision_created_at\": \"2015-08-13T23:37:22.659Z\", \"main_background_image\": null, \"go_live_at\": null, \"title\": \"Modules Python Yang Wajib Dimiliki - virtualenv dan pip\", \"seo_title\": \"\", \"slug\": \"modules-python-yang-wajib-dimiliki---virtualenv-dan-pip\", \"content\": \"[{\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Bagi kalian yang sudah mulai sering menggunakan python pasti sering mendengar kata pip dan virtualenv, saya akan mencoba menjelaskan apa itu virtualenv dan pip se-simple dan sejelas mungkin, semoga dapat memberikan pencerahan.\\\\u00a0pip sudah di-include di python 2.7.9 dan 3.4, jika kalian menggunakan versi python yang berbeda ikuti petunjuk\\\\u00a0<a href=\\\\\\\"https://pip.pypa.io/en/latest/installing.html#install-pip\\\\\\\">ini</a>.</p><h3>PIP</h3><p>pip adalah singkatan dari\\\\u00a0<strong>P</strong>ip\\\\u00a0<strong>I</strong>nstalls\\\\u00a0<strong>P</strong>ython atau\\\\u00a0<strong>P</strong>IP\\\\u00a0<strong>I</strong>nstalls\\\\u00a0<strong>P</strong>ackages, kepanjangannya ga usah diperhatiin karena memang kalau diartikan terdengar aneh. Bayangkan pip adalah sebuah app store (atau biasa disebut sebagai package manager), kita bisa mencari, menginstall, me-manage modules atau package pada installasi python kita. Berikut merupakan fungsi dasar PIP.</p><ol><li>Install modules</li><li>uninstall modules</li><li>search modules yang tersedia</li><li>mengecek versi modules dan modules apa saja yang terinstall</li></ol><p>Walaupun fungsinya sederhana namun sangat memberikan kemudahan dibandingkan dengan cara menambahkan modules secara konvesional, dimana kita harus men-download source modules dengan mencarinya di internet, menambahkannya ke site-packages atau menjalankan script setup jika disediakan, dan juga jika modules sudah berjumlah banyak maka akan cukup merepotkan untuk keep on track modules-modules apa saja yang sudah kita install atau mengecek versinya. pip mengatasi semua masalah itu, untuk menginstall sebuah modules anda hanya cukup membuka command line dan mengetik commandnya. Berikut merupakan command-command pip.</p><p><br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"pip install <package name>\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Contoh jika kita ingin meng-install django kita gunakan command \\\\\\\"pip install django\\\\\\\", maka akan pip akan otomatis me-download django versi terakhir dan beserta dependencies yang dibutuhkannya.</p><p><br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"pip show <package name>\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Digunakan untuk memberi informasi suatu package yang sudah terinstall. Informasi yang diberikan adalah versi, lokasi package, dan dependencies dari package tersebut.</p><p><br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"pip list\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Digunakan untuk melihat semua package yang sudah terinstall.</p><p><br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"pip uninstall <package name>\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>self-explanatory.</p><p><br/></p>\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Untuk melihat semua packages bisa dilihat di website\\\\u00a0<a href=\\\\\\\"https://pypi.python.org/pypi\\\\\\\">PyPI</a>\\\\u00a0(Python Packages Index). Anda juga bisa meng-install suatu package dengan versi tertentu dengan contoh command berikut</p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"pip install django==1.6.0\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p><br/></p><p>Satu lagi kelebihan dari pip adalah, and bisa membuat satu list package yang anda ingin install dengan menuliskannya di txt file, contoh jika anda ingin menggunakan komputer yang berbeda dan di komputer tersebut belum ada packages yang terinstall, anda hanya perlu me-run txt file tersebut dengan mengikuti cara\\\\u00a0<a href=\\\\\\\"https://pip.pypa.io/en/latest/user_guide.html#requirements-files\\\\\\\">ini</a>. Masih banyak command-command lain yang tersedia, untuk lebih jelasnya bisa lihat di\\\\u00a0<a href=\\\\\\\"https://pip.pypa.io/en/stable/reference/index.html\\\\\\\">dokumentasinya</a>.</p><p>\\\\u00a0\\\\u00a0</p><h3>virtualenv</h3><p>Anggap anda sudah menginstall python versi 2.7 di komputer anda dan memiliki beberapa modules seperti django dll, nah kita sebut itu sebagai sebuah environment yang menggunakan python versi 2.7 sebagai interpreternya dan django sebagai salah satu modulenya. Lalu anggap anda ingin menggunakan python versi 3.3 dan juga ingin upgrade django ke versi 1.7, maka anda harus me-setting ulang environment path, install ulang lagi modules-modules yang dibutuhkan, dan ternyata aplikasi django di versi sebelumnya tidak jalan di versi 1.7, maka anda harus rollback kembali, kelihatannya repot bukan?\\\\u00a0</p><p>Virtualenv berguna untuk membuat virtual environment dengan mudah tanpa mempengaruhi python di sistem operasi anda. Ingin tes apakah aplikasi anda berjalan di modules versi terbaru? gampang, tinggal buat virtualenv dengan menggunakan modules versi terbaru, modules tersebut tidak akan terinstall di python sistem operasi kita, lalu cek apakah aplikasi kita berjalan, jika tidak maka tinggal hapus saja virtualenv tersebut.\\\\u00a0virtualenv juga menyediakan kita memilih interpreter yang kita inginkan, misal python 2.7 maupun 3.4 dan juga apakah include modules yang sudah terinstall di python sistem operasi kita atau tidak. Catatan, kita juga harus meng-install terlebih dahulu versi python di komputer kita sebelum kita ingin membuat virtualenv dengan versi tersebut.</p><p>pip juga bekerja di dalam virtualenv, misal kita sedang menggunakan virtualenv\\\\u00a0<em>aplikasiPOS,</em>\\\\u00a0tinggal gunakan saja pip untuk meng-install suatu module dan otomatis hanya terinstall di virtualenv\\\\u00a0<em>aplikasiPOS</em>. Berikut merupakan command-command virtualenv, namun sebelumnya kita harus install virtualenv dari pip terlebih dahulu, maka</p><p><br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"pip install virtualenv\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Dengan menggunakan terminal, pindah ke folder yang and ingin virtualenv dibuat, lalu jalankan perintah berikut.</p><p><br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"virtualenv aplikasiPOS\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Nantinya akan terbuat folder dengan nama environment yang berisi versi intrepeter yang sama dengan yang anda gunakan dan juga tanpa modules apapun. Sama seperti fresh install python. Nah untuk mengaktifkan/menggunakan virtualenv tersebut kita menggunakan file bat yang berada di nama-virtualenv\\\\\\\\Scripts\\\\\\\\activate.bat</p><p><br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"aplikasiPOS\\\\\\\\Scripts\\\\\\\\activate.bat\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>atau di linux</p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"source aplikasiPOS\\\\\\\\Scripts\\\\\\\\activate\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p><br/></p><p>nantinya di terminal anda akan ada tulisan virtualenv yang sedang aktif, seperti</p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"(aplikasiPOS) G:\\\\\\\\virtualenv\\\\\\\\\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p><br/></p><p>Setelah aktif, kita bisa gunakan pip untuk menginstall modules-modules yang kita butuhkan atau dengan menggunakan requirements.txt. Modules apapun yang anda install hanya akan ter-install di virtual environment aplikasiPOS, sehingga anda tidak perlu khawatir dengan python sistem operasi anda, atau mungkin anda ingin membuat beberapa aplikasi yang menggunakan modules yang sama namun versi modules yang berbeda, maka virtualenv akan sangat berguna.</p><p>\\\\u00a0\\\\u00a0</p><p></p><p>untuk deactivate virtualenv yang sedang aktif, kita hanya ketik perintah</p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"deactivate\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p><br/></p><p>untuk membuat virtualenv dengan versi python tertentu</p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"virtualenv --python=c:\\\\\\\\Python34\\\\\\\\python.exe namavirtualenv\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p><br/></p><p>untuk membuat virtualenv menggunakan modules yang sudah terinstall pada python kita</p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"virtualenv --system-site-packages namavirtualenv\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p><br/></p><p>Sekian penjelasan virtualenv dan pip dari saya, semoga dapat memberi pencerahan.\\\\u00a0</p>\\\"}]\", \"live\": true, \"thumbnail_image\": 19, \"has_unpublished_changes\": false, \"related_post\": \"[]\", \"angular_url\": \"modules-python-yang-wajib-dimiliki---virtualenv-dan-pip\", \"title_extended\": \"\", \"numchild\": 0, \"content_type\": 34, \"show_in_menus\": false, \"date\": \"2015-04-03\", \"path\": \"0001000100010004\", \"url_path\": \"/home/blog/modules-python-yang-wajib-dimiliki---virtualenv-dan-pip/\", \"expired\": false, \"pk\": 9, \"categories\": \"[{\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Kivy\\\"}, {\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Python\\\"}]\", \"main_image\": 18, \"locked\": false, \"author\": \"Abirafdi Raditya Putra\", \"depth\": 4, \"first_published_at\": \"2015-08-13T00:13:32.647Z\", \"expire_at\": null}", "user": 1, "page": 9}, "model": "wagtailcore.pagerevision", "pk": 24}, {"fields": {"approved_go_live_at": null, "created_at": "2015-08-14T00:39:38.206Z", "submitted_for_moderation": false, "content_json": "{\"search_description\": \"\", \"owner\": 1, \"intro\": \"<h5>Preferensi saya untuk Kivy development</h5>\", \"latest_revision_created_at\": null, \"main_background_image\": null, \"go_live_at\": null, \"title\": \"Kivy Tutorial 2 - Setting up the environment\", \"seo_title\": \"\", \"slug\": \"kivy-tutorial-2---setting-environment\", \"content\": \"[{\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Nah sekarang kita setup environment kita untuk develop kivy. Sebenernya sih udah banyak guide nya di internet, tapi disini saya akan share preferensi saya. Untuk IDE saya menggunakan PyCharm versi free/community edition. Sayangnya packaging untuk semua platform hanya disupport oleh python 2.7, python 3.3 support masih WIP, mau gamau sementara kita menggunakan python 2.7 dulu yah. Folder kivy yang kita download nanti merupakan standalone python dan tidak ada hubungannya dengan python di sistem operasi kita, library/module nya terpisah, bisa dianalogikan seperti\\\\u00a0<a href=\\\\\\\"http://www.pythonified.com/blog/python-modules-yang-wajib-dimiliki-virtualenv-dan-pip/\\\\\\\">virtualenv</a>. Oke, berikut ini step-step configure environment Kivy</p><ol><li><a href=\\\\\\\"http://kivy.org/#download\\\\\\\">Download</a>\\\\u00a0Kivy versi terbaru yang menggunakan python 2.7.</li><li><a href=\\\\\\\"https://www.jetbrains.com/pycharm/download/\\\\\\\">Download</a>\\\\u00a0PyCharm community edition.</li><li>Untuk integrasi Kivy dengan PyCharm bisa dilihat\\\\u00a0<a href=\\\\\\\"https://github.com/kivy/kivy/wiki/Setting-Up-Kivy-with-various-popular-IDE%27s\\\\\\\">disini</a>. Jangan lupa ikuti petunjuk untuk integrasi KV-lang juga yang terletak di bagian bawah artikel.</li></ol><p>Yup, cuma 3 langkah, anda tidak perlu repot-repot bolak-balik buka terminal untuk run aplikasi kita, berbagai fitur dari PyCharm, dan KV-lang juga sudah fully-supported dengan auto-completion dan highlightning. Jangan lupa karena Kivy ini merupakan isolated environment, jika anda ingin meng-install suatu module/library dari pip gunakan file kivy.bat untuk membuka terminal.</p>\\\"}]\", \"live\": true, \"thumbnail_image\": 21, \"has_unpublished_changes\": false, \"related_post\": \"[{\\\"type\\\": \\\"post\\\", \\\"value\\\": 8}]\", \"angular_url\": \"kivy-tutorial-2---setting-environment\", \"title_extended\": \"\", \"numchild\": 0, \"content_type\": 34, \"show_in_menus\": false, \"date\": \"2015-04-05\", \"path\": \"0001000100010005\", \"url_path\": \"/home/blog/kivy-tutorial-2---setting-environment/\", \"expired\": false, \"pk\": 10, \"categories\": \"[{\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Kivy\\\"}, {\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Python\\\"}]\", \"main_image\": 20, \"locked\": false, \"author\": \"Abirafdi Raditya Putra\", \"depth\": 4, \"first_published_at\": null, \"expire_at\": null}", "user": 1, "page": 10}, "model": "wagtailcore.pagerevision", "pk": 25}, {"fields": {"approved_go_live_at": null, "created_at": "2015-08-14T00:44:19.307Z", "submitted_for_moderation": false, "content_json": "{\"search_description\": \"\", \"owner\": 1, \"intro\": \"<h5>Preferensi saya untuk Kivy development</h5>\", \"latest_revision_created_at\": \"2015-08-14T00:39:38.206Z\", \"main_background_image\": null, \"go_live_at\": null, \"title\": \"Kivy Tutorial 2 - Setting up the environment\", \"seo_title\": \"\", \"slug\": \"kivy-tutorial-2---setting-environment\", \"content\": \"[{\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Nah sekarang kita setup environment kita untuk develop kivy. Sebenernya sih udah banyak guide nya di internet, tapi disini saya akan share preferensi saya. Untuk IDE saya menggunakan PyCharm versi free/community edition. Sayangnya packaging untuk semua platform hanya disupport oleh python 2.7, python 3.3 support masih WIP, mau gamau sementara kita menggunakan python 2.7 dulu yah. Folder kivy yang kita download nanti merupakan standalone python dan tidak ada hubungannya dengan python di sistem operasi kita, library/module nya terpisah, bisa dianalogikan seperti\\\\u00a0<a href=\\\\\\\"http://www.pythonified.com/blog/python-modules-yang-wajib-dimiliki-virtualenv-dan-pip/\\\\\\\">virtualenv</a>. Oke, berikut ini step-step configure environment Kivy</p><ol><li><a href=\\\\\\\"http://kivy.org/#download\\\\\\\">Download</a>\\\\u00a0Kivy versi terbaru yang menggunakan python 2.7.</li><li><a href=\\\\\\\"https://www.jetbrains.com/pycharm/download/\\\\\\\">Download</a>\\\\u00a0PyCharm community edition.</li><li>Untuk integrasi Kivy dengan PyCharm bisa dilihat\\\\u00a0<a href=\\\\\\\"https://github.com/kivy/kivy/wiki/Setting-Up-Kivy-with-various-popular-IDE%27s\\\\\\\">disini</a>. Jangan lupa ikuti petunjuk untuk integrasi KV-lang juga yang terletak di bagian bawah artikel.</li></ol><p>Yup, cuma 3 langkah, anda tidak perlu repot-repot bolak-balik buka terminal untuk run aplikasi kita, berbagai fitur dari PyCharm, dan KV-lang juga sudah fully-supported dengan auto-completion dan highlightning. Jangan lupa karena Kivy ini merupakan isolated environment, jika anda ingin meng-install suatu module/library dari pip gunakan file kivy.bat untuk membuka terminal.</p>\\\"}]\", \"live\": true, \"thumbnail_image\": 20, \"has_unpublished_changes\": false, \"related_post\": \"[{\\\"type\\\": \\\"post\\\", \\\"value\\\": 8}]\", \"angular_url\": \"kivy-tutorial-2---setting-environment\", \"title_extended\": \"\", \"numchild\": 0, \"content_type\": 34, \"show_in_menus\": false, \"date\": \"2015-04-05\", \"path\": \"0001000100010005\", \"url_path\": \"/home/blog/kivy-tutorial-2---setting-environment/\", \"expired\": false, \"pk\": 10, \"categories\": \"[{\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Kivy\\\"}, {\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Python\\\"}]\", \"main_image\": 20, \"locked\": false, \"author\": \"Abirafdi Raditya Putra\", \"depth\": 4, \"first_published_at\": \"2015-08-14T00:39:38.276Z\", \"expire_at\": null}", "user": 1, "page": 10}, "model": "wagtailcore.pagerevision", "pk": 26}, {"fields": {"approved_go_live_at": null, "created_at": "2015-08-14T00:50:43.774Z", "submitted_for_moderation": false, "content_json": "{\"search_description\": \"\", \"owner\": 1, \"intro\": \"<h5>Preferensi saya untuk Kivy development</h5>\", \"latest_revision_created_at\": \"2015-08-14T00:44:19.307Z\", \"main_background_image\": null, \"go_live_at\": null, \"title\": \"Kivy Tutorial 2 - Setting up the environment\", \"seo_title\": \"\", \"slug\": \"kivy-tutorial-2---setting-up-the-environment\", \"content\": \"[{\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Nah sekarang kita setup environment kita untuk develop kivy. Sebenernya sih udah banyak guide nya di internet, tapi disini saya akan share preferensi saya. Untuk IDE saya menggunakan PyCharm versi free/community edition. Sayangnya packaging untuk semua platform hanya disupport oleh python 2.7, python 3.3 support masih WIP, mau gamau sementara kita menggunakan python 2.7 dulu yah. Folder kivy yang kita download nanti merupakan standalone python dan tidak ada hubungannya dengan python di sistem operasi kita, library/module nya terpisah, bisa dianalogikan seperti\\\\u00a0<a href=\\\\\\\"http://www.pythonified.com/blog/python-modules-yang-wajib-dimiliki-virtualenv-dan-pip/\\\\\\\">virtualenv</a>. Oke, berikut ini step-step configure environment Kivy</p><ol><li><a href=\\\\\\\"http://kivy.org/#download\\\\\\\">Download</a>\\\\u00a0Kivy versi terbaru yang menggunakan python 2.7.</li><li><a href=\\\\\\\"https://www.jetbrains.com/pycharm/download/\\\\\\\">Download</a>\\\\u00a0PyCharm community edition.</li><li>Untuk integrasi Kivy dengan PyCharm bisa dilihat\\\\u00a0<a href=\\\\\\\"https://github.com/kivy/kivy/wiki/Setting-Up-Kivy-with-various-popular-IDE%27s\\\\\\\">disini</a>. Jangan lupa ikuti petunjuk untuk integrasi KV-lang juga yang terletak di bagian bawah artikel.</li></ol><p>Yup, cuma 3 langkah, anda tidak perlu repot-repot bolak-balik buka terminal untuk run aplikasi kita, berbagai fitur dari PyCharm, dan KV-lang juga sudah fully-supported dengan auto-completion dan highlightning. Jangan lupa karena Kivy ini merupakan isolated environment, jika anda ingin meng-install suatu module/library dari pip gunakan file kivy.bat untuk membuka terminal.</p>\\\"}]\", \"live\": true, \"thumbnail_image\": 20, \"has_unpublished_changes\": false, \"related_post\": \"[{\\\"type\\\": \\\"post\\\", \\\"value\\\": 8}]\", \"angular_url\": \"kivy-tutorial-2---setting-up-the-environment\", \"title_extended\": \"\", \"numchild\": 0, \"content_type\": 34, \"show_in_menus\": false, \"date\": \"2015-04-05\", \"path\": \"0001000100010005\", \"url_path\": \"/home/blog/kivy-tutorial-2---setting-environment/\", \"expired\": false, \"pk\": 10, \"categories\": \"[{\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Kivy\\\"}, {\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Python\\\"}]\", \"main_image\": 20, \"locked\": false, \"author\": \"Abirafdi Raditya Putra\", \"depth\": 4, \"first_published_at\": \"2015-08-14T00:39:38.276Z\", \"expire_at\": null}", "user": 1, "page": 10}, "model": "wagtailcore.pagerevision", "pk": 27}, {"fields": {"approved_go_live_at": null, "created_at": "2015-08-14T00:51:50.752Z", "submitted_for_moderation": false, "content_json": "{\"search_description\": \"\", \"owner\": 1, \"intro\": \"<p>Preferensi saya untuk Kivy development</p>\", \"latest_revision_created_at\": \"2015-08-14T00:50:43.774Z\", \"main_background_image\": null, \"go_live_at\": null, \"title\": \"Kivy Tutorial 2 - Setting up the environment\", \"seo_title\": \"\", \"slug\": \"kivy-tutorial-2---setting-up-the-environment\", \"content\": \"[{\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Nah sekarang kita setup environment kita untuk develop kivy. Sebenernya sih udah banyak guide nya di internet, tapi disini saya akan share preferensi saya. Untuk IDE saya menggunakan PyCharm versi free/community edition. Sayangnya packaging untuk semua platform hanya disupport oleh python 2.7, python 3.3 support masih WIP, mau gamau sementara kita menggunakan python 2.7 dulu yah. Folder kivy yang kita download nanti merupakan standalone python dan tidak ada hubungannya dengan python di sistem operasi kita, library/module nya terpisah, bisa dianalogikan seperti\\\\u00a0<a href=\\\\\\\"http://www.pythonified.com/blog/python-modules-yang-wajib-dimiliki-virtualenv-dan-pip/\\\\\\\">virtualenv</a>. Oke, berikut ini step-step configure environment Kivy</p><ol><li><a href=\\\\\\\"http://kivy.org/#download\\\\\\\">Download</a>\\\\u00a0Kivy versi terbaru yang menggunakan python 2.7.</li><li><a href=\\\\\\\"https://www.jetbrains.com/pycharm/download/\\\\\\\">Download</a>\\\\u00a0PyCharm community edition.</li><li>Untuk integrasi Kivy dengan PyCharm bisa dilihat\\\\u00a0<a href=\\\\\\\"https://github.com/kivy/kivy/wiki/Setting-Up-Kivy-with-various-popular-IDE%27s\\\\\\\">disini</a>. Jangan lupa ikuti petunjuk untuk integrasi KV-lang juga yang terletak di bagian bawah artikel.</li></ol><p>Yup, cuma 3 langkah, anda tidak perlu repot-repot bolak-balik buka terminal untuk run aplikasi kita, berbagai fitur dari PyCharm, dan KV-lang juga sudah fully-supported dengan auto-completion dan highlightning. Jangan lupa karena Kivy ini merupakan isolated environment, jika anda ingin meng-install suatu module/library dari pip gunakan file kivy.bat untuk membuka terminal.</p>\\\"}]\", \"live\": true, \"thumbnail_image\": 20, \"has_unpublished_changes\": false, \"related_post\": \"[{\\\"type\\\": \\\"post\\\", \\\"value\\\": 8}]\", \"angular_url\": \"kivy-tutorial-2---setting-up-the-environment\", \"title_extended\": \"\", \"numchild\": 0, \"content_type\": 34, \"show_in_menus\": false, \"date\": \"2015-04-05\", \"path\": \"0001000100010005\", \"url_path\": \"/home/blog/kivy-tutorial-2---setting-up-the-environment/\", \"expired\": false, \"pk\": 10, \"categories\": \"[{\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Kivy\\\"}, {\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Python\\\"}]\", \"main_image\": 20, \"locked\": false, \"author\": \"Abirafdi Raditya Putra\", \"depth\": 4, \"first_published_at\": \"2015-08-14T00:39:38.276Z\", \"expire_at\": null}", "user": 1, "page": 10}, "model": "wagtailcore.pagerevision", "pk": 28}, {"fields": {"approved_go_live_at": null, "created_at": "2015-08-14T00:57:28.422Z", "submitted_for_moderation": false, "content_json": "{\"search_description\": \"\", \"owner\": 1, \"intro\": \"<p>Preferensi saya untuk Kivy development</p>\", \"latest_revision_created_at\": \"2015-08-14T00:51:50.752Z\", \"main_background_image\": null, \"go_live_at\": null, \"title\": \"Kivy Tutorial 2 - Setting up the environment\", \"seo_title\": \"\", \"slug\": \"kivy-tutorial-2---setting-up-the-environment\", \"content\": \"[{\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Nah sekarang kita setup environment kita untuk develop kivy. Sebenernya sih udah banyak guide nya di internet, tapi disini saya akan share preferensi saya. Untuk IDE saya menggunakan PyCharm versi free/community edition. Sayangnya packaging untuk semua platform hanya disupport oleh python 2.7, python 3.3 support masih WIP, mau gamau sementara kita menggunakan python 2.7 dulu. Folder kivy yang kita download nanti merupakan standalone python dan tidak ada hubungannya dengan python di sistem operasi kita, library/module nya terpisah, bisa dianalogikan seperti\\\\u00a0<a href=\\\\\\\"http://www.pythonified.com/blog/python-modules-yang-wajib-dimiliki-virtualenv-dan-pip/\\\\\\\">virtualenv</a>. Oke, berikut ini step-step configure environment Kivy</p><ol><li><a href=\\\\\\\"http://kivy.org/#download\\\\\\\">Download</a>\\\\u00a0Kivy versi terbaru yang menggunakan python 2.7.</li><li><a href=\\\\\\\"https://www.jetbrains.com/pycharm/download/\\\\\\\">Download</a>\\\\u00a0PyCharm community edition.</li><li>Untuk integrasi Kivy dengan PyCharm bisa dilihat\\\\u00a0<a href=\\\\\\\"https://github.com/kivy/kivy/wiki/Setting-Up-Kivy-with-various-popular-IDE%27s\\\\\\\">disini</a>. Jangan lupa ikuti petunjuk untuk integrasi KV-lang juga yang terletak di bagian bawah artikel.</li></ol><p>Yup, cuma 3 langkah, anda tidak perlu repot-repot bolak-balik buka terminal untuk run aplikasi kita, berbagai fitur dari PyCharm, dan KV-lang juga sudah fully-supported dengan auto-completion dan highlightning. Jangan lupa karena Kivy ini merupakan isolated environment, jika anda ingin meng-install suatu module/library dari pip gunakan file kivy.bat untuk membuka terminal.</p>\\\"}]\", \"live\": true, \"thumbnail_image\": 20, \"has_unpublished_changes\": false, \"related_post\": \"[{\\\"type\\\": \\\"post\\\", \\\"value\\\": 8}]\", \"angular_url\": \"kivy-tutorial-2---setting-up-the-environment\", \"title_extended\": \"\", \"numchild\": 0, \"content_type\": 34, \"show_in_menus\": false, \"date\": \"2015-04-05\", \"path\": \"0001000100010005\", \"url_path\": \"/home/blog/kivy-tutorial-2---setting-up-the-environment/\", \"expired\": false, \"pk\": 10, \"categories\": \"[{\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Kivy\\\"}, {\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Python\\\"}]\", \"main_image\": 20, \"locked\": false, \"author\": \"Abirafdi Raditya Putra\", \"depth\": 4, \"first_published_at\": \"2015-08-14T00:39:38.276Z\", \"expire_at\": null}", "user": 1, "page": 10}, "model": "wagtailcore.pagerevision", "pk": 29}, {"fields": {"approved_go_live_at": null, "created_at": "2015-08-14T00:57:50.520Z", "submitted_for_moderation": false, "content_json": "{\"search_description\": \"\", \"owner\": 1, \"intro\": \"<p>Kivy adalah GUI/NUI framework yang menggunakan bahasa pemrograman Python, dapat dijalankan pada Windows, Linux, OS X, Android dan iOS dengan menggunakan code yang sama dan\\u00a0menggunakan MIT license sehingga 100% free to use dan boleh dikomersialisasikan.</p>\", \"latest_revision_created_at\": \"2015-08-13T00:04:50.526Z\", \"main_background_image\": null, \"go_live_at\": null, \"title\": \"Kivy Tutorial 1 - Apa itu Kivy?\", \"seo_title\": \"\", \"slug\": \"kivy-tutorial-1---apa-itu-kivy\", \"content\": \"[{\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Kivy adalah GUI/NUI framework yang menggunakan bahasa pemrograman Python, dapat dijalankan pada Windows, Linux, OS X, Android dan iOS dengan menggunakan code yang sama dan\\\\u00a0menggunakan MIT license sehingga 100% free to use dan boleh dikomersialisasikan. Kivy didesain untuk membantu pembuatan dan pengembangan aplikasi cross-platform secara cepat.</p><p>Berikut adalah beberapa kelebihan Kivy</p><ol><li>Cross-platform, code once run anywhere.</li><li>Support berbagai ragam input device dan juga multitouch support.</li><li>Menggunakan OpenGL ES sebagai graphics engine-nya.</li><li>Menggunakan bahasa Python, cocok bagi pemula seperti saya.</li><li>3rd party Python library goodness!</li></ol>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"Mandantory Hello World example! Sangat mudah bukan?\\\"}, {\\\"type\\\": \\\"full_image\\\", \\\"value\\\": 15}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Berikut ini adalah aplikasi menggunakan Kivy yang sudah ada di Play Store dan App Store.\\\\u00a0Disclosure, tidak ada hubungan antara saya dengan pembuat aplikasi dibawah ini melainkan hanya sebatas sharing saja.</p>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"ProcessCraft\\\"}, {\\\"type\\\": \\\"full_image\\\", \\\"value\\\": 16}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"FlatJewels\\\"}, {\\\"type\\\": \\\"full_image\\\", \\\"value\\\": 17}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Dibalik banyak kelebihan, Kivy juga mempunyai beberapa kelemahan.<br/></p><ol><li>Tidak memiliki 100% API support pada iOS (plyer).</li><li>Memiliki startup time yang agak sedikit lebih lama daripada aplikasi native dikarenakan menggunakan wrapper dan Python.</li><li>Tentunya memiliki performa dibawah aplikasi native, namun tidak akan terasa jika hanya sebatas game ringan atau everyday apps</li></ol><p>Menurut saya, Kivy cocok untuk project kecil-kecilan dan pribadi, namun bisa dikembangkan ke arah komersil. Di blog ini saya akan share pengalaman belajar saya menggunakan Kivy dan mudah-mudahan kita bisa saling bertukar ilmu. Di tutorial selanjutnya saya akan menjelaskan meng-configure environment untuk men-develop Kivy beserta GUI editornya. \\\\u00a0See ya!</p><p><br/>Images pulled from :\\\\u00a0<a href=\\\\\\\"https://play.google.com/store/apps/details?id=com.meltingrocks.flatjewels\\\\\\\">FlatJewels</a>\\\\u00a0<a href=\\\\\\\"https://itunes.apple.com/us/app/processcraft/id526377075\\\\\\\">ProcessCraft</a>\\\\u00a0<a href=\\\\\\\"http://kivy.org/#home\\\\\\\">Kivy</a></p>\\\"}]\", \"live\": true, \"thumbnail_image\": 14, \"has_unpublished_changes\": false, \"related_post\": \"[{\\\"type\\\": \\\"post\\\", \\\"value\\\": 8}]\", \"angular_url\": \"kivy-tutorial-1---apa-itu-kivy\", \"title_extended\": \"\", \"numchild\": 0, \"content_type\": 34, \"show_in_menus\": false, \"date\": \"2015-03-29\", \"path\": \"0001000100010003\", \"url_path\": \"/home/blog/kivy-tutorial-1---apa-itu-kivy/\", \"expired\": false, \"pk\": 8, \"categories\": \"[{\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Kivy\\\"}, {\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Python\\\"}]\", \"main_image\": 13, \"locked\": false, \"author\": \"Abirafdi Raditya Putra\", \"depth\": 4, \"first_published_at\": \"2015-08-13T00:04:23.945Z\", \"expire_at\": null}", "user": 1, "page": 8}, "model": "wagtailcore.pagerevision", "pk": 30}, {"fields": {"approved_go_live_at": null, "created_at": "2015-08-14T00:58:14.849Z", "submitted_for_moderation": false, "content_json": "{\"search_description\": \"\", \"owner\": 1, \"intro\": \"<p>Kivy adalah GUI/NUI framework yang menggunakan bahasa pemrograman Python, dapat dijalankan pada Windows, Linux, OS X, Android dan iOS dengan menggunakan code yang sama dan\\u00a0menggunakan MIT license sehingga 100% free to use dan boleh dikomersialisasikan.</p>\", \"latest_revision_created_at\": \"2015-08-14T00:57:50.520Z\", \"main_background_image\": null, \"go_live_at\": null, \"title\": \"Kivy Tutorial 1 - Apa itu Kivy?\", \"seo_title\": \"\", \"slug\": \"kivy-tutorial-1---apa-itu-kivy\", \"content\": \"[{\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Kivy adalah GUI/NUI framework yang menggunakan bahasa pemrograman Python, dapat dijalankan pada Windows, Linux, OS X, Android dan iOS dengan menggunakan code yang sama dan\\\\u00a0menggunakan MIT license sehingga 100% free to use dan boleh dikomersialisasikan. Kivy didesain untuk membantu pembuatan dan pengembangan aplikasi cross-platform secara cepat.</p><p>Berikut adalah beberapa kelebihan Kivy</p><ol><li>Cross-platform, code once run anywhere.</li><li>Support berbagai ragam input device dan juga multitouch support.</li><li>Menggunakan OpenGL ES sebagai graphics engine-nya.</li><li>Menggunakan bahasa Python, cocok bagi pemula seperti saya.</li><li>3rd party Python library goodness!</li></ol>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"Mandantory Hello World example! Sangat mudah bukan?\\\"}, {\\\"type\\\": \\\"full_image\\\", \\\"value\\\": 15}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Berikut ini adalah aplikasi menggunakan Kivy yang sudah ada di Play Store dan App Store.\\\\u00a0Disclosure, tidak ada hubungan antara saya dengan pembuat aplikasi dibawah ini melainkan hanya sebatas sharing saja.</p>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"ProcessCraft\\\"}, {\\\"type\\\": \\\"full_image\\\", \\\"value\\\": 16}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"FlatJewels\\\"}, {\\\"type\\\": \\\"full_image\\\", \\\"value\\\": 17}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Dibalik banyak kelebihan, Kivy juga mempunyai beberapa kelemahan.<br/></p><ol><li>Tidak memiliki 100% API support pada iOS (plyer).</li><li>Memiliki startup time yang agak sedikit lebih lama daripada aplikasi native dikarenakan menggunakan wrapper dan Python.</li><li>Tentunya memiliki performa dibawah aplikasi native, namun tidak akan terasa jika hanya sebatas game ringan atau everyday apps</li></ol><p>Menurut saya, Kivy cocok untuk project kecil-kecilan dan pribadi, namun bisa dikembangkan ke arah komersil. Di blog ini saya akan share pengalaman belajar saya menggunakan Kivy dan mudah-mudahan kita bisa saling bertukar ilmu. Di tutorial selanjutnya saya akan menjelaskan meng-configure environment untuk men-develop Kivy beserta GUI editornya. \\\\u00a0See ya!</p><p><br/>Images pulled from :\\\\u00a0<a href=\\\\\\\"https://play.google.com/store/apps/details?id=com.meltingrocks.flatjewels\\\\\\\">FlatJewels</a>\\\\u00a0<a href=\\\\\\\"https://itunes.apple.com/us/app/processcraft/id526377075\\\\\\\">ProcessCraft</a>\\\\u00a0<a href=\\\\\\\"http://kivy.org/#home\\\\\\\">Kivy</a></p>\\\"}]\", \"live\": true, \"thumbnail_image\": 14, \"has_unpublished_changes\": false, \"related_post\": \"[{\\\"type\\\": \\\"post\\\", \\\"value\\\": 10}]\", \"angular_url\": \"kivy-tutorial-1---apa-itu-kivy\", \"title_extended\": \"\", \"numchild\": 0, \"content_type\": 34, \"show_in_menus\": false, \"date\": \"2015-03-29\", \"path\": \"0001000100010003\", \"url_path\": \"/home/blog/kivy-tutorial-1---apa-itu-kivy/\", \"expired\": false, \"pk\": 8, \"categories\": \"[{\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Kivy\\\"}, {\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Python\\\"}]\", \"main_image\": 13, \"locked\": false, \"author\": \"Abirafdi Raditya Putra\", \"depth\": 4, \"first_published_at\": \"2015-08-13T00:04:23.945Z\", \"expire_at\": null}", "user": 1, "page": 8}, "model": "wagtailcore.pagerevision", "pk": 31}, {"fields": {"approved_go_live_at": null, "created_at": "2015-08-14T00:59:30.317Z", "submitted_for_moderation": false, "content_json": "{\"search_description\": \"\", \"owner\": 1, \"intro\": \"<p>Preferensi saya untuk Kivy development</p>\", \"latest_revision_created_at\": \"2015-08-14T00:57:28.422Z\", \"main_background_image\": null, \"go_live_at\": null, \"title\": \"Kivy Tutorial 2 - Setting up the environment\", \"seo_title\": \"\", \"slug\": \"kivy-tutorial-2---setting-up-the-environment\", \"content\": \"[{\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Nah sekarang kita setup environment kita untuk develop kivy. Sebenernya sih udah banyak guide nya di internet, tapi disini saya akan share preferensi saya. Untuk IDE saya menggunakan PyCharm versi free/community edition. Sayangnya packaging untuk semua platform hanya disupport oleh python 2.7, python 3.3 support masih WIP, mau gamau sementara kita menggunakan python 2.7 dulu. Folder kivy yang kita download nanti merupakan standalone python dan tidak ada hubungannya dengan python di sistem operasi kita, library/module nya terpisah, bisa dianalogikan seperti\\\\u00a0<a href=\\\\\\\"http://www.pythonified.com/blog/python-modules-yang-wajib-dimiliki-virtualenv-dan-pip/\\\\\\\">virtualenv</a>. Oke, berikut ini step-step configure environment Kivy</p><ol><li><a href=\\\\\\\"http://kivy.org/#download\\\\\\\">Download</a>\\\\u00a0Kivy versi terbaru yang menggunakan python 2.7.</li><li><a href=\\\\\\\"https://www.jetbrains.com/pycharm/download/\\\\\\\">Download</a>\\\\u00a0PyCharm community edition.</li><li>Untuk integrasi Kivy dengan PyCharm bisa dilihat\\\\u00a0<a href=\\\\\\\"https://github.com/kivy/kivy/wiki/Setting-Up-Kivy-with-various-popular-IDE%27s\\\\\\\">disini</a>. Jangan lupa ikuti petunjuk untuk integrasi KV-lang juga yang terletak di bagian bawah artikel.</li></ol><p>Yup, cuma 3 langkah, anda tidak perlu repot-repot bolak-balik buka terminal untuk run aplikasi kita, berbagai fitur dari PyCharm, dan KV-lang juga sudah fully-supported dengan auto-completion dan highlightning. Jangan lupa karena Kivy ini merupakan isolated environment, jika anda ingin meng-install suatu module/library dari pip gunakan file kivy.bat untuk membuka terminal.</p>\\\"}]\", \"live\": true, \"thumbnail_image\": 20, \"has_unpublished_changes\": false, \"related_post\": \"[{\\\"type\\\": \\\"post\\\", \\\"value\\\": 8}]\", \"angular_url\": \"kivy-tutorial-2---setting-up-the-environment\", \"title_extended\": \"\", \"numchild\": 0, \"content_type\": 34, \"show_in_menus\": false, \"date\": \"2015-04-05\", \"path\": \"0001000100010005\", \"url_path\": \"/home/blog/kivy-tutorial-2---setting-up-the-environment/\", \"expired\": false, \"pk\": 10, \"categories\": \"[{\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Kivy\\\"}, {\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Python\\\"}]\", \"main_image\": 20, \"locked\": false, \"author\": \"Abirafdi Raditya Putra\", \"depth\": 4, \"first_published_at\": \"2015-08-14T00:39:38.276Z\", \"expire_at\": null}", "user": 1, "page": 10}, "model": "wagtailcore.pagerevision", "pk": 32}, {"fields": {"approved_go_live_at": null, "created_at": "2015-08-14T01:10:09.873Z", "submitted_for_moderation": false, "content_json": "{\"search_description\": \"\", \"owner\": 1, \"intro\": \"\", \"latest_revision_created_at\": null, \"main_background_image\": null, \"go_live_at\": null, \"title\": \"Kivy tutorial 3 - Kivy Basics\", \"seo_title\": \"\", \"slug\": \"kivy-tutorial-3-kivy-basics\", \"content\": \"[{\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Kivy basics lumayan banyak tetapi mudah dimengerti kok, daripada saya pegel-pegel translate dokumentasi dan tutorial yang sudah ada, saya referensikan saja tutorial favorit saya,\\\\u00a0penjelasannya mudah ditangkap dan meng-cover banyak topik. Di akhir nanti pasti anda sudah bisa membuat aplikasi sederhana menggunakan Kivy. Di tutorial selanjutnya saya akan membahas database-support yang bersifat cross-platform dengan menggunakan sqlite.\\\\u00a0</p>\\\"}]\", \"live\": true, \"thumbnail_image\": null, \"has_unpublished_changes\": false, \"related_post\": \"[]\", \"angular_url\": \"kivy-tutorial-3---kivy-basics\", \"title_extended\": \"\", \"numchild\": 0, \"content_type\": 34, \"show_in_menus\": false, \"date\": \"2015-04-05\", \"path\": \"0001000100010006\", \"url_path\": \"/home/blog/kivy-tutorial-3-kivy-basics/\", \"expired\": false, \"pk\": 11, \"categories\": \"[{\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Kivy\\\"}, {\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Python\\\"}]\", \"main_image\": null, \"locked\": false, \"author\": \"Abirafdi Raditya Putra\", \"depth\": 4, \"first_published_at\": null, \"expire_at\": null}", "user": 1, "page": 11}, "model": "wagtailcore.pagerevision", "pk": 33}, {"fields": {"approved_go_live_at": null, "created_at": "2015-08-14T01:10:29.904Z", "submitted_for_moderation": false, "content_json": "{\"search_description\": \"\", \"owner\": 1, \"intro\": \"\", \"latest_revision_created_at\": \"2015-08-14T01:10:09.873Z\", \"main_background_image\": null, \"go_live_at\": null, \"title\": \"Kivy tutorial 3 - Kivy Basics\", \"seo_title\": \"\", \"slug\": \"kivy-tutorial-3---kivy-basics\", \"content\": \"[{\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Kivy basics lumayan banyak tetapi mudah dimengerti kok, daripada saya pegel-pegel translate dokumentasi dan tutorial yang sudah ada, saya referensikan saja tutorial favorit saya,\\\\u00a0penjelasannya mudah ditangkap dan meng-cover banyak topik. Di akhir nanti pasti anda sudah bisa membuat aplikasi sederhana menggunakan Kivy. Di tutorial selanjutnya saya akan membahas database-support yang bersifat cross-platform dengan menggunakan sqlite.\\\\u00a0</p>\\\"}]\", \"live\": true, \"thumbnail_image\": null, \"has_unpublished_changes\": false, \"related_post\": \"[]\", \"angular_url\": \"kivy-tutorial-3---kivy-basics\", \"title_extended\": \"\", \"numchild\": 0, \"content_type\": 34, \"show_in_menus\": false, \"date\": \"2015-04-05\", \"path\": \"0001000100010006\", \"url_path\": \"/home/blog/kivy-tutorial-3-kivy-basics/\", \"expired\": false, \"pk\": 11, \"categories\": \"[{\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Kivy\\\"}, {\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Python\\\"}]\", \"main_image\": null, \"locked\": false, \"author\": \"Abirafdi Raditya Putra\", \"depth\": 4, \"first_published_at\": \"2015-08-14T01:10:09.881Z\", \"expire_at\": null}", "user": 1, "page": 11}, "model": "wagtailcore.pagerevision", "pk": 34}, {"fields": {"approved_go_live_at": null, "created_at": "2015-08-14T01:19:36.472Z", "submitted_for_moderation": false, "content_json": "{\"search_description\": \"\", \"owner\": 1, \"intro\": \"\", \"latest_revision_created_at\": \"2015-08-14T01:10:29.904Z\", \"main_background_image\": null, \"go_live_at\": null, \"title\": \"Kivy tutorial 3 - Kivy Basics\", \"seo_title\": \"\", \"slug\": \"kivy-tutorial-3---kivy-basics\", \"content\": \"[{\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Kivy basics lumayan banyak tetapi mudah dimengerti kok, daripada saya pegel-pegel translate dokumentasi dan tutorial yang sudah ada, saya referensikan saja tutorial favorit saya,\\\\u00a0penjelasannya mudah ditangkap dan meng-cover banyak topik. Di akhir nanti pasti anda sudah bisa membuat aplikasi sederhana menggunakan Kivy. Di tutorial selanjutnya saya akan membahas database-support yang bersifat cross-platform dengan menggunakan sqlite.\\\\u00a0</p>\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p><br/></p>\\\"}]\", \"live\": true, \"thumbnail_image\": null, \"has_unpublished_changes\": false, \"related_post\": \"[]\", \"angular_url\": \"kivy-tutorial-3---kivy-basics\", \"title_extended\": \"\", \"numchild\": 0, \"content_type\": 34, \"show_in_menus\": false, \"date\": \"2015-04-05\", \"path\": \"0001000100010006\", \"url_path\": \"/home/blog/kivy-tutorial-3---kivy-basics/\", \"expired\": false, \"pk\": 11, \"categories\": \"[{\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Kivy\\\"}, {\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Python\\\"}]\", \"main_image\": null, \"locked\": false, \"author\": \"Abirafdi Raditya Putra\", \"depth\": 4, \"first_published_at\": \"2015-08-14T01:10:09.881Z\", \"expire_at\": null}", "user": 1, "page": 11}, "model": "wagtailcore.pagerevision", "pk": 35}, {"fields": {"approved_go_live_at": null, "created_at": "2015-08-14T01:23:29.053Z", "submitted_for_moderation": false, "content_json": "{\"search_description\": \"\", \"owner\": 1, \"intro\": \"\", \"latest_revision_created_at\": \"2015-08-14T01:19:36.472Z\", \"main_background_image\": null, \"go_live_at\": null, \"title\": \"Kivy tutorial 3 - Kivy Basics\", \"seo_title\": \"\", \"slug\": \"kivy-tutorial-3---kivy-basics\", \"content\": \"[{\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Kivy basics lumayan banyak tetapi mudah dimengerti kok, daripada saya pegel-pegel translate dokumentasi dan tutorial yang sudah ada, saya referensikan saja tutorial favorit saya,\\\\u00a0penjelasannya mudah ditangkap dan meng-cover banyak topik. Di akhir nanti pasti anda sudah bisa membuat aplikasi sederhana menggunakan Kivy. Di tutorial selanjutnya saya akan membahas database-support yang bersifat cross-platform dengan menggunakan sqlite.\\\\u00a0</p>\\\"}, {\\\"type\\\": \\\"raw_html\\\", \\\"value\\\": \\\"<iframe width=\\\\\\\"560\\\\\\\" height=\\\\\\\"315\\\\\\\" src=\\\\\\\"https://www.youtube.com/embed/F7UKmK9eQLY?list=PLdNh1e1kmiPP4YApJm8ENK2yMlwF1_edq\\\\\\\" frameborder=\\\\\\\"0\\\\\\\" allowfullscreen></iframe>\\\"}]\", \"live\": true, \"thumbnail_image\": null, \"has_unpublished_changes\": false, \"related_post\": \"[]\", \"angular_url\": \"kivy-tutorial-3---kivy-basics\", \"title_extended\": \"\", \"numchild\": 0, \"content_type\": 34, \"show_in_menus\": false, \"date\": \"2015-04-05\", \"path\": \"0001000100010006\", \"url_path\": \"/home/blog/kivy-tutorial-3---kivy-basics/\", \"expired\": false, \"pk\": 11, \"categories\": \"[{\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Kivy\\\"}, {\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Python\\\"}]\", \"main_image\": null, \"locked\": false, \"author\": \"Abirafdi Raditya Putra\", \"depth\": 4, \"first_published_at\": \"2015-08-14T01:10:09.881Z\", \"expire_at\": null}", "user": 1, "page": 11}, "model": "wagtailcore.pagerevision", "pk": 36}, {"fields": {"approved_go_live_at": null, "created_at": "2015-08-14T01:24:30.142Z", "submitted_for_moderation": false, "content_json": "{\"search_description\": \"\", \"owner\": 1, \"intro\": \"\", \"latest_revision_created_at\": \"2015-08-14T01:23:29.053Z\", \"main_background_image\": null, \"go_live_at\": null, \"title\": \"Kivy tutorial 3 - Kivy Basics\", \"seo_title\": \"\", \"slug\": \"kivy-tutorial-3---kivy-basics\", \"content\": \"[{\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Kivy basics lumayan banyak tetapi mudah dimengerti kok, daripada saya pegel-pegel translate dokumentasi dan tutorial yang sudah ada, saya referensikan saja tutorial favorit saya,\\\\u00a0penjelasannya mudah ditangkap dan meng-cover banyak topik. Di akhir nanti pasti anda sudah bisa membuat aplikasi sederhana menggunakan Kivy. Di tutorial selanjutnya saya akan membahas database-support yang bersifat cross-platform dengan menggunakan sqlite.\\\\u00a0</p>\\\"}, {\\\"type\\\": \\\"raw_html\\\", \\\"value\\\": \\\"<iframe width=\\\\\\\"560\\\\\\\" height=\\\\\\\"315\\\\\\\" src=\\\\\\\"https://www.youtube.com/embed/F7UKmK9eQLY?list=PLdNh1e1kmiPP4YApJm8ENK2yMlwF1_edq\\\\\\\" frameborder=\\\\\\\"0\\\\\\\" allowfullscreen style=\\\\\\\"center\\\\\\\"></iframe>\\\"}]\", \"live\": true, \"thumbnail_image\": null, \"has_unpublished_changes\": false, \"related_post\": \"[]\", \"angular_url\": \"kivy-tutorial-3---kivy-basics\", \"title_extended\": \"\", \"numchild\": 0, \"content_type\": 34, \"show_in_menus\": false, \"date\": \"2015-04-05\", \"path\": \"0001000100010006\", \"url_path\": \"/home/blog/kivy-tutorial-3---kivy-basics/\", \"expired\": false, \"pk\": 11, \"categories\": \"[{\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Kivy\\\"}, {\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Python\\\"}]\", \"main_image\": null, \"locked\": false, \"author\": \"Abirafdi Raditya Putra\", \"depth\": 4, \"first_published_at\": \"2015-08-14T01:10:09.881Z\", \"expire_at\": null}", "user": 1, "page": 11}, "model": "wagtailcore.pagerevision", "pk": 37}, {"fields": {"approved_go_live_at": null, "created_at": "2015-08-14T01:25:43.930Z", "submitted_for_moderation": false, "content_json": "{\"search_description\": \"\", \"owner\": 1, \"intro\": \"\", \"latest_revision_created_at\": \"2015-08-14T01:24:30.142Z\", \"main_background_image\": null, \"go_live_at\": null, \"title\": \"Kivy tutorial 3 - Kivy Basics\", \"seo_title\": \"\", \"slug\": \"kivy-tutorial-3---kivy-basics\", \"content\": \"[{\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Kivy basics lumayan banyak tetapi mudah dimengerti kok, daripada saya pegel-pegel translate dokumentasi dan tutorial yang sudah ada, saya referensikan saja tutorial favorit saya,\\\\u00a0penjelasannya mudah ditangkap dan meng-cover banyak topik. Di akhir nanti pasti anda sudah bisa membuat aplikasi sederhana menggunakan Kivy. Di tutorial selanjutnya saya akan membahas database-support yang bersifat cross-platform dengan menggunakan sqlite.\\\\u00a0</p>\\\"}, {\\\"type\\\": \\\"raw_html\\\", \\\"value\\\": \\\"<iframe width=\\\\\\\"560\\\\\\\" height=\\\\\\\"315\\\\\\\" src=\\\\\\\"https://www.youtube.com/embed/F7UKmK9eQLY?list=PLdNh1e1kmiPP4YApJm8ENK2yMlwF1_edq\\\\\\\" frameborder=\\\\\\\"0\\\\\\\" allowfullscreen style=\\\\\\\"display: block;\\\\\\\"></iframe>\\\"}]\", \"live\": true, \"thumbnail_image\": null, \"has_unpublished_changes\": false, \"related_post\": \"[]\", \"angular_url\": \"kivy-tutorial-3---kivy-basics\", \"title_extended\": \"\", \"numchild\": 0, \"content_type\": 34, \"show_in_menus\": false, \"date\": \"2015-04-05\", \"path\": \"0001000100010006\", \"url_path\": \"/home/blog/kivy-tutorial-3---kivy-basics/\", \"expired\": false, \"pk\": 11, \"categories\": \"[{\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Kivy\\\"}, {\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Python\\\"}]\", \"main_image\": null, \"locked\": false, \"author\": \"Abirafdi Raditya Putra\", \"depth\": 4, \"first_published_at\": \"2015-08-14T01:10:09.881Z\", \"expire_at\": null}", "user": 1, "page": 11}, "model": "wagtailcore.pagerevision", "pk": 38}, {"fields": {"approved_go_live_at": null, "created_at": "2015-08-14T01:27:51.323Z", "submitted_for_moderation": false, "content_json": "{\"search_description\": \"\", \"owner\": 1, \"intro\": \"\", \"latest_revision_created_at\": \"2015-08-14T01:25:43.930Z\", \"main_background_image\": null, \"go_live_at\": null, \"title\": \"Kivy tutorial 3 - Kivy Basics\", \"seo_title\": \"\", \"slug\": \"kivy-tutorial-3---kivy-basics\", \"content\": \"[{\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Kivy basics lumayan banyak tetapi mudah dimengerti kok, daripada saya pegel-pegel translate dokumentasi dan tutorial yang sudah ada, saya referensikan saja tutorial favorit saya,\\\\u00a0penjelasannya mudah ditangkap dan meng-cover banyak topik. Di akhir nanti pasti anda sudah bisa membuat aplikasi sederhana menggunakan Kivy. Di tutorial selanjutnya saya akan membahas database-support yang bersifat cross-platform dengan menggunakan sqlite.\\\\u00a0</p>\\\"}, {\\\"type\\\": \\\"raw_html\\\", \\\"value\\\": \\\"<iframe width=\\\\\\\"560\\\\\\\" height=\\\\\\\"315\\\\\\\" src=\\\\\\\"https://www.youtube.com/embed/F7UKmK9eQLY?list=PLdNh1e1kmiPP4YApJm8ENK2yMlwF1_edq\\\\\\\" frameborder=\\\\\\\"0\\\\\\\" allowfullscreen style=\\\\\\\"display: block; margin-left: auto; margin-right: auto;\\\\\\\"></iframe>\\\"}]\", \"live\": true, \"thumbnail_image\": null, \"has_unpublished_changes\": false, \"related_post\": \"[]\", \"angular_url\": \"kivy-tutorial-3---kivy-basics\", \"title_extended\": \"\", \"numchild\": 0, \"content_type\": 34, \"show_in_menus\": false, \"date\": \"2015-04-05\", \"path\": \"0001000100010006\", \"url_path\": \"/home/blog/kivy-tutorial-3---kivy-basics/\", \"expired\": false, \"pk\": 11, \"categories\": \"[{\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Kivy\\\"}, {\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Python\\\"}]\", \"main_image\": null, \"locked\": false, \"author\": \"Abirafdi Raditya Putra\", \"depth\": 4, \"first_published_at\": \"2015-08-14T01:10:09.881Z\", \"expire_at\": null}", "user": 1, "page": 11}, "model": "wagtailcore.pagerevision", "pk": 39}, {"fields": {"approved_go_live_at": null, "created_at": "2015-08-14T01:32:45.593Z", "submitted_for_moderation": false, "content_json": "{\"search_description\": \"\", \"owner\": 1, \"intro\": \"\", \"latest_revision_created_at\": \"2015-08-14T01:27:51.323Z\", \"main_background_image\": null, \"go_live_at\": null, \"title\": \"Kivy tutorial 3 - Kivy Basics\", \"seo_title\": \"\", \"slug\": \"kivy-tutorial-3---kivy-basics\", \"content\": \"[{\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Maaf jika post ini tidak original, disini saya akan coba share sumber belajar Kivy saya. Video ini dibuat oleh salah satu kontributor Kivy, penjelasannya singkat, padat, jelas dan memuat banyak materi dasar. Setelah menonton video ini saya bisa membuat aplikasi sederhana.</p>\\\"}, {\\\"type\\\": \\\"raw_html\\\", \\\"value\\\": \\\"<iframe width=\\\\\\\"560\\\\\\\" height=\\\\\\\"315\\\\\\\" src=\\\\\\\"https://www.youtube.com/embed/F7UKmK9eQLY?list=PLdNh1e1kmiPP4YApJm8ENK2yMlwF1_edq\\\\\\\" frameborder=\\\\\\\"0\\\\\\\" allowfullscreen style=\\\\\\\"display: block; margin-left: auto; margin-right: auto;\\\\\\\"></iframe>\\\"}]\", \"live\": true, \"thumbnail_image\": null, \"has_unpublished_changes\": false, \"related_post\": \"[]\", \"angular_url\": \"kivy-tutorial-3---kivy-basics\", \"title_extended\": \"\", \"numchild\": 0, \"content_type\": 34, \"show_in_menus\": false, \"date\": \"2015-04-05\", \"path\": \"0001000100010006\", \"url_path\": \"/home/blog/kivy-tutorial-3---kivy-basics/\", \"expired\": false, \"pk\": 11, \"categories\": \"[{\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Kivy\\\"}, {\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Python\\\"}]\", \"main_image\": null, \"locked\": false, \"author\": \"Abirafdi Raditya Putra\", \"depth\": 4, \"first_published_at\": \"2015-08-14T01:10:09.881Z\", \"expire_at\": null}", "user": 1, "page": 11}, "model": "wagtailcore.pagerevision", "pk": 40}, {"fields": {"approved_go_live_at": null, "created_at": "2015-08-14T01:33:55.938Z", "submitted_for_moderation": false, "content_json": "{\"search_description\": \"\", \"owner\": 1, \"intro\": \"\", \"latest_revision_created_at\": \"2015-08-14T01:32:45.593Z\", \"main_background_image\": null, \"go_live_at\": null, \"title\": \"Kivy tutorial 3 - Kivy Basics\", \"seo_title\": \"\", \"slug\": \"kivy-tutorial-3---kivy-basics\", \"content\": \"[{\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Maaf jika post ini tidak original, disini saya akan coba share sumber belajar Kivy saya. Video ini dibuat oleh salah satu kontributor Kivy, penjelasannya singkat, padat, jelas dan memuat banyak materi dasar. Setelah menonton video ini saya bisa membuat aplikasi-aplikasi sederhana.</p>\\\"}, {\\\"type\\\": \\\"raw_html\\\", \\\"value\\\": \\\"<iframe width=\\\\\\\"560\\\\\\\" height=\\\\\\\"315\\\\\\\" src=\\\\\\\"https://www.youtube.com/embed/F7UKmK9eQLY?list=PLdNh1e1kmiPP4YApJm8ENK2yMlwF1_edq\\\\\\\" frameborder=\\\\\\\"0\\\\\\\" allowfullscreen style=\\\\\\\"display: block; margin-left: auto; margin-right: auto;\\\\\\\"></iframe>\\\"}]\", \"live\": true, \"thumbnail_image\": null, \"has_unpublished_changes\": false, \"related_post\": \"[{\\\"type\\\": \\\"post\\\", \\\"value\\\": 8}, {\\\"type\\\": \\\"post\\\", \\\"value\\\": 10}]\", \"angular_url\": \"kivy-tutorial-3---kivy-basics\", \"title_extended\": \"\", \"numchild\": 0, \"content_type\": 34, \"show_in_menus\": false, \"date\": \"2015-04-05\", \"path\": \"0001000100010006\", \"url_path\": \"/home/blog/kivy-tutorial-3---kivy-basics/\", \"expired\": false, \"pk\": 11, \"categories\": \"[{\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Kivy\\\"}, {\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Python\\\"}]\", \"main_image\": null, \"locked\": false, \"author\": \"Abirafdi Raditya Putra\", \"depth\": 4, \"first_published_at\": \"2015-08-14T01:10:09.881Z\", \"expire_at\": null}", "user": 1, "page": 11}, "model": "wagtailcore.pagerevision", "pk": 41}, {"fields": {"approved_go_live_at": null, "created_at": "2015-08-14T01:35:13.219Z", "submitted_for_moderation": false, "content_json": "{\"search_description\": \"\", \"owner\": 1, \"intro\": \"<p>Kivy adalah GUI/NUI framework yang menggunakan bahasa pemrograman Python, dapat dijalankan pada Windows, Linux, OS X, Android dan iOS dengan menggunakan code yang sama dan\\u00a0menggunakan MIT license sehingga 100% free to use dan boleh dikomersialisasikan.</p>\", \"latest_revision_created_at\": \"2015-08-14T00:58:14.849Z\", \"main_background_image\": null, \"go_live_at\": null, \"title\": \"Kivy Tutorial 1 - Apa itu Kivy?\", \"seo_title\": \"\", \"slug\": \"kivy-tutorial-1---apa-itu-kivy\", \"content\": \"[{\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Kivy adalah GUI/NUI framework yang menggunakan bahasa pemrograman Python, dapat dijalankan pada Windows, Linux, OS X, Android dan iOS dengan menggunakan code yang sama dan\\\\u00a0menggunakan MIT license sehingga 100% free to use dan boleh dikomersialisasikan. Kivy didesain untuk membantu pembuatan dan pengembangan aplikasi cross-platform secara cepat.</p><p>Berikut adalah beberapa kelebihan Kivy</p><ol><li>Cross-platform, code once run anywhere.</li><li>Support berbagai ragam input device dan juga multitouch support.</li><li>Menggunakan OpenGL ES sebagai graphics engine-nya.</li><li>Menggunakan bahasa Python, cocok bagi pemula seperti saya.</li><li>3rd party Python library goodness!</li></ol>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"Mandantory Hello World example! Sangat mudah bukan?\\\"}, {\\\"type\\\": \\\"full_image\\\", \\\"value\\\": 15}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Berikut ini adalah aplikasi menggunakan Kivy yang sudah ada di Play Store dan App Store.\\\\u00a0Disclosure, tidak ada hubungan antara saya dengan pembuat aplikasi dibawah ini melainkan hanya sebatas sharing saja.</p>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"ProcessCraft\\\"}, {\\\"type\\\": \\\"full_image\\\", \\\"value\\\": 16}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"FlatJewels\\\"}, {\\\"type\\\": \\\"full_image\\\", \\\"value\\\": 17}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Dibalik banyak kelebihan, Kivy juga mempunyai beberapa kelemahan.<br/></p><ol><li>Tidak memiliki 100% API support pada iOS (plyer).</li><li>Memiliki startup time yang agak sedikit lebih lama daripada aplikasi native dikarenakan menggunakan wrapper dan Python.</li><li>Tentunya memiliki performa dibawah aplikasi native, namun tidak akan terasa jika hanya sebatas game ringan atau everyday apps</li></ol><p>Menurut saya, Kivy cocok untuk project kecil-kecilan dan pribadi, namun bisa dikembangkan ke arah komersil. Di blog ini saya akan share pengalaman belajar saya menggunakan Kivy dan mudah-mudahan kita bisa saling bertukar ilmu. Di tutorial selanjutnya saya akan menjelaskan meng-configure environment untuk men-develop Kivy beserta GUI editornya. \\\\u00a0See ya!</p><p><br/>Images pulled from :\\\\u00a0<a href=\\\\\\\"https://play.google.com/store/apps/details?id=com.meltingrocks.flatjewels\\\\\\\">FlatJewels</a>\\\\u00a0<a href=\\\\\\\"https://itunes.apple.com/us/app/processcraft/id526377075\\\\\\\">ProcessCraft</a>\\\\u00a0<a href=\\\\\\\"http://kivy.org/#home\\\\\\\">Kivy</a></p>\\\"}]\", \"live\": true, \"thumbnail_image\": 14, \"has_unpublished_changes\": false, \"related_post\": \"[{\\\"type\\\": \\\"post\\\", \\\"value\\\": 10}, {\\\"type\\\": \\\"post\\\", \\\"value\\\": 11}]\", \"angular_url\": \"kivy-tutorial-1---apa-itu-kivy\", \"title_extended\": \"\", \"numchild\": 0, \"content_type\": 34, \"show_in_menus\": false, \"date\": \"2015-03-29\", \"path\": \"0001000100010003\", \"url_path\": \"/home/blog/kivy-tutorial-1---apa-itu-kivy/\", \"expired\": false, \"pk\": 8, \"categories\": \"[{\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Kivy\\\"}, {\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Python\\\"}]\", \"main_image\": 13, \"locked\": false, \"author\": \"Abirafdi Raditya Putra\", \"depth\": 4, \"first_published_at\": \"2015-08-13T00:04:23.945Z\", \"expire_at\": null}", "user": 1, "page": 8}, "model": "wagtailcore.pagerevision", "pk": 42}, {"fields": {"approved_go_live_at": null, "created_at": "2015-08-14T01:35:34.882Z", "submitted_for_moderation": false, "content_json": "{\"search_description\": \"\", \"owner\": 1, \"intro\": \"<p>Preferensi saya untuk Kivy development</p>\", \"latest_revision_created_at\": \"2015-08-14T00:59:30.317Z\", \"main_background_image\": null, \"go_live_at\": null, \"title\": \"Kivy Tutorial 2 - Setting up the environment\", \"seo_title\": \"\", \"slug\": \"kivy-tutorial-2---setting-up-the-environment\", \"content\": \"[{\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Nah sekarang kita setup environment kita untuk develop kivy. Sebenernya sih udah banyak guide nya di internet, tapi disini saya akan share preferensi saya. Untuk IDE saya menggunakan PyCharm versi free/community edition. Sayangnya packaging untuk semua platform hanya disupport oleh python 2.7, python 3.3 support masih WIP, mau gamau sementara kita menggunakan python 2.7 dulu. Folder kivy yang kita download nanti merupakan standalone python dan tidak ada hubungannya dengan python di sistem operasi kita, library/module nya terpisah, bisa dianalogikan seperti\\\\u00a0<a href=\\\\\\\"http://www.pythonified.com/blog/python-modules-yang-wajib-dimiliki-virtualenv-dan-pip/\\\\\\\">virtualenv</a>. Oke, berikut ini step-step configure environment Kivy</p><ol><li><a href=\\\\\\\"http://kivy.org/#download\\\\\\\">Download</a>\\\\u00a0Kivy versi terbaru yang menggunakan python 2.7.</li><li><a href=\\\\\\\"https://www.jetbrains.com/pycharm/download/\\\\\\\">Download</a>\\\\u00a0PyCharm community edition.</li><li>Untuk integrasi Kivy dengan PyCharm bisa dilihat\\\\u00a0<a href=\\\\\\\"https://github.com/kivy/kivy/wiki/Setting-Up-Kivy-with-various-popular-IDE%27s\\\\\\\">disini</a>. Jangan lupa ikuti petunjuk untuk integrasi KV-lang juga yang terletak di bagian bawah artikel.</li></ol><p>Yup, cuma 3 langkah, anda tidak perlu repot-repot bolak-balik buka terminal untuk run aplikasi kita, berbagai fitur dari PyCharm, dan KV-lang juga sudah fully-supported dengan auto-completion dan highlightning. Jangan lupa karena Kivy ini merupakan isolated environment, jika anda ingin meng-install suatu module/library dari pip gunakan file kivy.bat untuk membuka terminal.</p>\\\"}]\", \"live\": true, \"thumbnail_image\": 20, \"has_unpublished_changes\": false, \"related_post\": \"[{\\\"type\\\": \\\"post\\\", \\\"value\\\": 8}, {\\\"type\\\": \\\"post\\\", \\\"value\\\": 11}]\", \"angular_url\": \"kivy-tutorial-2---setting-up-the-environment\", \"title_extended\": \"\", \"numchild\": 0, \"content_type\": 34, \"show_in_menus\": false, \"date\": \"2015-04-05\", \"path\": \"0001000100010005\", \"url_path\": \"/home/blog/kivy-tutorial-2---setting-up-the-environment/\", \"expired\": false, \"pk\": 10, \"categories\": \"[{\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Kivy\\\"}, {\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Python\\\"}]\", \"main_image\": 20, \"locked\": false, \"author\": \"Abirafdi Raditya Putra\", \"depth\": 4, \"first_published_at\": \"2015-08-14T00:39:38.276Z\", \"expire_at\": null}", "user": 1, "page": 10}, "model": "wagtailcore.pagerevision", "pk": 43}, {"fields": {"approved_go_live_at": null, "created_at": "2015-08-14T01:36:28.342Z", "submitted_for_moderation": false, "content_json": "{\"search_description\": \"\", \"owner\": 1, \"intro\": \"<p>Preferensi sumber belajar Kivy</p>\", \"latest_revision_created_at\": \"2015-08-14T01:33:55.938Z\", \"main_background_image\": null, \"go_live_at\": null, \"title\": \"Kivy tutorial 3 - Kivy Basics\", \"seo_title\": \"\", \"slug\": \"kivy-tutorial-3---kivy-basics\", \"content\": \"[{\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Maaf jika post ini tidak original, disini saya akan coba share sumber belajar Kivy saya. Video ini dibuat oleh salah satu kontributor Kivy, penjelasannya singkat, padat, jelas dan memuat banyak materi dasar. Setelah menonton video ini saya bisa membuat aplikasi-aplikasi sederhana.</p>\\\"}, {\\\"type\\\": \\\"raw_html\\\", \\\"value\\\": \\\"<iframe width=\\\\\\\"560\\\\\\\" height=\\\\\\\"315\\\\\\\" src=\\\\\\\"https://www.youtube.com/embed/F7UKmK9eQLY?list=PLdNh1e1kmiPP4YApJm8ENK2yMlwF1_edq\\\\\\\" frameborder=\\\\\\\"0\\\\\\\" allowfullscreen style=\\\\\\\"display: block; margin-left: auto; margin-right: auto;\\\\\\\"></iframe>\\\"}]\", \"live\": true, \"thumbnail_image\": null, \"has_unpublished_changes\": false, \"related_post\": \"[{\\\"type\\\": \\\"post\\\", \\\"value\\\": 8}, {\\\"type\\\": \\\"post\\\", \\\"value\\\": 10}]\", \"angular_url\": \"kivy-tutorial-3---kivy-basics\", \"title_extended\": \"\", \"numchild\": 0, \"content_type\": 34, \"show_in_menus\": false, \"date\": \"2015-04-05\", \"path\": \"0001000100010006\", \"url_path\": \"/home/blog/kivy-tutorial-3---kivy-basics/\", \"expired\": false, \"pk\": 11, \"categories\": \"[{\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Kivy\\\"}, {\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Python\\\"}]\", \"main_image\": null, \"locked\": false, \"author\": \"Abirafdi Raditya Putra\", \"depth\": 4, \"first_published_at\": \"2015-08-14T01:10:09.881Z\", \"expire_at\": null}", "user": 1, "page": 11}, "model": "wagtailcore.pagerevision", "pk": 44}, {"fields": {"approved_go_live_at": null, "created_at": "2015-08-14T02:26:40.266Z", "submitted_for_moderation": false, "content_json": "{\"search_description\": \"\", \"owner\": 1, \"intro\": \"<p>Kemampuan database merupakan kemampuan fundamental bagi setiap programmer. Bagi kalian yang baru mulai belajar database pasti pernah mendengar Object Relational Mapping atau ORM. Pada post ini saya akan menjelaskan apa itu ORM berserta contohnya menggunakan SQLAlchemy</p>\", \"latest_revision_created_at\": null, \"main_background_image\": null, \"go_live_at\": null, \"title\": \"Perkenalan ORM dan SQLAlchemy\", \"seo_title\": \"\", \"slug\": \"perkenalan-orm-dan-sqlalchemy\", \"content\": \"[{\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Kemampuan database merupakan kemampuan fundamental bagi setiap programmer. Bagi kalian yang baru mulai belajar database pasti pernah mendengar Object Relational Mapping atau ORM. Sebelum ORM ada, segala aktifitas dan perintah di database harus menggunakan bahasa SQL. Di era modern sekarang, hampir sebagian besar bahasa pemrograman yang digunakan bersifat <i>object oriented</i>, seperti Java, Python dan C++, ORM dibuat agar objek dapat dipetakan atau direlasikan ke suatu record di database, ORM juga mengubah sintaks SQL menjadi bahasa yang bersifat <i>object-oriented.</i>\\\\u00a0 sehingga \\\\u00a0memudahkan programmer dan meningkatkan produktifitas dalam hal menggunakan database karena object sudah terhubung langsung dengan record-record pada database, code readability juga akan meningkat karena sintaks ORM lebih terlihat <i>object-oriented.</i>\\\\u00a0</p><p>Jadi bagaimana sih cara ORM mempermudah kerja programmer? ORM menterjemahkan perintah dari programmer ke dalam bahasa SQL, termasuk mengubah tipe data dari field suatu objek supaya cocok dengan tipe data pada databasenya. ORM ada banyak, masing-masing memiliki kelebihan dan kekurangan, dan semuanya hampir berbentuk suatu library atau module yang kita install sendiri sesuai dengan bahasa pemrograman kita, namun ada juga ORM yang sudah terintegrasi pada suatu framework, contohnya ORM Django. Faktor utama bagus atau tidaknya dari suatu ORM adalah dari segi performa, seperti seberapa cepat suatu ORM dapat melaksanakan query yang kompleks. Perbandingan berbagai ORM Python yang lumayan detail bisa dilihat\\\\u00a0<a href=\\\\\\\"http://www.pythoncentral.io/sqlalchemy-vs-orms/\\\\\\\">disini</a>.\\\\u00a0</p><p>Disini saya akan menggunakan SQLAlchemy sebagai ORM pilihan saya, karena SQLAlchemy adalah ORM yang paling banyak digunakan di Python sehingga lebih mudah googling jika ada kesulitan...</p><p></p><p>Berikut merupakan contoh ORM in action pada SQLAlchemy.</p><p>TABLE users</p>\\\\u00a0nama \\\\u00a0\\\\u00a0umur\\\\u00a0\\\\u00a0Andi\\\\u00a019\\\\u00a0Budi\\\\u00a018\\\\u00a0Agung\\\\u00a014\\\\u00a0Adit\\\\u00a015<br/><br/>\\\"}]\", \"live\": true, \"thumbnail_image\": null, \"has_unpublished_changes\": false, \"related_post\": \"[]\", \"angular_url\": \"perkenalan-orm-dan-sqlalchemy\", \"title_extended\": \"\", \"numchild\": 0, \"content_type\": 34, \"show_in_menus\": false, \"date\": \"2015-04-07\", \"path\": \"0001000100010007\", \"url_path\": \"/home/blog/perkenalan-orm-dan-sqlalchemy/\", \"expired\": false, \"pk\": 12, \"categories\": \"[{\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Python\\\"}, {\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Software\\\"}]\", \"main_image\": null, \"locked\": false, \"author\": \"Abirafdi Raditya Putra\", \"depth\": 4, \"first_published_at\": null, \"expire_at\": null}", "user": 1, "page": 12}, "model": "wagtailcore.pagerevision", "pk": 45}, {"fields": {"approved_go_live_at": null, "created_at": "2015-08-14T02:27:44.886Z", "submitted_for_moderation": false, "content_json": "{\"search_description\": \"\", \"owner\": 1, \"intro\": \"<p>Kemampuan database merupakan kemampuan fundamental bagi setiap programmer. Bagi orang yang baru mulai belajar database pasti pernah mendengar Object Relational Mapping atau ORM. Pada post ini saya akan menjelaskan apa itu ORM berserta contohnya menggunakan SQLAlchemy</p>\", \"latest_revision_created_at\": \"2015-08-14T02:26:40.266Z\", \"main_background_image\": null, \"go_live_at\": null, \"title\": \"Perkenalan ORM dan SQLAlchemy\", \"seo_title\": \"\", \"slug\": \"perkenalan-orm-dan-sqlalchemy\", \"content\": \"[{\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Kemampuan database merupakan kemampuan fundamental bagi setiap programmer. Bagi orang yang baru mulai belajar database pasti pernah mendengar Object Relational Mapping atau ORM. Sebelum ORM ada, segala aktifitas dan perintah di database harus menggunakan bahasa SQL. Di era modern sekarang, hampir sebagian besar bahasa pemrograman yang digunakan bersifat <i>object oriented</i>, seperti Java, Python dan C++, ORM dibuat agar objek dapat dipetakan atau direlasikan ke suatu record di database, ORM juga mengubah sintaks SQL menjadi bahasa yang bersifat <i>object-oriented.</i>\\\\u00a0 sehingga \\\\u00a0memudahkan programmer dan meningkatkan produktifitas dalam hal menggunakan database karena object sudah terhubung langsung dengan record-record pada database, code readability juga akan meningkat karena sintaks ORM lebih terlihat <i>object-oriented.</i>\\\\u00a0</p><p>Jadi bagaimana sih cara ORM mempermudah kerja programmer? ORM menterjemahkan perintah dari programmer ke dalam bahasa SQL, termasuk mengubah tipe data dari field suatu objek supaya cocok dengan tipe data pada databasenya. ORM ada banyak, masing-masing memiliki kelebihan dan kekurangan, dan semuanya hampir berbentuk suatu library atau module yang kita install sendiri sesuai dengan bahasa pemrograman kita, namun ada juga ORM yang sudah terintegrasi pada suatu framework, contohnya ORM Django. Faktor utama bagus atau tidaknya dari suatu ORM adalah dari segi performa, seperti seberapa cepat suatu ORM dapat melaksanakan query yang kompleks. Perbandingan berbagai ORM Python yang lumayan detail bisa dilihat\\\\u00a0<a href=\\\\\\\"http://www.pythoncentral.io/sqlalchemy-vs-orms/\\\\\\\">disini</a>.\\\\u00a0</p><p>Disini saya akan menggunakan SQLAlchemy sebagai ORM pilihan saya, karena SQLAlchemy adalah ORM yang paling banyak digunakan di Python sehingga lebih mudah googling jika ada kesulitan...</p><p></p><p>Berikut merupakan contoh ORM in action pada SQLAlchemy.</p><p>TABLE users</p>\\\\u00a0nama \\\\u00a0\\\\u00a0umur\\\\u00a0\\\\u00a0Andi\\\\u00a019\\\\u00a0Budi\\\\u00a018\\\\u00a0Agung\\\\u00a014\\\\u00a0Adit\\\\u00a015<br/><br/>\\\"}]\", \"live\": true, \"thumbnail_image\": null, \"has_unpublished_changes\": false, \"related_post\": \"[]\", \"angular_url\": \"perkenalan-orm-dan-sqlalchemy\", \"title_extended\": \"\", \"numchild\": 0, \"content_type\": 34, \"show_in_menus\": false, \"date\": \"2015-04-07\", \"path\": \"0001000100010007\", \"url_path\": \"/home/blog/perkenalan-orm-dan-sqlalchemy/\", \"expired\": false, \"pk\": 12, \"categories\": \"[{\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Python\\\"}, {\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Software\\\"}]\", \"main_image\": null, \"locked\": false, \"author\": \"Abirafdi Raditya Putra\", \"depth\": 4, \"first_published_at\": \"2015-08-14T02:26:40.339Z\", \"expire_at\": null}", "user": 1, "page": 12}, "model": "wagtailcore.pagerevision", "pk": 46}, {"fields": {"approved_go_live_at": null, "created_at": "2015-08-14T02:28:50.297Z", "submitted_for_moderation": false, "content_json": "{\"search_description\": \"\", \"owner\": 1, \"intro\": \"<p>Kemampuan database merupakan kemampuan fundamental bagi setiap programmer. Bagi orang yang baru mulai belajar database pasti pernah mendengar Object Relational Mapping atau ORM. Pada post ini saya akan menjelaskan apa itu ORM berserta contohnya menggunakan SQLAlchemy</p>\", \"latest_revision_created_at\": \"2015-08-14T02:27:44.886Z\", \"main_background_image\": null, \"go_live_at\": null, \"title\": \"Perkenalan ORM dan SQLAlchemy\", \"seo_title\": \"\", \"slug\": \"perkenalan-orm-dan-sqlalchemy\", \"content\": \"[{\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Kemampuan database merupakan kemampuan fundamental bagi setiap programmer. Bagi orang yang baru mulai belajar database pasti pernah mendengar Object Relational Mapping atau ORM. Sebelum ORM ada, segala aktifitas dan perintah di database harus menggunakan bahasa SQL. Di era modern sekarang, hampir sebagian besar bahasa pemrograman yang digunakan bersifat <i>object oriented</i>, seperti Java, Python dan C++, ORM dibuat agar objek dapat dipetakan atau direlasikan ke suatu record di database, ORM juga mengubah sintaks SQL menjadi sintaks yang bersifat <i>object-oriented.</i>\\\\u00a0 sehingga \\\\u00a0memudahkan programmer dan meningkatkan produktifitas dalam hal menggunakan database karena object sudah terhubung langsung dengan record-record pada database, code readability juga akan meningkat karena sintaks ORM lebih terlihat <i>object-oriented.</i>\\\\u00a0</p><p>Jadi bagaimana sih cara ORM mempermudah kerja programmer? ORM menterjemahkan perintah dari programmer ke dalam bahasa SQL, termasuk mengubah tipe data dari field suatu objek supaya cocok dengan tipe data pada databasenya. ORM ada banyak, masing-masing memiliki kelebihan dan kekurangan, dan semuanya hampir berbentuk suatu library atau module yang kita install sendiri sesuai dengan bahasa pemrograman kita, namun ada juga ORM yang sudah terintegrasi pada suatu framework, contohnya ORM Django. Faktor utama bagus atau tidaknya dari suatu ORM adalah dari segi performa, seperti seberapa cepat suatu ORM dapat melaksanakan query yang kompleks. Perbandingan berbagai ORM Python yang lumayan detail bisa dilihat\\\\u00a0<a href=\\\\\\\"http://www.pythoncentral.io/sqlalchemy-vs-orms/\\\\\\\">disini</a>.\\\\u00a0</p><p>Disini saya akan menggunakan SQLAlchemy sebagai ORM pilihan saya, karena SQLAlchemy adalah ORM yang paling banyak digunakan di Python sehingga lebih mudah googling jika ada kesulitan...</p><p></p><p>Berikut merupakan contoh ORM in action pada SQLAlchemy.</p><p>TABLE users</p>\\\\u00a0nama \\\\u00a0\\\\u00a0umur\\\\u00a0\\\\u00a0Andi\\\\u00a019\\\\u00a0Budi\\\\u00a018\\\\u00a0Agung\\\\u00a014\\\\u00a0Adit\\\\u00a015<br/><br/>\\\"}]\", \"live\": true, \"thumbnail_image\": null, \"has_unpublished_changes\": false, \"related_post\": \"[]\", \"angular_url\": \"perkenalan-orm-dan-sqlalchemy\", \"title_extended\": \"\", \"numchild\": 0, \"content_type\": 34, \"show_in_menus\": false, \"date\": \"2015-04-07\", \"path\": \"0001000100010007\", \"url_path\": \"/home/blog/perkenalan-orm-dan-sqlalchemy/\", \"expired\": false, \"pk\": 12, \"categories\": \"[{\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Python\\\"}, {\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Software\\\"}]\", \"main_image\": null, \"locked\": false, \"author\": \"Abirafdi Raditya Putra\", \"depth\": 4, \"first_published_at\": \"2015-08-14T02:26:40.339Z\", \"expire_at\": null}", "user": 1, "page": 12}, "model": "wagtailcore.pagerevision", "pk": 47}, {"fields": {"approved_go_live_at": null, "created_at": "2015-08-14T02:30:20.948Z", "submitted_for_moderation": false, "content_json": "{\"search_description\": \"\", \"owner\": 1, \"intro\": \"<p>Kemampuan database merupakan kemampuan fundamental bagi setiap programmer. Bagi orang yang baru mulai belajar database pasti pernah mendengar Object Relational Mapping atau ORM. Pada post ini saya akan menjelaskan apa itu ORM berserta contohnya menggunakan SQLAlchemy</p>\", \"latest_revision_created_at\": \"2015-08-14T02:28:50.297Z\", \"main_background_image\": null, \"go_live_at\": null, \"title\": \"Perkenalan ORM dan SQLAlchemy\", \"seo_title\": \"\", \"slug\": \"perkenalan-orm-dan-sqlalchemy\", \"content\": \"[{\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Kemampuan database merupakan kemampuan fundamental bagi setiap programmer. Bagi orang yang baru mulai belajar database pasti pernah mendengar Object Relational Mapping atau ORM. Sebelum ORM ada, segala aktifitas dan perintah di database harus menggunakan bahasa SQL. Di era modern sekarang, hampir sebagian besar bahasa pemrograman yang digunakan bersifat <i>object oriented</i>, seperti Java, Python dan C++, ORM dibuat agar objek dapat dipetakan atau direlasikan ke suatu record di database, ORM juga mengubah sintaks SQL menjadi sintaks yang bersifat <i>object-oriented.</i>\\\\u00a0 sehingga \\\\u00a0memudahkan programmer dan meningkatkan produktifitas dalam hal menggunakan database karena object sudah terhubung langsung dengan record-record pada database, code readability juga akan meningkat karena sintaks ORM lebih terlihat <i>object-oriented.</i>\\\\u00a0</p><p>Jadi bagaimana sih cara ORM mempermudah kerja programmer? ORM menterjemahkan perintah dari programmer ke dalam bahasa SQL, termasuk mengubah tipe data dari field suatu objek supaya cocok dengan tipe data pada databasenya. ORM ada banyak, masing-masing memiliki kelebihan dan kekurangan, dan semuanya hampir berbentuk suatu library atau module yang kita install sendiri sesuai dengan bahasa pemrograman kita, namun ada juga ORM yang sudah terintegrasi pada suatu framework, contohnya ORM Django. Faktor utama bagus atau tidaknya dari suatu ORM adalah dari segi performa, seperti seberapa cepat suatu ORM dapat melaksanakan query yang kompleks. Perbandingan berbagai ORM Python yang lumayan detail bisa dilihat\\\\u00a0<a href=\\\\\\\"http://www.pythoncentral.io/sqlalchemy-vs-orms/\\\\\\\">disini</a>.\\\\u00a0</p><p>Disini saya akan menggunakan SQLAlchemy sebagai ORM pilihan saya, karena SQLAlchemy adalah ORM yang paling banyak digunakan di Python sehingga lebih mudah googling jika ada kesulitan...</p><p></p><p>Berikut merupakan contoh ORM in action pada SQLAlchemy.</p><p><br/></p><br/>\\\"}, {\\\"type\\\": \\\"raw_html\\\", \\\"value\\\": \\\"<table border=\\\\\\\"2\\\\\\\" cellpadding=\\\\\\\"4\\\\\\\" cellspacing=\\\\\\\"4\\\\\\\">\\\\r\\\\n<tbody>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;nama &nbsp;</td>\\\\r\\\\n<td>&nbsp;umur&nbsp;</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Andi</td>\\\\r\\\\n<td>&nbsp;19</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Budi</td>\\\\r\\\\n<td>&nbsp;18</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Agung</td>\\\\r\\\\n<td>&nbsp;14</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Adit</td>\\\\r\\\\n<td>&nbsp;15</td>\\\\r\\\\n</tr>\\\\r\\\\n</tbody>\\\\r\\\\n</table>\\\"}]\", \"live\": true, \"thumbnail_image\": null, \"has_unpublished_changes\": false, \"related_post\": \"[]\", \"angular_url\": \"perkenalan-orm-dan-sqlalchemy\", \"title_extended\": \"\", \"numchild\": 0, \"content_type\": 34, \"show_in_menus\": false, \"date\": \"2015-04-07\", \"path\": \"0001000100010007\", \"url_path\": \"/home/blog/perkenalan-orm-dan-sqlalchemy/\", \"expired\": false, \"pk\": 12, \"categories\": \"[{\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Python\\\"}, {\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Software\\\"}]\", \"main_image\": null, \"locked\": false, \"author\": \"Abirafdi Raditya Putra\", \"depth\": 4, \"first_published_at\": \"2015-08-14T02:26:40.339Z\", \"expire_at\": null}", "user": 1, "page": 12}, "model": "wagtailcore.pagerevision", "pk": 48}, {"fields": {"approved_go_live_at": null, "created_at": "2015-08-14T02:30:39.857Z", "submitted_for_moderation": false, "content_json": "{\"search_description\": \"\", \"owner\": 1, \"intro\": \"<p>Kemampuan database merupakan kemampuan fundamental bagi setiap programmer. Bagi orang yang baru mulai belajar database pasti pernah mendengar Object Relational Mapping atau ORM. Pada post ini saya akan menjelaskan apa itu ORM berserta contohnya menggunakan SQLAlchemy</p>\", \"latest_revision_created_at\": \"2015-08-14T02:30:20.948Z\", \"main_background_image\": null, \"go_live_at\": null, \"title\": \"Perkenalan ORM dan SQLAlchemy\", \"seo_title\": \"\", \"slug\": \"perkenalan-orm-dan-sqlalchemy\", \"content\": \"[{\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Kemampuan database merupakan kemampuan fundamental bagi setiap programmer. Bagi orang yang baru mulai belajar database pasti pernah mendengar Object Relational Mapping atau ORM. Sebelum ORM ada, segala aktifitas dan perintah di database harus menggunakan bahasa SQL. Di era modern sekarang, hampir sebagian besar bahasa pemrograman yang digunakan bersifat <i>object oriented</i>, seperti Java, Python dan C++, ORM dibuat agar objek dapat dipetakan atau direlasikan ke suatu record di database, ORM juga mengubah sintaks SQL menjadi sintaks yang bersifat <i>object-oriented.</i>\\\\u00a0 sehingga \\\\u00a0memudahkan programmer dan meningkatkan produktifitas dalam hal menggunakan database karena object sudah terhubung langsung dengan record-record pada database, code readability juga akan meningkat karena sintaks ORM lebih terlihat <i>object-oriented.</i>\\\\u00a0</p><p>Jadi bagaimana sih cara ORM mempermudah kerja programmer? ORM menterjemahkan perintah dari programmer ke dalam bahasa SQL, termasuk mengubah tipe data dari field suatu objek supaya cocok dengan tipe data pada databasenya. ORM ada banyak, masing-masing memiliki kelebihan dan kekurangan, dan semuanya hampir berbentuk suatu library atau module yang kita install sendiri sesuai dengan bahasa pemrograman kita, namun ada juga ORM yang sudah terintegrasi pada suatu framework, contohnya ORM Django. Faktor utama bagus atau tidaknya dari suatu ORM adalah dari segi performa, seperti seberapa cepat suatu ORM dapat melaksanakan query yang kompleks. Perbandingan berbagai ORM Python yang lumayan detail bisa dilihat\\\\u00a0<a href=\\\\\\\"http://www.pythoncentral.io/sqlalchemy-vs-orms/\\\\\\\">disini</a>.\\\\u00a0</p><p>Disini saya akan menggunakan SQLAlchemy sebagai ORM pilihan saya, karena SQLAlchemy adalah ORM yang paling banyak digunakan di Python sehingga lebih mudah googling jika ada kesulitan...</p><p></p><p>Berikut merupakan contoh ORM in action pada SQLAlchemy.</p><p><br/></p><br/>\\\"}, {\\\"type\\\": \\\"raw_html\\\", \\\"value\\\": \\\"<table>\\\\r\\\\n<tbody>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;nama &nbsp;</td>\\\\r\\\\n<td>&nbsp;umur&nbsp;</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Andi</td>\\\\r\\\\n<td>&nbsp;19</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Budi</td>\\\\r\\\\n<td>&nbsp;18</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Agung</td>\\\\r\\\\n<td>&nbsp;14</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Adit</td>\\\\r\\\\n<td>&nbsp;15</td>\\\\r\\\\n</tr>\\\\r\\\\n</tbody>\\\\r\\\\n</table>\\\"}]\", \"live\": true, \"thumbnail_image\": null, \"has_unpublished_changes\": false, \"related_post\": \"[]\", \"angular_url\": \"perkenalan-orm-dan-sqlalchemy\", \"title_extended\": \"\", \"numchild\": 0, \"content_type\": 34, \"show_in_menus\": false, \"date\": \"2015-04-07\", \"path\": \"0001000100010007\", \"url_path\": \"/home/blog/perkenalan-orm-dan-sqlalchemy/\", \"expired\": false, \"pk\": 12, \"categories\": \"[{\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Python\\\"}, {\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Software\\\"}]\", \"main_image\": null, \"locked\": false, \"author\": \"Abirafdi Raditya Putra\", \"depth\": 4, \"first_published_at\": \"2015-08-14T02:26:40.339Z\", \"expire_at\": null}", "user": 1, "page": 12}, "model": "wagtailcore.pagerevision", "pk": 49}, {"fields": {"approved_go_live_at": null, "created_at": "2015-08-14T02:30:55.850Z", "submitted_for_moderation": false, "content_json": "{\"search_description\": \"\", \"owner\": 1, \"intro\": \"<p>Kemampuan database merupakan kemampuan fundamental bagi setiap programmer. Bagi orang yang baru mulai belajar database pasti pernah mendengar Object Relational Mapping atau ORM. Pada post ini saya akan menjelaskan apa itu ORM berserta contohnya menggunakan SQLAlchemy</p>\", \"latest_revision_created_at\": \"2015-08-14T02:30:39.857Z\", \"main_background_image\": null, \"go_live_at\": null, \"title\": \"Perkenalan ORM dan SQLAlchemy\", \"seo_title\": \"\", \"slug\": \"perkenalan-orm-dan-sqlalchemy\", \"content\": \"[{\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Kemampuan database merupakan kemampuan fundamental bagi setiap programmer. Bagi orang yang baru mulai belajar database pasti pernah mendengar Object Relational Mapping atau ORM. Sebelum ORM ada, segala aktifitas dan perintah di database harus menggunakan bahasa SQL. Di era modern sekarang, hampir sebagian besar bahasa pemrograman yang digunakan bersifat <i>object oriented</i>, seperti Java, Python dan C++, ORM dibuat agar objek dapat dipetakan atau direlasikan ke suatu record di database, ORM juga mengubah sintaks SQL menjadi sintaks yang bersifat <i>object-oriented.</i>\\\\u00a0 sehingga \\\\u00a0memudahkan programmer dan meningkatkan produktifitas dalam hal menggunakan database karena object sudah terhubung langsung dengan record-record pada database, code readability juga akan meningkat karena sintaks ORM lebih terlihat <i>object-oriented.</i>\\\\u00a0</p><p>Jadi bagaimana sih cara ORM mempermudah kerja programmer? ORM menterjemahkan perintah dari programmer ke dalam bahasa SQL, termasuk mengubah tipe data dari field suatu objek supaya cocok dengan tipe data pada databasenya. ORM ada banyak, masing-masing memiliki kelebihan dan kekurangan, dan semuanya hampir berbentuk suatu library atau module yang kita install sendiri sesuai dengan bahasa pemrograman kita, namun ada juga ORM yang sudah terintegrasi pada suatu framework, contohnya ORM Django. Faktor utama bagus atau tidaknya dari suatu ORM adalah dari segi performa, seperti seberapa cepat suatu ORM dapat melaksanakan query yang kompleks. Perbandingan berbagai ORM Python yang lumayan detail bisa dilihat\\\\u00a0<a href=\\\\\\\"http://www.pythoncentral.io/sqlalchemy-vs-orms/\\\\\\\">disini</a>.\\\\u00a0</p><p>Disini saya akan menggunakan SQLAlchemy sebagai ORM pilihan saya, karena SQLAlchemy adalah ORM yang paling banyak digunakan di Python sehingga lebih mudah googling jika ada kesulitan...</p><p></p><p>Berikut merupakan contoh ORM in action pada SQLAlchemy.</p>\\\"}, {\\\"type\\\": \\\"raw_html\\\", \\\"value\\\": \\\"<table>\\\\r\\\\n<tbody>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;nama &nbsp;</td>\\\\r\\\\n<td>&nbsp;umur&nbsp;</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Andi</td>\\\\r\\\\n<td>&nbsp;19</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Budi</td>\\\\r\\\\n<td>&nbsp;18</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Agung</td>\\\\r\\\\n<td>&nbsp;14</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Adit</td>\\\\r\\\\n<td>&nbsp;15</td>\\\\r\\\\n</tr>\\\\r\\\\n</tbody>\\\\r\\\\n</table>\\\"}]\", \"live\": true, \"thumbnail_image\": null, \"has_unpublished_changes\": false, \"related_post\": \"[]\", \"angular_url\": \"perkenalan-orm-dan-sqlalchemy\", \"title_extended\": \"\", \"numchild\": 0, \"content_type\": 34, \"show_in_menus\": false, \"date\": \"2015-04-07\", \"path\": \"0001000100010007\", \"url_path\": \"/home/blog/perkenalan-orm-dan-sqlalchemy/\", \"expired\": false, \"pk\": 12, \"categories\": \"[{\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Python\\\"}, {\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Software\\\"}]\", \"main_image\": null, \"locked\": false, \"author\": \"Abirafdi Raditya Putra\", \"depth\": 4, \"first_published_at\": \"2015-08-14T02:26:40.339Z\", \"expire_at\": null}", "user": 1, "page": 12}, "model": "wagtailcore.pagerevision", "pk": 50}, {"fields": {"approved_go_live_at": null, "created_at": "2015-08-14T02:31:27.849Z", "submitted_for_moderation": false, "content_json": "{\"search_description\": \"\", \"owner\": 1, \"intro\": \"<p>Kemampuan database merupakan kemampuan fundamental bagi setiap programmer. Bagi orang yang baru mulai belajar database pasti pernah mendengar Object Relational Mapping atau ORM. Pada post ini saya akan menjelaskan apa itu ORM berserta contohnya menggunakan SQLAlchemy</p>\", \"latest_revision_created_at\": \"2015-08-14T02:30:55.850Z\", \"main_background_image\": null, \"go_live_at\": null, \"title\": \"Perkenalan ORM dan SQLAlchemy\", \"seo_title\": \"\", \"slug\": \"perkenalan-orm-dan-sqlalchemy\", \"content\": \"[{\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Kemampuan database merupakan kemampuan fundamental bagi setiap programmer. Bagi orang yang baru mulai belajar database pasti pernah mendengar Object Relational Mapping atau ORM. Sebelum ORM ada, segala aktifitas dan perintah di database harus menggunakan bahasa SQL. Di era modern sekarang, hampir sebagian besar bahasa pemrograman yang digunakan bersifat <i>object oriented</i>, seperti Java, Python dan C++, ORM dibuat agar objek dapat dipetakan atau direlasikan ke suatu record di database, ORM juga mengubah sintaks SQL menjadi sintaks yang bersifat <i>object-oriented.</i>\\\\u00a0 sehingga \\\\u00a0memudahkan programmer dan meningkatkan produktifitas dalam hal menggunakan database karena object sudah terhubung langsung dengan record-record pada database, code readability juga akan meningkat karena sintaks ORM lebih terlihat <i>object-oriented.</i>\\\\u00a0</p><p>Jadi bagaimana sih cara ORM mempermudah kerja programmer? ORM menterjemahkan perintah dari programmer ke dalam bahasa SQL, termasuk mengubah tipe data dari field suatu objek supaya cocok dengan tipe data pada databasenya. ORM ada banyak, masing-masing memiliki kelebihan dan kekurangan, dan semuanya hampir berbentuk suatu library atau module yang kita install sendiri sesuai dengan bahasa pemrograman kita, namun ada juga ORM yang sudah terintegrasi pada suatu framework, contohnya ORM Django. Faktor utama bagus atau tidaknya dari suatu ORM adalah dari segi performa, seperti seberapa cepat suatu ORM dapat melaksanakan query yang kompleks. Perbandingan berbagai ORM Python yang lumayan detail bisa dilihat\\\\u00a0<a href=\\\\\\\"http://www.pythoncentral.io/sqlalchemy-vs-orms/\\\\\\\">disini</a>.\\\\u00a0</p><p>Disini saya akan menggunakan SQLAlchemy sebagai ORM pilihan saya, karena SQLAlchemy adalah ORM yang paling banyak digunakan di Python sehingga lebih mudah googling jika ada kesulitan...</p><p></p><p>Berikut merupakan contoh ORM in action pada SQLAlchemy.</p><p><br/></p><p>Table mahasiswa pada database</p>\\\"}, {\\\"type\\\": \\\"raw_html\\\", \\\"value\\\": \\\"<table>\\\\r\\\\n<tbody>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;nama &nbsp;</td>\\\\r\\\\n<td>&nbsp;umur&nbsp;</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Andi</td>\\\\r\\\\n<td>&nbsp;19</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Budi</td>\\\\r\\\\n<td>&nbsp;18</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Agung</td>\\\\r\\\\n<td>&nbsp;14</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Adit</td>\\\\r\\\\n<td>&nbsp;15</td>\\\\r\\\\n</tr>\\\\r\\\\n</tbody>\\\\r\\\\n</table>\\\"}]\", \"live\": true, \"thumbnail_image\": null, \"has_unpublished_changes\": false, \"related_post\": \"[]\", \"angular_url\": \"perkenalan-orm-dan-sqlalchemy\", \"title_extended\": \"\", \"numchild\": 0, \"content_type\": 34, \"show_in_menus\": false, \"date\": \"2015-04-07\", \"path\": \"0001000100010007\", \"url_path\": \"/home/blog/perkenalan-orm-dan-sqlalchemy/\", \"expired\": false, \"pk\": 12, \"categories\": \"[{\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Python\\\"}, {\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Software\\\"}]\", \"main_image\": null, \"locked\": false, \"author\": \"Abirafdi Raditya Putra\", \"depth\": 4, \"first_published_at\": \"2015-08-14T02:26:40.339Z\", \"expire_at\": null}", "user": 1, "page": 12}, "model": "wagtailcore.pagerevision", "pk": 51}, {"fields": {"approved_go_live_at": null, "created_at": "2015-08-14T02:33:00.109Z", "submitted_for_moderation": false, "content_json": "{\"search_description\": \"\", \"owner\": 1, \"intro\": \"<p>Kemampuan database merupakan kemampuan fundamental bagi setiap programmer. Bagi orang yang baru mulai belajar database pasti pernah mendengar Object Relational Mapping atau ORM. Pada post ini saya akan menjelaskan apa itu ORM berserta contohnya menggunakan SQLAlchemy</p>\", \"latest_revision_created_at\": \"2015-08-14T02:31:27.849Z\", \"main_background_image\": null, \"go_live_at\": null, \"title\": \"Perkenalan ORM dan SQLAlchemy\", \"seo_title\": \"\", \"slug\": \"perkenalan-orm-dan-sqlalchemy\", \"content\": \"[{\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Kemampuan database merupakan kemampuan fundamental bagi setiap programmer. Bagi orang yang baru mulai belajar database pasti pernah mendengar Object Relational Mapping atau ORM. Sebelum ORM ada, segala aktifitas dan perintah di database harus menggunakan bahasa SQL. Di era modern sekarang, hampir sebagian besar bahasa pemrograman yang digunakan bersifat <i>object oriented</i>, seperti Java, Python dan C++, ORM dibuat agar objek dapat dipetakan atau direlasikan ke suatu record di database, ORM juga mengubah sintaks SQL menjadi sintaks yang bersifat <i>object-oriented.</i>\\\\u00a0 sehingga \\\\u00a0memudahkan programmer dan meningkatkan produktifitas dalam hal menggunakan database karena object sudah terhubung langsung dengan record-record pada database, code readability juga akan meningkat karena sintaks ORM lebih terlihat <i>object-oriented.</i>\\\\u00a0</p><p>Jadi bagaimana sih cara ORM mempermudah kerja programmer? ORM menterjemahkan perintah dari programmer ke dalam bahasa SQL, termasuk mengubah tipe data dari field suatu objek supaya cocok dengan tipe data pada databasenya. ORM ada banyak, masing-masing memiliki kelebihan dan kekurangan, dan semuanya hampir berbentuk suatu library atau module yang kita install sendiri sesuai dengan bahasa pemrograman kita, namun ada juga ORM yang sudah terintegrasi pada suatu framework, contohnya ORM Django. Faktor utama bagus atau tidaknya dari suatu ORM adalah dari segi performa, seperti seberapa cepat suatu ORM dapat melaksanakan query yang kompleks. Perbandingan berbagai ORM Python yang lumayan detail bisa dilihat\\\\u00a0<a href=\\\\\\\"http://www.pythoncentral.io/sqlalchemy-vs-orms/\\\\\\\">disini</a>.\\\\u00a0</p><p>Disini saya akan menggunakan SQLAlchemy sebagai ORM pilihan saya, karena SQLAlchemy adalah ORM yang paling banyak digunakan di Python sehingga lebih mudah googling jika ada kesulitan...</p><p></p><p>Berikut merupakan demonstrasi SQLAlchemy.</p><p><br/></p><p>Table mahasiswa pada database</p>\\\"}, {\\\"type\\\": \\\"raw_html\\\", \\\"value\\\": \\\"<table>\\\\r\\\\n<tbody>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;nama &nbsp;</td>\\\\r\\\\n<td>&nbsp;umur&nbsp;</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Andi</td>\\\\r\\\\n<td>&nbsp;19</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Budi</td>\\\\r\\\\n<td>&nbsp;18</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Agung</td>\\\\r\\\\n<td>&nbsp;14</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Adit</td>\\\\r\\\\n<td>&nbsp;15</td>\\\\r\\\\n</tr>\\\\r\\\\n</tbody>\\\\r\\\\n</table>\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Menggunakan SQL.</p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"SELECT nama\\\\r\\\\nFROM users\\\\r\\\\nWHERE umur > 17;\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p><br/></p><p>Menggunakan ORM SQLAlchemy<br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"query(User).filter(User.nama > 17) \\\"}]\", \"live\": true, \"thumbnail_image\": null, \"has_unpublished_changes\": false, \"related_post\": \"[]\", \"angular_url\": \"perkenalan-orm-dan-sqlalchemy\", \"title_extended\": \"\", \"numchild\": 0, \"content_type\": 34, \"show_in_menus\": false, \"date\": \"2015-04-07\", \"path\": \"0001000100010007\", \"url_path\": \"/home/blog/perkenalan-orm-dan-sqlalchemy/\", \"expired\": false, \"pk\": 12, \"categories\": \"[{\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Python\\\"}, {\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Software\\\"}]\", \"main_image\": null, \"locked\": false, \"author\": \"Abirafdi Raditya Putra\", \"depth\": 4, \"first_published_at\": \"2015-08-14T02:26:40.339Z\", \"expire_at\": null}", "user": 1, "page": 12}, "model": "wagtailcore.pagerevision", "pk": 52}, {"fields": {"approved_go_live_at": null, "created_at": "2015-08-14T02:33:16.688Z", "submitted_for_moderation": false, "content_json": "{\"search_description\": \"\", \"owner\": 1, \"intro\": \"<p>Kemampuan database merupakan kemampuan fundamental bagi setiap programmer. Bagi orang yang baru mulai belajar database pasti pernah mendengar Object Relational Mapping atau ORM. Pada post ini saya akan menjelaskan apa itu ORM berserta contohnya menggunakan SQLAlchemy</p>\", \"latest_revision_created_at\": \"2015-08-14T02:33:00.109Z\", \"main_background_image\": null, \"go_live_at\": null, \"title\": \"Perkenalan ORM dan SQLAlchemy\", \"seo_title\": \"\", \"slug\": \"perkenalan-orm-dan-sqlalchemy\", \"content\": \"[{\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Kemampuan database merupakan kemampuan fundamental bagi setiap programmer. Bagi orang yang baru mulai belajar database pasti pernah mendengar Object Relational Mapping atau ORM. Sebelum ORM ada, segala aktifitas dan perintah di database harus menggunakan bahasa SQL. Di era modern sekarang, hampir sebagian besar bahasa pemrograman yang digunakan bersifat <i>object oriented</i>, seperti Java, Python dan C++, ORM dibuat agar objek dapat dipetakan atau direlasikan ke suatu record di database, ORM juga mengubah sintaks SQL menjadi sintaks yang bersifat <i>object-oriented.</i>\\\\u00a0 sehingga \\\\u00a0memudahkan programmer dan meningkatkan produktifitas dalam hal menggunakan database karena object sudah terhubung langsung dengan record-record pada database, code readability juga akan meningkat karena sintaks ORM lebih terlihat <i>object-oriented.</i>\\\\u00a0</p><p>Jadi bagaimana sih cara ORM mempermudah kerja programmer? ORM menterjemahkan perintah dari programmer ke dalam bahasa SQL, termasuk mengubah tipe data dari field suatu objek supaya cocok dengan tipe data pada databasenya. ORM ada banyak, masing-masing memiliki kelebihan dan kekurangan, dan semuanya hampir berbentuk suatu library atau module yang kita install sendiri sesuai dengan bahasa pemrograman kita, namun ada juga ORM yang sudah terintegrasi pada suatu framework, contohnya ORM Django. Faktor utama bagus atau tidaknya dari suatu ORM adalah dari segi performa, seperti seberapa cepat suatu ORM dapat melaksanakan query yang kompleks. Perbandingan berbagai ORM Python yang lumayan detail bisa dilihat\\\\u00a0<a href=\\\\\\\"http://www.pythoncentral.io/sqlalchemy-vs-orms/\\\\\\\">disini</a>.\\\\u00a0</p><p>Disini saya akan menggunakan SQLAlchemy sebagai ORM pilihan saya, karena SQLAlchemy adalah ORM yang paling banyak digunakan di Python sehingga lebih mudah googling jika ada kesulitan...</p><p></p><p>Berikut merupakan demonstrasi SQLAlchemy.</p><p><br/></p><p>Table mahasiswa pada database</p>\\\"}, {\\\"type\\\": \\\"raw_html\\\", \\\"value\\\": \\\"<table>\\\\r\\\\n<tbody>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;nama &nbsp;</td>\\\\r\\\\n<td>&nbsp;umur&nbsp;</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Andi</td>\\\\r\\\\n<td>&nbsp;19</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Budi</td>\\\\r\\\\n<td>&nbsp;18</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Agung</td>\\\\r\\\\n<td>&nbsp;14</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Adit</td>\\\\r\\\\n<td>&nbsp;15</td>\\\\r\\\\n</tr>\\\\r\\\\n</tbody>\\\\r\\\\n</table>\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Menggunakan SQL.</p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"SELECT nama\\\\r\\\\nFROM users\\\\r\\\\nWHERE umur > 17;\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Menggunakan ORM SQLAlchemy<br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"query(User).filter(User.nama > 17) \\\"}]\", \"live\": true, \"thumbnail_image\": null, \"has_unpublished_changes\": false, \"related_post\": \"[]\", \"angular_url\": \"perkenalan-orm-dan-sqlalchemy\", \"title_extended\": \"\", \"numchild\": 0, \"content_type\": 34, \"show_in_menus\": false, \"date\": \"2015-04-07\", \"path\": \"0001000100010007\", \"url_path\": \"/home/blog/perkenalan-orm-dan-sqlalchemy/\", \"expired\": false, \"pk\": 12, \"categories\": \"[{\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Python\\\"}, {\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Software\\\"}]\", \"main_image\": null, \"locked\": false, \"author\": \"Abirafdi Raditya Putra\", \"depth\": 4, \"first_published_at\": \"2015-08-14T02:26:40.339Z\", \"expire_at\": null}", "user": 1, "page": 12}, "model": "wagtailcore.pagerevision", "pk": 53}, {"fields": {"approved_go_live_at": null, "created_at": "2015-08-14T02:33:49.085Z", "submitted_for_moderation": false, "content_json": "{\"search_description\": \"\", \"owner\": 1, \"intro\": \"<p>Kemampuan database merupakan kemampuan fundamental bagi setiap programmer. Bagi orang yang baru mulai belajar database pasti pernah mendengar Object Relational Mapping atau ORM. Pada post ini saya akan menjelaskan apa itu ORM berserta contohnya menggunakan SQLAlchemy</p>\", \"latest_revision_created_at\": \"2015-08-14T02:33:16.688Z\", \"main_background_image\": null, \"go_live_at\": null, \"title\": \"Perkenalan ORM dan SQLAlchemy\", \"seo_title\": \"\", \"slug\": \"perkenalan-orm-dan-sqlalchemy\", \"content\": \"[{\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Kemampuan database merupakan kemampuan fundamental bagi setiap programmer. Bagi orang yang baru mulai belajar database pasti pernah mendengar Object Relational Mapping atau ORM. Sebelum ORM ada, segala aktifitas dan perintah di database harus menggunakan bahasa SQL. Di era modern sekarang, hampir sebagian besar bahasa pemrograman yang digunakan bersifat <i>object oriented</i>, seperti Java, Python dan C++, ORM dibuat agar objek dapat dipetakan atau direlasikan ke suatu record di database, ORM juga mengubah sintaks SQL menjadi sintaks yang bersifat <i>object-oriented.</i>\\\\u00a0 sehingga \\\\u00a0memudahkan programmer dan meningkatkan produktifitas dalam hal menggunakan database karena object sudah terhubung langsung dengan record-record pada database, code readability juga akan meningkat karena sintaks ORM lebih terlihat <i>object-oriented.</i>\\\\u00a0</p><p>Jadi bagaimana sih cara ORM mempermudah kerja programmer? ORM menterjemahkan perintah dari programmer ke dalam bahasa SQL, termasuk mengubah tipe data dari field suatu objek supaya cocok dengan tipe data pada databasenya. ORM ada banyak, masing-masing memiliki kelebihan dan kekurangan, dan semuanya hampir berbentuk suatu library atau module yang kita install sendiri sesuai dengan bahasa pemrograman kita, namun ada juga ORM yang sudah terintegrasi pada suatu framework, contohnya ORM Django. Faktor utama bagus atau tidaknya dari suatu ORM adalah dari segi performa, seperti seberapa cepat suatu ORM dapat melaksanakan query yang kompleks. Perbandingan berbagai ORM Python yang lumayan detail bisa dilihat\\\\u00a0<a href=\\\\\\\"http://www.pythoncentral.io/sqlalchemy-vs-orms/\\\\\\\">disini</a>.\\\\u00a0</p><p>Disini saya akan menggunakan SQLAlchemy sebagai ORM pilihan saya, karena SQLAlchemy adalah ORM yang paling banyak digunakan di Python sehingga lebih mudah googling jika ada kesulitan...</p><p></p><p>Berikut merupakan demonstrasi SQLAlchemy</p>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"Table mahasiswa di database\\\"}, {\\\"type\\\": \\\"raw_html\\\", \\\"value\\\": \\\"<table>\\\\r\\\\n<tbody>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;nama &nbsp;</td>\\\\r\\\\n<td>&nbsp;umur&nbsp;</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Andi</td>\\\\r\\\\n<td>&nbsp;19</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Budi</td>\\\\r\\\\n<td>&nbsp;18</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Agung</td>\\\\r\\\\n<td>&nbsp;14</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Adit</td>\\\\r\\\\n<td>&nbsp;15</td>\\\\r\\\\n</tr>\\\\r\\\\n</tbody>\\\\r\\\\n</table>\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Menggunakan SQL.</p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"SELECT nama\\\\r\\\\nFROM users\\\\r\\\\nWHERE umur > 17;\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Menggunakan ORM SQLAlchemy<br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"query(User).filter(User.nama > 17) \\\"}]\", \"live\": true, \"thumbnail_image\": null, \"has_unpublished_changes\": false, \"related_post\": \"[]\", \"angular_url\": \"perkenalan-orm-dan-sqlalchemy\", \"title_extended\": \"\", \"numchild\": 0, \"content_type\": 34, \"show_in_menus\": false, \"date\": \"2015-04-07\", \"path\": \"0001000100010007\", \"url_path\": \"/home/blog/perkenalan-orm-dan-sqlalchemy/\", \"expired\": false, \"pk\": 12, \"categories\": \"[{\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Python\\\"}, {\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Software\\\"}]\", \"main_image\": null, \"locked\": false, \"author\": \"Abirafdi Raditya Putra\", \"depth\": 4, \"first_published_at\": \"2015-08-14T02:26:40.339Z\", \"expire_at\": null}", "user": 1, "page": 12}, "model": "wagtailcore.pagerevision", "pk": 54}, {"fields": {"approved_go_live_at": null, "created_at": "2015-08-14T02:34:22.388Z", "submitted_for_moderation": false, "content_json": "{\"search_description\": \"\", \"owner\": 1, \"intro\": \"<p>Kemampuan database merupakan kemampuan fundamental bagi setiap programmer. Bagi orang yang baru mulai belajar database pasti pernah mendengar Object Relational Mapping atau ORM. Pada post ini saya akan menjelaskan apa itu ORM berserta contohnya menggunakan SQLAlchemy</p>\", \"latest_revision_created_at\": \"2015-08-14T02:33:49.085Z\", \"main_background_image\": null, \"go_live_at\": null, \"title\": \"Perkenalan ORM dan SQLAlchemy\", \"seo_title\": \"\", \"slug\": \"perkenalan-orm-dan-sqlalchemy\", \"content\": \"[{\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Kemampuan database merupakan kemampuan fundamental bagi setiap programmer. Bagi orang yang baru mulai belajar database pasti pernah mendengar Object Relational Mapping atau ORM. Sebelum ORM ada, segala aktifitas dan perintah di database harus menggunakan bahasa SQL. Di era modern sekarang, hampir sebagian besar bahasa pemrograman yang digunakan bersifat <i>object oriented</i>, seperti Java, Python dan C++, ORM dibuat agar objek dapat dipetakan atau direlasikan ke suatu record di database, ORM juga mengubah sintaks SQL menjadi sintaks yang bersifat <i>object-oriented.</i>\\\\u00a0 sehingga \\\\u00a0memudahkan programmer dan meningkatkan produktifitas dalam hal menggunakan database karena object sudah terhubung langsung dengan record-record pada database, code readability juga akan meningkat karena sintaks ORM lebih terlihat <i>object-oriented.</i>\\\\u00a0</p><p>Jadi bagaimana sih cara ORM mempermudah kerja programmer? ORM menterjemahkan perintah dari programmer ke dalam bahasa SQL, termasuk mengubah tipe data dari field suatu objek supaya cocok dengan tipe data pada databasenya. ORM ada banyak, masing-masing memiliki kelebihan dan kekurangan, dan semuanya hampir berbentuk suatu library atau module yang kita install sendiri sesuai dengan bahasa pemrograman kita, namun ada juga ORM yang sudah terintegrasi pada suatu framework, contohnya ORM Django. Faktor utama bagus atau tidaknya dari suatu ORM adalah dari segi performa, seperti seberapa cepat suatu ORM dapat melaksanakan query yang kompleks. Perbandingan berbagai ORM Python yang lumayan detail bisa dilihat\\\\u00a0<a href=\\\\\\\"http://www.pythoncentral.io/sqlalchemy-vs-orms/\\\\\\\">disini</a>.\\\\u00a0</p><p>Disini saya akan menggunakan SQLAlchemy sebagai ORM pilihan saya, karena SQLAlchemy adalah ORM yang paling banyak digunakan di Python sehingga lebih mudah googling jika ada kesulitan...</p><p></p><p>Berikut merupakan demonstrasi SQLAlchemy</p>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"Table mahasiswa di database\\\"}, {\\\"type\\\": \\\"raw_html\\\", \\\"value\\\": \\\"<table class=\\\\\\\"center-text\\\\\\\">\\\\r\\\\n<tbody>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;nama &nbsp;</td>\\\\r\\\\n<td>&nbsp;umur&nbsp;</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Andi</td>\\\\r\\\\n<td>&nbsp;19</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Budi</td>\\\\r\\\\n<td>&nbsp;18</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Agung</td>\\\\r\\\\n<td>&nbsp;14</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Adit</td>\\\\r\\\\n<td>&nbsp;15</td>\\\\r\\\\n</tr>\\\\r\\\\n</tbody>\\\\r\\\\n</table>\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Menggunakan SQL.</p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"SELECT nama\\\\r\\\\nFROM users\\\\r\\\\nWHERE umur > 17;\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Menggunakan ORM SQLAlchemy<br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"query(User).filter(User.nama > 17) \\\"}]\", \"live\": true, \"thumbnail_image\": null, \"has_unpublished_changes\": false, \"related_post\": \"[]\", \"angular_url\": \"perkenalan-orm-dan-sqlalchemy\", \"title_extended\": \"\", \"numchild\": 0, \"content_type\": 34, \"show_in_menus\": false, \"date\": \"2015-04-07\", \"path\": \"0001000100010007\", \"url_path\": \"/home/blog/perkenalan-orm-dan-sqlalchemy/\", \"expired\": false, \"pk\": 12, \"categories\": \"[{\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Python\\\"}, {\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Software\\\"}]\", \"main_image\": null, \"locked\": false, \"author\": \"Abirafdi Raditya Putra\", \"depth\": 4, \"first_published_at\": \"2015-08-14T02:26:40.339Z\", \"expire_at\": null}", "user": 1, "page": 12}, "model": "wagtailcore.pagerevision", "pk": 55}, {"fields": {"approved_go_live_at": null, "created_at": "2015-08-14T02:35:05.255Z", "submitted_for_moderation": false, "content_json": "{\"search_description\": \"\", \"owner\": 1, \"intro\": \"<p>Kemampuan database merupakan kemampuan fundamental bagi setiap programmer. Bagi orang yang baru mulai belajar database pasti pernah mendengar Object Relational Mapping atau ORM. Pada post ini saya akan menjelaskan apa itu ORM berserta contohnya menggunakan SQLAlchemy</p>\", \"latest_revision_created_at\": \"2015-08-14T02:34:22.388Z\", \"main_background_image\": null, \"go_live_at\": null, \"title\": \"Perkenalan ORM dan SQLAlchemy\", \"seo_title\": \"\", \"slug\": \"perkenalan-orm-dan-sqlalchemy\", \"content\": \"[{\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Kemampuan database merupakan kemampuan fundamental bagi setiap programmer. Bagi orang yang baru mulai belajar database pasti pernah mendengar Object Relational Mapping atau ORM. Sebelum ORM ada, segala aktifitas dan perintah di database harus menggunakan bahasa SQL. Di era modern sekarang, hampir sebagian besar bahasa pemrograman yang digunakan bersifat <i>object oriented</i>, seperti Java, Python dan C++, ORM dibuat agar objek dapat dipetakan atau direlasikan ke suatu record di database, ORM juga mengubah sintaks SQL menjadi sintaks yang bersifat <i>object-oriented.</i>\\\\u00a0 sehingga \\\\u00a0memudahkan programmer dan meningkatkan produktifitas dalam hal menggunakan database karena object sudah terhubung langsung dengan record-record pada database, code readability juga akan meningkat karena sintaks ORM lebih terlihat <i>object-oriented.</i>\\\\u00a0</p><p>Jadi bagaimana sih cara ORM mempermudah kerja programmer? ORM menterjemahkan perintah dari programmer ke dalam bahasa SQL, termasuk mengubah tipe data dari field suatu objek supaya cocok dengan tipe data pada databasenya. ORM ada banyak, masing-masing memiliki kelebihan dan kekurangan, dan semuanya hampir berbentuk suatu library atau module yang kita install sendiri sesuai dengan bahasa pemrograman kita, namun ada juga ORM yang sudah terintegrasi pada suatu framework, contohnya ORM Django. Faktor utama bagus atau tidaknya dari suatu ORM adalah dari segi performa, seperti seberapa cepat suatu ORM dapat melaksanakan query yang kompleks. Perbandingan berbagai ORM Python yang lumayan detail bisa dilihat\\\\u00a0<a href=\\\\\\\"http://www.pythoncentral.io/sqlalchemy-vs-orms/\\\\\\\">disini</a>.\\\\u00a0</p><p>Disini saya akan menggunakan SQLAlchemy sebagai ORM pilihan saya, karena SQLAlchemy adalah ORM yang paling banyak digunakan di Python sehingga lebih mudah googling jika ada kesulitan...</p><p></p><p>Berikut merupakan demonstrasi SQLAlchemy</p>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"Table mahasiswa di database\\\"}, {\\\"type\\\": \\\"raw_html\\\", \\\"value\\\": \\\"<table class=\\\\\\\"center-align\\\\\\\">\\\\r\\\\n<tbody>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;nama &nbsp;</td>\\\\r\\\\n<td>&nbsp;umur&nbsp;</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Andi</td>\\\\r\\\\n<td>&nbsp;19</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Budi</td>\\\\r\\\\n<td>&nbsp;18</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Agung</td>\\\\r\\\\n<td>&nbsp;14</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Adit</td>\\\\r\\\\n<td>&nbsp;15</td>\\\\r\\\\n</tr>\\\\r\\\\n</tbody>\\\\r\\\\n</table>\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Menggunakan SQL.</p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"SELECT nama\\\\r\\\\nFROM users\\\\r\\\\nWHERE umur > 17;\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Menggunakan ORM SQLAlchemy<br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"query(User).filter(User.nama > 17) \\\"}]\", \"live\": true, \"thumbnail_image\": null, \"has_unpublished_changes\": false, \"related_post\": \"[]\", \"angular_url\": \"perkenalan-orm-dan-sqlalchemy\", \"title_extended\": \"\", \"numchild\": 0, \"content_type\": 34, \"show_in_menus\": false, \"date\": \"2015-04-07\", \"path\": \"0001000100010007\", \"url_path\": \"/home/blog/perkenalan-orm-dan-sqlalchemy/\", \"expired\": false, \"pk\": 12, \"categories\": \"[{\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Python\\\"}, {\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Software\\\"}]\", \"main_image\": null, \"locked\": false, \"author\": \"Abirafdi Raditya Putra\", \"depth\": 4, \"first_published_at\": \"2015-08-14T02:26:40.339Z\", \"expire_at\": null}", "user": 1, "page": 12}, "model": "wagtailcore.pagerevision", "pk": 56}, {"fields": {"approved_go_live_at": null, "created_at": "2015-08-14T02:36:44.836Z", "submitted_for_moderation": false, "content_json": "{\"search_description\": \"\", \"owner\": 1, \"intro\": \"<p>Kemampuan database merupakan kemampuan fundamental bagi setiap programmer. Bagi orang yang baru mulai belajar database pasti pernah mendengar Object Relational Mapping atau ORM. Pada post ini saya akan menjelaskan apa itu ORM berserta contohnya menggunakan SQLAlchemy</p>\", \"latest_revision_created_at\": \"2015-08-14T02:35:05.255Z\", \"main_background_image\": null, \"go_live_at\": null, \"title\": \"Perkenalan ORM dan SQLAlchemy\", \"seo_title\": \"\", \"slug\": \"perkenalan-orm-dan-sqlalchemy\", \"content\": \"[{\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Kemampuan database merupakan kemampuan fundamental bagi setiap programmer. Bagi orang yang baru mulai belajar database pasti pernah mendengar Object Relational Mapping atau ORM. Sebelum ORM ada, segala aktifitas dan perintah di database harus menggunakan bahasa SQL. Di era modern sekarang, hampir sebagian besar bahasa pemrograman yang digunakan bersifat <i>object oriented</i>, seperti Java, Python dan C++, ORM dibuat agar objek dapat dipetakan atau direlasikan ke suatu record di database, ORM juga mengubah sintaks SQL menjadi sintaks yang bersifat <i>object-oriented.</i>\\\\u00a0 sehingga \\\\u00a0memudahkan programmer dan meningkatkan produktifitas dalam hal menggunakan database karena object sudah terhubung langsung dengan record-record pada database, code readability juga akan meningkat karena sintaks ORM lebih terlihat <i>object-oriented.</i>\\\\u00a0</p><p>Jadi bagaimana sih cara ORM mempermudah kerja programmer? ORM menterjemahkan perintah dari programmer ke dalam bahasa SQL, termasuk mengubah tipe data dari field suatu objek supaya cocok dengan tipe data pada databasenya. ORM ada banyak, masing-masing memiliki kelebihan dan kekurangan, dan semuanya hampir berbentuk suatu library atau module yang kita install sendiri sesuai dengan bahasa pemrograman kita, namun ada juga ORM yang sudah terintegrasi pada suatu framework, contohnya ORM Django. Faktor utama bagus atau tidaknya dari suatu ORM adalah dari segi performa, seperti seberapa cepat suatu ORM dapat melaksanakan query yang kompleks. Perbandingan berbagai ORM Python yang lumayan detail bisa dilihat\\\\u00a0<a href=\\\\\\\"http://www.pythoncentral.io/sqlalchemy-vs-orms/\\\\\\\">disini</a>.\\\\u00a0</p><p>Disini saya akan menggunakan SQLAlchemy sebagai ORM pilihan saya, karena SQLAlchemy adalah ORM yang paling banyak digunakan di Python sehingga lebih mudah googling jika ada kesulitan...</p><p></p><p>Berikut merupakan demonstrasi SQLAlchemy</p>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"Table mahasiswa di database\\\"}, {\\\"type\\\": \\\"raw_html\\\", \\\"value\\\": \\\"<table style=\\\\\\\"border: 1;\\\\\\\">\\\\r\\\\n<tbody>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;nama &nbsp;</td>\\\\r\\\\n<td>&nbsp;umur&nbsp;</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Andi</td>\\\\r\\\\n<td>&nbsp;19</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Budi</td>\\\\r\\\\n<td>&nbsp;18</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Agung</td>\\\\r\\\\n<td>&nbsp;14</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Adit</td>\\\\r\\\\n<td>&nbsp;15</td>\\\\r\\\\n</tr>\\\\r\\\\n</tbody>\\\\r\\\\n</table>\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Menggunakan SQL.</p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"SELECT nama\\\\r\\\\nFROM users\\\\r\\\\nWHERE umur > 17;\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Menggunakan ORM SQLAlchemy<br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"query(User).filter(User.nama > 17) \\\"}]\", \"live\": true, \"thumbnail_image\": null, \"has_unpublished_changes\": false, \"related_post\": \"[]\", \"angular_url\": \"perkenalan-orm-dan-sqlalchemy\", \"title_extended\": \"\", \"numchild\": 0, \"content_type\": 34, \"show_in_menus\": false, \"date\": \"2015-04-07\", \"path\": \"0001000100010007\", \"url_path\": \"/home/blog/perkenalan-orm-dan-sqlalchemy/\", \"expired\": false, \"pk\": 12, \"categories\": \"[{\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Python\\\"}, {\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Software\\\"}]\", \"main_image\": null, \"locked\": false, \"author\": \"Abirafdi Raditya Putra\", \"depth\": 4, \"first_published_at\": \"2015-08-14T02:26:40.339Z\", \"expire_at\": null}", "user": 1, "page": 12}, "model": "wagtailcore.pagerevision", "pk": 57}, {"fields": {"approved_go_live_at": null, "created_at": "2015-08-14T02:37:35.133Z", "submitted_for_moderation": false, "content_json": "{\"search_description\": \"\", \"owner\": 1, \"intro\": \"<p>Kemampuan database merupakan kemampuan fundamental bagi setiap programmer. Bagi orang yang baru mulai belajar database pasti pernah mendengar Object Relational Mapping atau ORM. Pada post ini saya akan menjelaskan apa itu ORM berserta contohnya menggunakan SQLAlchemy</p>\", \"latest_revision_created_at\": \"2015-08-14T02:36:44.836Z\", \"main_background_image\": null, \"go_live_at\": null, \"title\": \"Perkenalan ORM dan SQLAlchemy\", \"seo_title\": \"\", \"slug\": \"perkenalan-orm-dan-sqlalchemy\", \"content\": \"[{\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Kemampuan database merupakan kemampuan fundamental bagi setiap programmer. Bagi orang yang baru mulai belajar database pasti pernah mendengar Object Relational Mapping atau ORM. Sebelum ORM ada, segala aktifitas dan perintah di database harus menggunakan bahasa SQL. Di era modern sekarang, hampir sebagian besar bahasa pemrograman yang digunakan bersifat <i>object oriented</i>, seperti Java, Python dan C++, ORM dibuat agar objek dapat dipetakan atau direlasikan ke suatu record di database, ORM juga mengubah sintaks SQL menjadi sintaks yang bersifat <i>object-oriented.</i>\\\\u00a0 sehingga \\\\u00a0memudahkan programmer dan meningkatkan produktifitas dalam hal menggunakan database karena object sudah terhubung langsung dengan record-record pada database, code readability juga akan meningkat karena sintaks ORM lebih terlihat <i>object-oriented.</i>\\\\u00a0</p><p>Jadi bagaimana sih cara ORM mempermudah kerja programmer? ORM menterjemahkan perintah dari programmer ke dalam bahasa SQL, termasuk mengubah tipe data dari field suatu objek supaya cocok dengan tipe data pada databasenya. ORM ada banyak, masing-masing memiliki kelebihan dan kekurangan, dan semuanya hampir berbentuk suatu library atau module yang kita install sendiri sesuai dengan bahasa pemrograman kita, namun ada juga ORM yang sudah terintegrasi pada suatu framework, contohnya ORM Django. Faktor utama bagus atau tidaknya dari suatu ORM adalah dari segi performa, seperti seberapa cepat suatu ORM dapat melaksanakan query yang kompleks. Perbandingan berbagai ORM Python yang lumayan detail bisa dilihat\\\\u00a0<a href=\\\\\\\"http://www.pythoncentral.io/sqlalchemy-vs-orms/\\\\\\\">disini</a>.\\\\u00a0</p><p>Disini saya akan menggunakan SQLAlchemy sebagai ORM pilihan saya, karena SQLAlchemy adalah ORM yang paling banyak digunakan di Python sehingga lebih mudah googling jika ada kesulitan...</p><p></p><p>Berikut merupakan demonstrasi SQLAlchemy</p>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"Table mahasiswa di database\\\"}, {\\\"type\\\": \\\"raw_html\\\", \\\"value\\\": \\\"<table style=\\\\\\\"border: solid; border-width: 1px;\\\\\\\">\\\\r\\\\n<tbody>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;nama &nbsp;</td>\\\\r\\\\n<td>&nbsp;umur&nbsp;</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Andi</td>\\\\r\\\\n<td>&nbsp;19</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Budi</td>\\\\r\\\\n<td>&nbsp;18</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Agung</td>\\\\r\\\\n<td>&nbsp;14</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Adit</td>\\\\r\\\\n<td>&nbsp;15</td>\\\\r\\\\n</tr>\\\\r\\\\n</tbody>\\\\r\\\\n</table>\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Menggunakan SQL.</p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"SELECT nama\\\\r\\\\nFROM users\\\\r\\\\nWHERE umur > 17;\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Menggunakan ORM SQLAlchemy<br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"query(User).filter(User.nama > 17) \\\"}]\", \"live\": true, \"thumbnail_image\": null, \"has_unpublished_changes\": false, \"related_post\": \"[]\", \"angular_url\": \"perkenalan-orm-dan-sqlalchemy\", \"title_extended\": \"\", \"numchild\": 0, \"content_type\": 34, \"show_in_menus\": false, \"date\": \"2015-04-07\", \"path\": \"0001000100010007\", \"url_path\": \"/home/blog/perkenalan-orm-dan-sqlalchemy/\", \"expired\": false, \"pk\": 12, \"categories\": \"[{\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Python\\\"}, {\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Software\\\"}]\", \"main_image\": null, \"locked\": false, \"author\": \"Abirafdi Raditya Putra\", \"depth\": 4, \"first_published_at\": \"2015-08-14T02:26:40.339Z\", \"expire_at\": null}", "user": 1, "page": 12}, "model": "wagtailcore.pagerevision", "pk": 58}, {"fields": {"approved_go_live_at": null, "created_at": "2015-08-14T02:38:37.547Z", "submitted_for_moderation": false, "content_json": "{\"search_description\": \"\", \"owner\": 1, \"intro\": \"<p>Kemampuan database merupakan kemampuan fundamental bagi setiap programmer. Bagi orang yang baru mulai belajar database pasti pernah mendengar Object Relational Mapping atau ORM. Pada post ini saya akan menjelaskan apa itu ORM berserta contohnya menggunakan SQLAlchemy</p>\", \"latest_revision_created_at\": \"2015-08-14T02:37:35.133Z\", \"main_background_image\": null, \"go_live_at\": null, \"title\": \"Perkenalan ORM dan SQLAlchemy\", \"seo_title\": \"\", \"slug\": \"perkenalan-orm-dan-sqlalchemy\", \"content\": \"[{\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Kemampuan database merupakan kemampuan fundamental bagi setiap programmer. Bagi orang yang baru mulai belajar database pasti pernah mendengar Object Relational Mapping atau ORM. Sebelum ORM ada, segala aktifitas dan perintah di database harus menggunakan bahasa SQL. Di era modern sekarang, hampir sebagian besar bahasa pemrograman yang digunakan bersifat <i>object oriented</i>, seperti Java, Python dan C++, ORM dibuat agar objek dapat dipetakan atau direlasikan ke suatu record di database, ORM juga mengubah sintaks SQL menjadi sintaks yang bersifat <i>object-oriented.</i>\\\\u00a0 sehingga \\\\u00a0memudahkan programmer dan meningkatkan produktifitas dalam hal menggunakan database karena object sudah terhubung langsung dengan record-record pada database, code readability juga akan meningkat karena sintaks ORM lebih terlihat <i>object-oriented.</i>\\\\u00a0</p><p>Jadi bagaimana sih cara ORM mempermudah kerja programmer? ORM menterjemahkan perintah dari programmer ke dalam bahasa SQL, termasuk mengubah tipe data dari field suatu objek supaya cocok dengan tipe data pada databasenya. ORM ada banyak, masing-masing memiliki kelebihan dan kekurangan, dan semuanya hampir berbentuk suatu library atau module yang kita install sendiri sesuai dengan bahasa pemrograman kita, namun ada juga ORM yang sudah terintegrasi pada suatu framework, contohnya ORM Django. Faktor utama bagus atau tidaknya dari suatu ORM adalah dari segi performa, seperti seberapa cepat suatu ORM dapat melaksanakan query yang kompleks. Perbandingan berbagai ORM Python yang lumayan detail bisa dilihat\\\\u00a0<a href=\\\\\\\"http://www.pythoncentral.io/sqlalchemy-vs-orms/\\\\\\\">disini</a>.\\\\u00a0</p><p>Disini saya akan menggunakan SQLAlchemy sebagai ORM pilihan saya, karena SQLAlchemy adalah ORM yang paling banyak digunakan di Python sehingga lebih mudah googling jika ada kesulitan...</p><p></p><p>Berikut merupakan demonstrasi SQLAlchemy</p>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"Table mahasiswa di database\\\"}, {\\\"type\\\": \\\"raw_html\\\", \\\"value\\\": \\\"<table>\\\\r\\\\n<tbody>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;nama &nbsp;</td>\\\\r\\\\n<td>&nbsp;umur&nbsp;</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Andi</td>\\\\r\\\\n<td>&nbsp;19</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Budi</td>\\\\r\\\\n<td>&nbsp;18</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Agung</td>\\\\r\\\\n<td>&nbsp;14</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Adit</td>\\\\r\\\\n<td>&nbsp;15</td>\\\\r\\\\n</tr>\\\\r\\\\n</tbody>\\\\r\\\\n</table>\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Menggunakan SQL.</p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"SELECT nama\\\\r\\\\nFROM users\\\\r\\\\nWHERE umur > 17;\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Menggunakan ORM SQLAlchemy<br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"query(User).filter(User.nama > 17) \\\"}]\", \"live\": true, \"thumbnail_image\": null, \"has_unpublished_changes\": false, \"related_post\": \"[]\", \"angular_url\": \"perkenalan-orm-dan-sqlalchemy\", \"title_extended\": \"\", \"numchild\": 0, \"content_type\": 34, \"show_in_menus\": false, \"date\": \"2015-04-07\", \"path\": \"0001000100010007\", \"url_path\": \"/home/blog/perkenalan-orm-dan-sqlalchemy/\", \"expired\": false, \"pk\": 12, \"categories\": \"[{\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Python\\\"}, {\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Software\\\"}]\", \"main_image\": null, \"locked\": false, \"author\": \"Abirafdi Raditya Putra\", \"depth\": 4, \"first_published_at\": \"2015-08-14T02:26:40.339Z\", \"expire_at\": null}", "user": 1, "page": 12}, "model": "wagtailcore.pagerevision", "pk": 59}, {"fields": {"approved_go_live_at": null, "created_at": "2015-08-14T02:40:03.265Z", "submitted_for_moderation": false, "content_json": "{\"search_description\": \"\", \"owner\": 1, \"intro\": \"<p>Kemampuan database merupakan kemampuan fundamental bagi setiap programmer. Bagi orang yang baru mulai belajar database pasti pernah mendengar Object Relational Mapping atau ORM. Pada post ini saya akan menjelaskan apa itu ORM berserta contohnya menggunakan SQLAlchemy</p>\", \"latest_revision_created_at\": \"2015-08-14T02:38:37.547Z\", \"main_background_image\": null, \"go_live_at\": null, \"title\": \"Perkenalan ORM dan SQLAlchemy\", \"seo_title\": \"\", \"slug\": \"perkenalan-orm-dan-sqlalchemy\", \"content\": \"[{\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Kemampuan database merupakan kemampuan fundamental bagi setiap programmer. Bagi orang yang baru mulai belajar database pasti pernah mendengar Object Relational Mapping atau ORM. Sebelum ORM ada, segala aktifitas dan perintah di database harus menggunakan bahasa SQL. Di era modern sekarang, hampir sebagian besar bahasa pemrograman yang digunakan bersifat <i>object oriented</i>, seperti Java, Python dan C++, ORM dibuat agar objek dapat dipetakan atau direlasikan ke suatu record di database, ORM juga mengubah sintaks SQL menjadi sintaks yang bersifat <i>object-oriented.</i>\\\\u00a0 sehingga \\\\u00a0memudahkan programmer dan meningkatkan produktifitas dalam hal menggunakan database karena object sudah terhubung langsung dengan record-record pada database, code readability juga akan meningkat karena sintaks ORM lebih terlihat <i>object-oriented.</i>\\\\u00a0</p><p>Jadi bagaimana sih cara ORM mempermudah kerja programmer? ORM menterjemahkan perintah dari programmer ke dalam bahasa SQL, termasuk mengubah tipe data dari field suatu objek supaya cocok dengan tipe data pada databasenya. ORM ada banyak, masing-masing memiliki kelebihan dan kekurangan, dan semuanya hampir berbentuk suatu library atau module yang kita install sendiri sesuai dengan bahasa pemrograman kita, namun ada juga ORM yang sudah terintegrasi pada suatu framework, contohnya ORM Django. Faktor utama bagus atau tidaknya dari suatu ORM adalah dari segi performa, seperti seberapa cepat suatu ORM dapat melaksanakan query yang kompleks. Perbandingan berbagai ORM Python yang lumayan detail bisa dilihat\\\\u00a0<a href=\\\\\\\"http://www.pythoncentral.io/sqlalchemy-vs-orms/\\\\\\\">disini</a>.\\\\u00a0</p><p>Disini saya akan menggunakan SQLAlchemy sebagai ORM pilihan saya, karena SQLAlchemy adalah ORM yang paling banyak digunakan di Python sehingga lebih mudah googling jika ada kesulitan...</p><p></p><p>Berikut merupakan demonstrasi SQLAlchemy</p>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"Table mahasiswa di database\\\"}, {\\\"type\\\": \\\"raw_html\\\", \\\"value\\\": \\\"<table>\\\\r\\\\n<tbody>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;nama &nbsp;</td>\\\\r\\\\n<td>&nbsp;umur&nbsp;</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Andi</td>\\\\r\\\\n<td>&nbsp;19</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Budi</td>\\\\r\\\\n<td>&nbsp;18</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Agung</td>\\\\r\\\\n<td>&nbsp;14</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Adit</td>\\\\r\\\\n<td>&nbsp;15</td>\\\\r\\\\n</tr>\\\\r\\\\n</tbody>\\\\r\\\\n</table>\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p><br/></p><p>Menggunakan SQL.</p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"SELECT nama\\\\r\\\\nFROM users\\\\r\\\\nWHERE umur > 17;\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Menggunakan ORM SQLAlchemy<br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"query(User).filter(User.nama > 17) \\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p><br/></p><p>ORM akan otomatis menterjemahkan statement python ke dalam bahasa SQL sehingga kedua perintah diatas akan menghasilkan hasil yang sama yaitu<br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"Andi\\\\r\\\\nBudi\\\"}]\", \"live\": true, \"thumbnail_image\": null, \"has_unpublished_changes\": false, \"related_post\": \"[]\", \"angular_url\": \"perkenalan-orm-dan-sqlalchemy\", \"title_extended\": \"\", \"numchild\": 0, \"content_type\": 34, \"show_in_menus\": false, \"date\": \"2015-04-07\", \"path\": \"0001000100010007\", \"url_path\": \"/home/blog/perkenalan-orm-dan-sqlalchemy/\", \"expired\": false, \"pk\": 12, \"categories\": \"[{\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Python\\\"}, {\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Software\\\"}]\", \"main_image\": null, \"locked\": false, \"author\": \"Abirafdi Raditya Putra\", \"depth\": 4, \"first_published_at\": \"2015-08-14T02:26:40.339Z\", \"expire_at\": null}", "user": 1, "page": 12}, "model": "wagtailcore.pagerevision", "pk": 60}, {"fields": {"approved_go_live_at": null, "created_at": "2015-08-14T02:43:12.305Z", "submitted_for_moderation": false, "content_json": "{\"search_description\": \"\", \"owner\": 1, \"intro\": \"<p>Kemampuan database merupakan kemampuan fundamental bagi setiap programmer. Bagi orang yang baru mulai belajar database pasti pernah mendengar Object Relational Mapping atau ORM. Pada post ini saya akan menjelaskan apa itu ORM berserta contohnya menggunakan SQLAlchemy</p>\", \"latest_revision_created_at\": \"2015-08-14T02:40:03.265Z\", \"main_background_image\": null, \"go_live_at\": null, \"title\": \"Perkenalan ORM dan SQLAlchemy\", \"seo_title\": \"\", \"slug\": \"perkenalan-orm-dan-sqlalchemy\", \"content\": \"[{\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Kemampuan database merupakan kemampuan fundamental bagi setiap programmer. Bagi orang yang baru mulai belajar database pasti pernah mendengar Object Relational Mapping atau ORM. Sebelum ORM ada, segala aktifitas dan perintah di database harus menggunakan bahasa SQL. Di era modern sekarang, hampir sebagian besar bahasa pemrograman yang digunakan bersifat <i>object oriented</i>, seperti Java, Python dan C++, ORM dibuat agar objek dapat dipetakan atau direlasikan ke suatu record di database, ORM juga mengubah sintaks SQL menjadi sintaks yang bersifat <i>object-oriented.</i>\\\\u00a0 sehingga \\\\u00a0memudahkan programmer dan meningkatkan produktifitas dalam hal menggunakan database karena object sudah terhubung langsung dengan record-record pada database, code readability juga akan meningkat karena sintaks ORM lebih terlihat <i>object-oriented.</i>\\\\u00a0</p><p>Jadi bagaimana sih cara ORM mempermudah kerja programmer? ORM menterjemahkan perintah dari programmer ke dalam bahasa SQL, termasuk mengubah tipe data dari field suatu objek supaya cocok dengan tipe data pada databasenya. ORM ada banyak, masing-masing memiliki kelebihan dan kekurangan, dan semuanya hampir berbentuk suatu library atau module yang kita install sendiri sesuai dengan bahasa pemrograman kita, namun ada juga ORM yang sudah terintegrasi pada suatu framework, contohnya ORM Django. Faktor utama bagus atau tidaknya dari suatu ORM adalah dari segi performa, seperti seberapa cepat suatu ORM dapat melaksanakan query yang kompleks. Perbandingan berbagai ORM Python yang lumayan detail bisa dilihat\\\\u00a0<a href=\\\\\\\"http://www.pythoncentral.io/sqlalchemy-vs-orms/\\\\\\\">disini</a>.\\\\u00a0</p><p>Disini saya akan menggunakan SQLAlchemy sebagai ORM pilihan saya, karena SQLAlchemy adalah ORM yang paling banyak digunakan di Python sehingga lebih mudah googling jika ada kesulitan...</p><p></p><p>Berikut merupakan demonstrasi SQLAlchemy</p>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"table users\\\"}, {\\\"type\\\": \\\"raw_html\\\", \\\"value\\\": \\\"<table>\\\\r\\\\n<tbody>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;nama &nbsp;</td>\\\\r\\\\n<td>&nbsp;umur&nbsp;</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Andi</td>\\\\r\\\\n<td>&nbsp;19</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Budi</td>\\\\r\\\\n<td>&nbsp;18</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Agung</td>\\\\r\\\\n<td>&nbsp;14</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Adit</td>\\\\r\\\\n<td>&nbsp;15</td>\\\\r\\\\n</tr>\\\\r\\\\n</tbody>\\\\r\\\\n</table>\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p><br/></p><p>Menggunakan SQL.</p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"SELECT nama\\\\r\\\\nFROM users\\\\r\\\\nWHERE umur > 17;\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Menggunakan ORM SQLAlchemy<br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"query(User).filter(User.nama > 17) \\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p><br/></p><p>ORM akan otomatis menterjemahkan statement python ke dalam bahasa SQL sehingga kedua perintah diatas akan menghasilkan hasil yang sama yaitu<br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"Andi\\\\r\\\\nBudi\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p><br/></p><p>Berikutnya saya akan memberi demonstrasi sederhana pengunaan SQLAlchemy yang dikombinasikan dengan sqlite, karena sqlite sudah disupport python out-of-the-box jadi tidak perlu meng-install modules lain.\\\\u00a0pertama kita install dulu SQLAlchemy, ketik command berikut di command-line.<br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"pip install sqlalchemy\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p><br/></p><p>Saya akan coba membuat database yang memiliki tabel daftarNilai. Kembali lagi ke arti ORM, yaitu\\\\u00a0<em>Object\\\\u00a0</em>Relational Mapper, table yang kita inginkan nanti otomatis terbuat sesuai dengan class/objek yang kita definisikan. Kita namakan file py kita models, karena disinilah bagamaina definisi database kita akan diatur, jika kalau nanti ada perubahan database, kita tinggal mengedit models.py ini.<br/></p>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"models.py\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"from sqlalchemy.ext.declarative import declarative_base\\\\r\\\\nfrom sqlalchemy import Column, Integer, String\\\\r\\\\n#Kita harus import setiap tipe data yang ingin kita gunakan\\\\r\\\\nfrom sqlalchemy import create_engine\\\\r\\\\n\\\\r\\\\nBase = declarative_base()\\\\r\\\\n#setiap class yang akan dipetakan harus inherit dari instance declarative_base\\\\r\\\\n\\\\r\\\\nclass DaftarNilai(Base): #inherit from Base\\\\r\\\\n    __tablename__ = 'daftarNilai'    \\\\r\\\\n    #tablename disini hanyalah sebagai metadata\\\\r\\\\n\\\\r\\\\n    nama = Column(String(50), nullable=False, primary_key=True)\\\\r\\\\n    #membuat kolom nama dengan tipe data\\\\r\\\\n    #String maksimal panjang 50 karakter   \\\\r\\\\n    #dan tidak boleh Null   \\\\r\\\\n    nilai = Column(Integer, nullable=False)   \\\\r\\\\n\\\\r\\\\nengine = create_engine('sqlite:///latihan.db') \\\\r\\\\n#menyiapkan connector/engine sqlite\\\\r\\\\n\\\\r\\\\nBase.metadata.create_all(engine) \\\\r\\\\n#menjalankan perintah pemetaan/membuat database\\\"}]\", \"live\": true, \"thumbnail_image\": null, \"has_unpublished_changes\": false, \"related_post\": \"[]\", \"angular_url\": \"perkenalan-orm-dan-sqlalchemy\", \"title_extended\": \"\", \"numchild\": 0, \"content_type\": 34, \"show_in_menus\": false, \"date\": \"2015-04-07\", \"path\": \"0001000100010007\", \"url_path\": \"/home/blog/perkenalan-orm-dan-sqlalchemy/\", \"expired\": false, \"pk\": 12, \"categories\": \"[{\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Python\\\"}, {\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Software\\\"}]\", \"main_image\": null, \"locked\": false, \"author\": \"Abirafdi Raditya Putra\", \"depth\": 4, \"first_published_at\": \"2015-08-14T02:26:40.339Z\", \"expire_at\": null}", "user": 1, "page": 12}, "model": "wagtailcore.pagerevision", "pk": 61}, {"fields": {"approved_go_live_at": null, "created_at": "2015-08-14T02:44:01.323Z", "submitted_for_moderation": false, "content_json": "{\"search_description\": \"\", \"owner\": 1, \"intro\": \"<p>Kemampuan database merupakan kemampuan fundamental bagi setiap programmer. Bagi orang yang baru mulai belajar database pasti pernah mendengar Object Relational Mapping atau ORM. Pada post ini saya akan menjelaskan apa itu ORM berserta contohnya menggunakan SQLAlchemy</p>\", \"latest_revision_created_at\": \"2015-08-14T02:43:12.305Z\", \"main_background_image\": null, \"go_live_at\": null, \"title\": \"Perkenalan ORM dan SQLAlchemy\", \"seo_title\": \"\", \"slug\": \"perkenalan-orm-dan-sqlalchemy\", \"content\": \"[{\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Kemampuan database merupakan kemampuan fundamental bagi setiap programmer. Bagi orang yang baru mulai belajar database pasti pernah mendengar Object Relational Mapping atau ORM. Sebelum ORM ada, segala aktifitas dan perintah di database harus menggunakan bahasa SQL. Di era modern sekarang, hampir sebagian besar bahasa pemrograman yang digunakan bersifat <i>object oriented</i>, seperti Java, Python dan C++, ORM dibuat agar objek dapat dipetakan atau direlasikan ke suatu record di database, ORM juga mengubah sintaks SQL menjadi sintaks yang bersifat <i>object-oriented.</i>\\\\u00a0 sehingga \\\\u00a0memudahkan programmer dan meningkatkan produktifitas dalam hal menggunakan database karena object sudah terhubung langsung dengan record-record pada database, code readability juga akan meningkat karena sintaks ORM lebih terlihat <i>object-oriented.</i>\\\\u00a0</p><p>Jadi bagaimana sih cara ORM mempermudah kerja programmer? ORM menterjemahkan perintah dari programmer ke dalam bahasa SQL, termasuk mengubah tipe data dari field suatu objek supaya cocok dengan tipe data pada databasenya. ORM ada banyak, masing-masing memiliki kelebihan dan kekurangan, dan semuanya hampir berbentuk suatu library atau module yang kita install sendiri sesuai dengan bahasa pemrograman kita, namun ada juga ORM yang sudah terintegrasi pada suatu framework, contohnya ORM Django. Faktor utama bagus atau tidaknya dari suatu ORM adalah dari segi performa, seperti seberapa cepat suatu ORM dapat melaksanakan query yang kompleks. Perbandingan berbagai ORM Python yang lumayan detail bisa dilihat\\\\u00a0<a href=\\\\\\\"http://www.pythoncentral.io/sqlalchemy-vs-orms/\\\\\\\">disini</a>.\\\\u00a0</p><p>Disini saya akan menggunakan SQLAlchemy sebagai ORM pilihan saya, karena SQLAlchemy adalah ORM yang paling banyak digunakan di Python sehingga lebih mudah googling jika ada kesulitan...</p><p></p><p>Berikut merupakan demonstrasi SQLAlchemy</p>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"table users\\\"}, {\\\"type\\\": \\\"raw_html\\\", \\\"value\\\": \\\"<table>\\\\r\\\\n<tbody>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;nama &nbsp;</td>\\\\r\\\\n<td>&nbsp;umur&nbsp;</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Andi</td>\\\\r\\\\n<td>&nbsp;19</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Budi</td>\\\\r\\\\n<td>&nbsp;18</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Agung</td>\\\\r\\\\n<td>&nbsp;14</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Adit</td>\\\\r\\\\n<td>&nbsp;15</td>\\\\r\\\\n</tr>\\\\r\\\\n</tbody>\\\\r\\\\n</table>\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p><br/></p><p>Menggunakan SQL.</p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"SELECT nama\\\\r\\\\nFROM users\\\\r\\\\nWHERE umur > 17;\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Menggunakan ORM SQLAlchemy<br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"query(User).filter(User.nama > 17) \\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p><br/></p><p>ORM akan otomatis menterjemahkan statement python ke dalam bahasa SQL sehingga kedua perintah diatas akan menghasilkan hasil yang sama yaitu<br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"Andi\\\\r\\\\nBudi\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p><br/></p><p>Berikutnya saya akan memberi demonstrasi sederhana pengunaan SQLAlchemy yang dikombinasikan dengan sqlite, karena sqlite sudah disupport python out-of-the-box jadi tidak perlu meng-install modules lain.\\\\u00a0pertama kita install dulu SQLAlchemy, ketik command berikut di command-line.<br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"pip install sqlalchemy\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p><br/></p><p>Saya akan coba membuat database yang memiliki tabel daftarNilai. Kembali lagi ke arti ORM, yaitu\\\\u00a0<em>Object\\\\u00a0</em>Relational Mapper, table yang kita inginkan nanti otomatis terbuat sesuai dengan class/objek yang kita definisikan. Kita namakan file py kita models, karena disinilah bagamaina definisi database kita akan diatur, jika kalau nanti ada perubahan database, kita tinggal mengedit models.py ini.<br/></p>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"models.py\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"from sqlalchemy.ext.declarative import declarative_base\\\\r\\\\nfrom sqlalchemy import Column, Integer, String\\\\r\\\\n# Kita harus import setiap tipe data yang ingin kita gunakan\\\\r\\\\nfrom sqlalchemy import create_engine\\\\r\\\\n\\\\r\\\\nBase = declarative_base()\\\\r\\\\n# setiap class yang akan dipetakan harus inherit dari instance declarative_base\\\\r\\\\n\\\\r\\\\nclass DaftarNilai(Base): #inherit from Base\\\\r\\\\n    __tablename__ = 'daftarNilai'    \\\\r\\\\n    # tablename disini hanyalah sebagai metadata\\\\r\\\\n\\\\r\\\\n    nama = Column(String(50), nullable=False, primary_key=True)\\\\r\\\\n    # membuat kolom nama dengan tipe data\\\\r\\\\n    # String maksimal panjang 50 karakter   \\\\r\\\\n    # dan tidak boleh Null   \\\\r\\\\n    nilai = Column(Integer, nullable=False)   \\\\r\\\\n\\\\r\\\\nengine = create_engine('sqlite:///latihan.db') \\\\r\\\\n# menyiapkan connector/engine sqlite\\\\r\\\\n\\\\r\\\\nBase.metadata.create_all(engine) \\\\r\\\\n# menjalankan perintah pemetaan/membuat database\\\"}]\", \"live\": true, \"thumbnail_image\": null, \"has_unpublished_changes\": false, \"related_post\": \"[]\", \"angular_url\": \"perkenalan-orm-dan-sqlalchemy\", \"title_extended\": \"\", \"numchild\": 0, \"content_type\": 34, \"show_in_menus\": false, \"date\": \"2015-04-07\", \"path\": \"0001000100010007\", \"url_path\": \"/home/blog/perkenalan-orm-dan-sqlalchemy/\", \"expired\": false, \"pk\": 12, \"categories\": \"[{\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Python\\\"}, {\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Software\\\"}]\", \"main_image\": null, \"locked\": false, \"author\": \"Abirafdi Raditya Putra\", \"depth\": 4, \"first_published_at\": \"2015-08-14T02:26:40.339Z\", \"expire_at\": null}", "user": 1, "page": 12}, "model": "wagtailcore.pagerevision", "pk": 62}, {"fields": {"approved_go_live_at": null, "created_at": "2015-08-14T02:45:06.753Z", "submitted_for_moderation": false, "content_json": "{\"search_description\": \"\", \"owner\": 1, \"intro\": \"<p>Kemampuan database merupakan kemampuan fundamental bagi setiap programmer. Bagi orang yang baru mulai belajar database pasti pernah mendengar Object Relational Mapping atau ORM. Pada post ini saya akan menjelaskan apa itu ORM berserta contohnya menggunakan SQLAlchemy</p>\", \"latest_revision_created_at\": \"2015-08-14T02:44:01.323Z\", \"main_background_image\": null, \"go_live_at\": null, \"title\": \"Perkenalan ORM dan SQLAlchemy\", \"seo_title\": \"\", \"slug\": \"perkenalan-orm-dan-sqlalchemy\", \"content\": \"[{\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Kemampuan database merupakan kemampuan fundamental bagi setiap programmer. Bagi orang yang baru mulai belajar database pasti pernah mendengar Object Relational Mapping atau ORM. Sebelum ORM ada, segala aktifitas dan perintah di database harus menggunakan bahasa SQL. Di era modern sekarang, hampir sebagian besar bahasa pemrograman yang digunakan bersifat <i>object oriented</i>, seperti Java, Python dan C++, ORM dibuat agar objek dapat dipetakan atau direlasikan ke suatu record di database, ORM juga mengubah sintaks SQL menjadi sintaks yang bersifat <i>object-oriented.</i>\\\\u00a0 sehingga \\\\u00a0memudahkan programmer dan meningkatkan produktifitas dalam hal menggunakan database karena object sudah terhubung langsung dengan record-record pada database, code readability juga akan meningkat karena sintaks ORM lebih terlihat <i>object-oriented.</i>\\\\u00a0</p><p>Jadi bagaimana sih cara ORM mempermudah kerja programmer? ORM menterjemahkan perintah dari programmer ke dalam bahasa SQL, termasuk mengubah tipe data dari field suatu objek supaya cocok dengan tipe data pada databasenya. ORM ada banyak, masing-masing memiliki kelebihan dan kekurangan, dan semuanya hampir berbentuk suatu library atau module yang kita install sendiri sesuai dengan bahasa pemrograman kita, namun ada juga ORM yang sudah terintegrasi pada suatu framework, contohnya ORM Django. Faktor utama bagus atau tidaknya dari suatu ORM adalah dari segi performa, seperti seberapa cepat suatu ORM dapat melaksanakan query yang kompleks. Perbandingan berbagai ORM Python yang lumayan detail bisa dilihat\\\\u00a0<a href=\\\\\\\"http://www.pythoncentral.io/sqlalchemy-vs-orms/\\\\\\\">disini</a>.\\\\u00a0</p><p>Disini saya akan menggunakan SQLAlchemy sebagai ORM pilihan saya, karena SQLAlchemy adalah ORM yang paling banyak digunakan di Python sehingga lebih mudah googling jika ada kesulitan...</p><p></p><p>Berikut merupakan demonstrasi SQLAlchemy</p>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"table users\\\"}, {\\\"type\\\": \\\"raw_html\\\", \\\"value\\\": \\\"<table>\\\\r\\\\n<tbody>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;nama &nbsp;</td>\\\\r\\\\n<td>&nbsp;umur&nbsp;</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Andi</td>\\\\r\\\\n<td>&nbsp;19</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Budi</td>\\\\r\\\\n<td>&nbsp;18</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Agung</td>\\\\r\\\\n<td>&nbsp;14</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Adit</td>\\\\r\\\\n<td>&nbsp;15</td>\\\\r\\\\n</tr>\\\\r\\\\n</tbody>\\\\r\\\\n</table>\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p><br/></p><p>Menggunakan SQL.</p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"SELECT nama\\\\r\\\\nFROM users\\\\r\\\\nWHERE umur > 17;\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Menggunakan ORM SQLAlchemy<br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"query(User).filter(User.nama > 17) \\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p><br/></p><p>ORM akan otomatis menterjemahkan statement python ke dalam bahasa SQL sehingga kedua perintah diatas akan menghasilkan hasil yang sama yaitu<br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"Andi\\\\r\\\\nBudi\\\"}, {\\\"type\\\": \\\"subheading\\\", \\\"value\\\": \\\"Demonstrasi\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p><br/></p><p>Berikutnya saya akan memberi demonstrasi sederhana pengunaan SQLAlchemy yang dikombinasikan dengan sqlite, karena sqlite sudah disupport python out-of-the-box jadi tidak perlu meng-install modules lain.\\\\u00a0pertama kita install dulu SQLAlchemy, ketik command berikut di command-line.<br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"pip install sqlalchemy\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p><br/></p><p>Saya akan coba membuat database yang memiliki tabel daftarNilai. Kembali lagi ke arti ORM, yaitu\\\\u00a0<em>Object\\\\u00a0</em>Relational Mapper, table yang kita inginkan nanti otomatis terbuat sesuai dengan class/objek yang kita definisikan. Kita namakan file py kita models, karena disinilah bagamaina definisi database kita akan diatur, jika kalau nanti ada perubahan database, kita tinggal mengedit models.py ini.<br/></p>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"models.py\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"from sqlalchemy.ext.declarative import declarative_base\\\\r\\\\nfrom sqlalchemy import Column, Integer, String\\\\r\\\\n# Kita harus import setiap tipe data yang ingin kita gunakan\\\\r\\\\nfrom sqlalchemy import create_engine\\\\r\\\\n\\\\r\\\\nBase = declarative_base()\\\\r\\\\n# setiap class yang akan dipetakan harus inherit dari instance declarative_base\\\\r\\\\n\\\\r\\\\nclass DaftarNilai(Base): #inherit from Base\\\\r\\\\n    __tablename__ = 'daftarNilai'    \\\\r\\\\n    # tablename disini hanyalah sebagai metadata\\\\r\\\\n\\\\r\\\\n    nama = Column(String(50), nullable=False, primary_key=True)\\\\r\\\\n    # membuat kolom nama dengan tipe data\\\\r\\\\n    # String maksimal panjang 50 karakter   \\\\r\\\\n    # dan tidak boleh Null   \\\\r\\\\n    nilai = Column(Integer, nullable=False)   \\\\r\\\\n\\\\r\\\\nengine = create_engine('sqlite:///latihan.db') \\\\r\\\\n# menyiapkan connector/engine sqlite\\\\r\\\\n\\\\r\\\\nBase.metadata.create_all(engine) \\\\r\\\\n# menjalankan perintah pemetaan/membuat database\\\"}]\", \"live\": true, \"thumbnail_image\": null, \"has_unpublished_changes\": false, \"related_post\": \"[]\", \"angular_url\": \"perkenalan-orm-dan-sqlalchemy\", \"title_extended\": \"\", \"numchild\": 0, \"content_type\": 34, \"show_in_menus\": false, \"date\": \"2015-04-07\", \"path\": \"0001000100010007\", \"url_path\": \"/home/blog/perkenalan-orm-dan-sqlalchemy/\", \"expired\": false, \"pk\": 12, \"categories\": \"[{\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Python\\\"}, {\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Software\\\"}]\", \"main_image\": null, \"locked\": false, \"author\": \"Abirafdi Raditya Putra\", \"depth\": 4, \"first_published_at\": \"2015-08-14T02:26:40.339Z\", \"expire_at\": null}", "user": 1, "page": 12}, "model": "wagtailcore.pagerevision", "pk": 63}, {"fields": {"approved_go_live_at": null, "created_at": "2015-08-14T02:46:31.743Z", "submitted_for_moderation": false, "content_json": "{\"search_description\": \"\", \"owner\": 1, \"intro\": \"<p>Kemampuan database merupakan kemampuan fundamental bagi setiap programmer. Bagi orang yang baru mulai belajar database pasti pernah mendengar Object Relational Mapping atau ORM. Pada post ini saya akan menjelaskan apa itu ORM berserta contohnya menggunakan SQLAlchemy</p>\", \"latest_revision_created_at\": \"2015-08-14T02:45:06.753Z\", \"main_background_image\": null, \"go_live_at\": null, \"title\": \"Perkenalan ORM dan SQLAlchemy\", \"seo_title\": \"\", \"slug\": \"perkenalan-orm-dan-sqlalchemy\", \"content\": \"[{\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Kemampuan database merupakan kemampuan fundamental bagi setiap programmer. Bagi orang yang baru mulai belajar database pasti pernah mendengar Object Relational Mapping atau ORM. Sebelum ORM ada, segala aktifitas dan perintah di database harus menggunakan bahasa SQL. Di era modern sekarang, hampir sebagian besar bahasa pemrograman yang digunakan bersifat <i>object oriented</i>, seperti Java, Python dan C++, ORM dibuat agar objek dapat dipetakan atau direlasikan ke suatu record di database, ORM juga mengubah sintaks SQL menjadi sintaks yang bersifat <i>object-oriented.</i>\\\\u00a0 sehingga \\\\u00a0memudahkan programmer dan meningkatkan produktifitas dalam hal menggunakan database karena object sudah terhubung langsung dengan record-record pada database, code readability juga akan meningkat karena sintaks ORM lebih terlihat <i>object-oriented.</i>\\\\u00a0</p><p>Jadi bagaimana sih cara ORM mempermudah kerja programmer? ORM menterjemahkan perintah dari programmer ke dalam bahasa SQL, termasuk mengubah tipe data dari field suatu objek supaya cocok dengan tipe data pada databasenya. ORM ada banyak, masing-masing memiliki kelebihan dan kekurangan, dan semuanya hampir berbentuk suatu library atau module yang kita install sendiri sesuai dengan bahasa pemrograman kita, namun ada juga ORM yang sudah terintegrasi pada suatu framework, contohnya ORM Django. Faktor utama bagus atau tidaknya dari suatu ORM adalah dari segi performa, seperti seberapa cepat suatu ORM dapat melaksanakan query yang kompleks. Perbandingan berbagai ORM Python yang lumayan detail bisa dilihat\\\\u00a0<a href=\\\\\\\"http://www.pythoncentral.io/sqlalchemy-vs-orms/\\\\\\\">disini</a>.\\\\u00a0</p><p>Disini saya akan menggunakan SQLAlchemy sebagai ORM pilihan saya, karena SQLAlchemy adalah ORM yang paling banyak digunakan di Python sehingga lebih mudah googling jika ada kesulitan...</p><p></p><p>Berikut merupakan demonstrasi SQLAlchemy</p>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"table users\\\"}, {\\\"type\\\": \\\"raw_html\\\", \\\"value\\\": \\\"<table>\\\\r\\\\n<tbody>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;nama &nbsp;</td>\\\\r\\\\n<td>&nbsp;umur&nbsp;</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Andi</td>\\\\r\\\\n<td>&nbsp;19</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Budi</td>\\\\r\\\\n<td>&nbsp;18</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Agung</td>\\\\r\\\\n<td>&nbsp;14</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Adit</td>\\\\r\\\\n<td>&nbsp;15</td>\\\\r\\\\n</tr>\\\\r\\\\n</tbody>\\\\r\\\\n</table>\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p><br/></p><p>Menggunakan SQL.</p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"SELECT nama\\\\r\\\\nFROM users\\\\r\\\\nWHERE umur > 17;\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Menggunakan ORM SQLAlchemy<br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"query(User).filter(User.nama > 17) \\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p><br/></p><p>ORM akan otomatis menterjemahkan statement python ke dalam bahasa SQL sehingga kedua perintah diatas akan menghasilkan hasil yang sama yaitu<br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"Andi\\\\r\\\\nBudi\\\"}, {\\\"type\\\": \\\"subheading\\\", \\\"value\\\": \\\"Demonstrasi\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Berikutnya saya akan memberi demonstrasi sederhana pengunaan SQLAlchemy yang dikombinasikan dengan sqlite, karena sqlite sudah disupport python out-of-the-box jadi tidak perlu meng-install modules lain.\\\\u00a0pertama kita install dulu SQLAlchemy, ketik command berikut di command-line.<br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"pip install sqlalchemy\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p><br/></p><p>Saya akan coba membuat database yang memiliki tabel daftarNilai. Kembali lagi ke arti ORM, yaitu\\\\u00a0<em>Object\\\\u00a0</em>Relational Mapper, table yang kita inginkan nanti otomatis terbuat sesuai dengan class/objek yang kita definisikan. Kita namakan file py kita models, karena disinilah bagamaina definisi database kita akan diatur, jika kalau nanti ada perubahan database, kita tinggal mengedit models.py ini.<br/></p>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"models.py\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"from sqlalchemy.ext.declarative import declarative_base\\\\r\\\\nfrom sqlalchemy import Column, Integer, String\\\\r\\\\n# Kita harus import setiap tipe data yang ingin kita gunakan\\\\r\\\\nfrom sqlalchemy import create_engine\\\\r\\\\n\\\\r\\\\nBase = declarative_base()\\\\r\\\\n# setiap class yang akan dipetakan harus inherit dari instance declarative_base\\\\r\\\\n\\\\r\\\\nclass DaftarNilai(Base): #inherit from Base\\\\r\\\\n    __tablename__ = 'daftarNilai'    \\\\r\\\\n    # tablename disini hanyalah sebagai metadata\\\\r\\\\n\\\\r\\\\n    nama = Column(String(50), nullable=False, primary_key=True)\\\\r\\\\n    # membuat kolom nama dengan tipe data\\\\r\\\\n    # String maksimal panjang 50 karakter   \\\\r\\\\n    # dan tidak boleh Null   \\\\r\\\\n    nilai = Column(Integer, nullable=False)   \\\\r\\\\n\\\\r\\\\nengine = create_engine('sqlite:///latihan.db') \\\\r\\\\n# menyiapkan connector/engine sqlite\\\\r\\\\n\\\\r\\\\nBase.metadata.create_all(engine) \\\\r\\\\n# menjalankan perintah pemetaan/membuat database\\\"}]\", \"live\": true, \"thumbnail_image\": null, \"has_unpublished_changes\": false, \"related_post\": \"[]\", \"angular_url\": \"perkenalan-orm-dan-sqlalchemy\", \"title_extended\": \"\", \"numchild\": 0, \"content_type\": 34, \"show_in_menus\": false, \"date\": \"2015-04-07\", \"path\": \"0001000100010007\", \"url_path\": \"/home/blog/perkenalan-orm-dan-sqlalchemy/\", \"expired\": false, \"pk\": 12, \"categories\": \"[{\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Python\\\"}, {\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Software\\\"}]\", \"main_image\": null, \"locked\": false, \"author\": \"Abirafdi Raditya Putra\", \"depth\": 4, \"first_published_at\": \"2015-08-14T02:26:40.339Z\", \"expire_at\": null}", "user": 1, "page": 12}, "model": "wagtailcore.pagerevision", "pk": 64}, {"fields": {"approved_go_live_at": null, "created_at": "2015-08-14T02:47:50.678Z", "submitted_for_moderation": false, "content_json": "{\"search_description\": \"\", \"owner\": 1, \"intro\": \"<p>Kemampuan database merupakan kemampuan fundamental bagi setiap programmer. Bagi orang yang baru mulai belajar database pasti pernah mendengar Object Relational Mapping atau ORM. Pada post ini saya akan menjelaskan apa itu ORM berserta contohnya menggunakan SQLAlchemy</p>\", \"latest_revision_created_at\": \"2015-08-14T02:46:31.743Z\", \"main_background_image\": null, \"go_live_at\": null, \"title\": \"Perkenalan ORM dan SQLAlchemy\", \"seo_title\": \"\", \"slug\": \"perkenalan-orm-dan-sqlalchemy\", \"content\": \"[{\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Kemampuan database merupakan kemampuan fundamental bagi setiap programmer. Bagi orang yang baru mulai belajar database pasti pernah mendengar Object Relational Mapping atau ORM. Sebelum ORM ada, segala aktifitas dan perintah di database harus menggunakan bahasa SQL. Di era modern sekarang, hampir sebagian besar bahasa pemrograman yang digunakan bersifat <i>object oriented</i>, seperti Java, Python dan C++, ORM dibuat agar objek dapat dipetakan atau direlasikan ke suatu record di database, ORM juga mengubah sintaks SQL menjadi sintaks yang bersifat <i>object-oriented.</i>\\\\u00a0 sehingga \\\\u00a0memudahkan programmer dan meningkatkan produktifitas dalam hal menggunakan database karena object sudah terhubung langsung dengan record-record pada database, code readability juga akan meningkat karena sintaks ORM lebih terlihat <i>object-oriented.</i>\\\\u00a0</p><p>Jadi bagaimana sih cara ORM mempermudah kerja programmer? ORM menterjemahkan perintah dari programmer ke dalam bahasa SQL, termasuk mengubah tipe data dari field suatu objek supaya cocok dengan tipe data pada databasenya. ORM ada banyak, masing-masing memiliki kelebihan dan kekurangan, dan semuanya hampir berbentuk suatu library atau module yang kita install sendiri sesuai dengan bahasa pemrograman kita, namun ada juga ORM yang sudah terintegrasi pada suatu framework, contohnya ORM Django. Faktor utama bagus atau tidaknya dari suatu ORM adalah dari segi performa, seperti seberapa cepat suatu ORM dapat melaksanakan query yang kompleks. Perbandingan berbagai ORM Python yang lumayan detail bisa dilihat\\\\u00a0<a href=\\\\\\\"http://www.pythoncentral.io/sqlalchemy-vs-orms/\\\\\\\">disini</a>.\\\\u00a0</p><p>Disini saya akan menggunakan SQLAlchemy sebagai ORM pilihan saya, karena SQLAlchemy adalah ORM yang paling banyak digunakan di Python sehingga lebih mudah googling jika ada kesulitan...</p><p></p><p>Berikut merupakan demonstrasi SQLAlchemy</p>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"table users\\\"}, {\\\"type\\\": \\\"raw_html\\\", \\\"value\\\": \\\"<table>\\\\r\\\\n<tbody>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;nama &nbsp;</td>\\\\r\\\\n<td>&nbsp;umur&nbsp;</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Andi</td>\\\\r\\\\n<td>&nbsp;19</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Budi</td>\\\\r\\\\n<td>&nbsp;18</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Agung</td>\\\\r\\\\n<td>&nbsp;14</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Adit</td>\\\\r\\\\n<td>&nbsp;15</td>\\\\r\\\\n</tr>\\\\r\\\\n</tbody>\\\\r\\\\n</table>\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p><br/></p><p>Menggunakan SQL.</p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"SELECT nama\\\\r\\\\nFROM users\\\\r\\\\nWHERE umur > 17;\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Menggunakan ORM SQLAlchemy<br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"query(User).filter(User.nama > 17) \\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p><br/></p><p>ORM akan otomatis menterjemahkan statement python ke dalam bahasa SQL sehingga kedua perintah diatas akan menghasilkan hasil yang sama yaitu<br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"Andi\\\\r\\\\nBudi\\\"}, {\\\"type\\\": \\\"subheading\\\", \\\"value\\\": \\\"Demonstrasi Lengkap\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Berikutnya saya akan memberi demonstrasi sederhana pengunaan SQLAlchemy yang dikombinasikan dengan sqlite, karena sqlite sudah disupport python out-of-the-box jadi tidak perlu meng-install modules lain.\\\\u00a0pertama kita install dulu SQLAlchemy, ketik command berikut di command-line.<br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"pip install sqlalchemy\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p><br/></p><p>Saya akan coba membuat database yang memiliki tabel daftarNilai. Kembali lagi ke arti ORM, yaitu\\\\u00a0<em>Object\\\\u00a0</em>Relational Mapper, table yang kita inginkan nanti otomatis terbuat sesuai dengan class/objek yang kita definisikan. Kita namakan file py kita models, karena disinilah bagamaina definisi database kita akan diatur, jika kalau nanti ada perubahan database, kita tinggal mengedit models.py ini.<br/></p>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"models.py\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"from sqlalchemy.ext.declarative import declarative_base\\\\r\\\\nfrom sqlalchemy import Column, Integer, String\\\\r\\\\n# Kita harus import setiap tipe data yang ingin kita gunakan\\\\r\\\\nfrom sqlalchemy import create_engine\\\\r\\\\n\\\\r\\\\nBase = declarative_base()\\\\r\\\\n# setiap class yang akan dipetakan harus inherit dari instance declarative_base\\\\r\\\\n\\\\r\\\\nclass DaftarNilai(Base): #inherit from Base\\\\r\\\\n    __tablename__ = 'daftarNilai'    \\\\r\\\\n    # tablename disini hanyalah sebagai metadata\\\\r\\\\n\\\\r\\\\n    nama = Column(String(50), nullable=False, primary_key=True)\\\\r\\\\n    # membuat kolom nama dengan tipe data\\\\r\\\\n    # String maksimal panjang 50 karakter   \\\\r\\\\n    # dan tidak boleh Null   \\\\r\\\\n    nilai = Column(Integer, nullable=False)   \\\\r\\\\n\\\\r\\\\nengine = create_engine('sqlite:///latihan.db') \\\\r\\\\n# menyiapkan connector/engine sqlite\\\\r\\\\n\\\\r\\\\nBase.metadata.create_all(engine) \\\\r\\\\n# menjalankan perintah pemetaan/membuat database\\\"}]\", \"live\": true, \"thumbnail_image\": null, \"has_unpublished_changes\": false, \"related_post\": \"[]\", \"angular_url\": \"perkenalan-orm-dan-sqlalchemy\", \"title_extended\": \"\", \"numchild\": 0, \"content_type\": 34, \"show_in_menus\": false, \"date\": \"2015-04-07\", \"path\": \"0001000100010007\", \"url_path\": \"/home/blog/perkenalan-orm-dan-sqlalchemy/\", \"expired\": false, \"pk\": 12, \"categories\": \"[{\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Python\\\"}, {\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Software\\\"}]\", \"main_image\": null, \"locked\": false, \"author\": \"Abirafdi Raditya Putra\", \"depth\": 4, \"first_published_at\": \"2015-08-14T02:26:40.339Z\", \"expire_at\": null}", "user": 1, "page": 12}, "model": "wagtailcore.pagerevision", "pk": 65}, {"fields": {"approved_go_live_at": null, "created_at": "2015-08-14T02:48:27.195Z", "submitted_for_moderation": false, "content_json": "{\"search_description\": \"\", \"owner\": 1, \"intro\": \"<p>Kemampuan database merupakan kemampuan fundamental bagi setiap programmer. Bagi orang yang baru mulai belajar database pasti pernah mendengar Object Relational Mapping atau ORM. Pada post ini saya akan menjelaskan apa itu ORM berserta contohnya menggunakan SQLAlchemy</p>\", \"latest_revision_created_at\": \"2015-08-14T02:47:50.678Z\", \"main_background_image\": null, \"go_live_at\": null, \"title\": \"Perkenalan ORM dan SQLAlchemy\", \"seo_title\": \"\", \"slug\": \"perkenalan-orm-dan-sqlalchemy\", \"content\": \"[{\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Kemampuan database merupakan kemampuan fundamental bagi setiap programmer. Bagi orang yang baru mulai belajar database pasti pernah mendengar Object Relational Mapping atau ORM. Sebelum ORM ada, segala aktifitas dan perintah di database harus menggunakan bahasa SQL. Di era modern sekarang, hampir sebagian besar bahasa pemrograman yang digunakan bersifat <i>object oriented</i>, seperti Java, Python dan C++, ORM dibuat agar objek dapat dipetakan atau direlasikan ke suatu record di database, ORM juga mengubah sintaks SQL menjadi sintaks yang bersifat <i>object-oriented.</i>\\\\u00a0 sehingga \\\\u00a0memudahkan programmer dan meningkatkan produktifitas dalam hal menggunakan database karena object sudah terhubung langsung dengan record-record pada database, code readability juga akan meningkat karena sintaks ORM lebih terlihat <i>object-oriented.</i>\\\\u00a0</p><p>Jadi bagaimana sih cara ORM mempermudah kerja programmer? ORM menterjemahkan perintah dari programmer ke dalam bahasa SQL, termasuk mengubah tipe data dari field suatu objek supaya cocok dengan tipe data pada databasenya. ORM ada banyak, masing-masing memiliki kelebihan dan kekurangan, dan semuanya hampir berbentuk suatu library atau module yang kita install sendiri sesuai dengan bahasa pemrograman kita, namun ada juga ORM yang sudah terintegrasi pada suatu framework, contohnya ORM Django. Faktor utama bagus atau tidaknya dari suatu ORM adalah dari segi performa, seperti seberapa cepat suatu ORM dapat melaksanakan query yang kompleks. Perbandingan berbagai ORM Python yang lumayan detail bisa dilihat\\\\u00a0<a href=\\\\\\\"http://www.pythoncentral.io/sqlalchemy-vs-orms/\\\\\\\">disini</a>.\\\\u00a0</p><p>Disini saya akan menggunakan SQLAlchemy sebagai ORM pilihan saya, karena SQLAlchemy adalah ORM yang paling banyak digunakan di Python sehingga lebih mudah googling jika ada kesulitan...</p><p></p><p>Berikut merupakan demonstrasi SQLAlchemy</p>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"table users\\\"}, {\\\"type\\\": \\\"raw_html\\\", \\\"value\\\": \\\"<table>\\\\r\\\\n<tbody>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;nama &nbsp;</td>\\\\r\\\\n<td>&nbsp;umur&nbsp;</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Andi</td>\\\\r\\\\n<td>&nbsp;19</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Budi</td>\\\\r\\\\n<td>&nbsp;18</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Agung</td>\\\\r\\\\n<td>&nbsp;14</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Adit</td>\\\\r\\\\n<td>&nbsp;15</td>\\\\r\\\\n</tr>\\\\r\\\\n</tbody>\\\\r\\\\n</table>\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p><br/></p><p>Menggunakan SQL.</p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"SELECT nama\\\\r\\\\nFROM users\\\\r\\\\nWHERE umur > 17;\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p><br/></p><p>Menggunakan ORM SQLAlchemy<br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"query(User).filter(User.nama > 17) \\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>ORM akan otomatis menterjemahkan statement python ke dalam bahasa SQL sehingga kedua perintah diatas akan menghasilkan hasil yang sama yaitu<br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"Andi\\\\r\\\\nBudi\\\"}, {\\\"type\\\": \\\"subheading\\\", \\\"value\\\": \\\"Demonstrasi Lengkap\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Berikutnya saya akan memberi demonstrasi sederhana pengunaan SQLAlchemy yang dikombinasikan dengan sqlite, karena sqlite sudah disupport python out-of-the-box jadi tidak perlu meng-install modules lain.\\\\u00a0pertama kita install dulu SQLAlchemy, ketik command berikut di command-line.<br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"pip install sqlalchemy\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p><br/></p><p>Saya akan coba membuat database yang memiliki tabel daftarNilai. Kembali lagi ke arti ORM, yaitu\\\\u00a0<em>Object\\\\u00a0</em>Relational Mapper, table yang kita inginkan nanti otomatis terbuat sesuai dengan class/objek yang kita definisikan. Kita namakan file py kita models, karena disinilah bagamaina definisi database kita akan diatur, jika kalau nanti ada perubahan database, kita tinggal mengedit models.py ini.<br/></p>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"models.py\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"from sqlalchemy.ext.declarative import declarative_base\\\\r\\\\nfrom sqlalchemy import Column, Integer, String\\\\r\\\\n# Kita harus import setiap tipe data yang ingin kita gunakan\\\\r\\\\nfrom sqlalchemy import create_engine\\\\r\\\\n\\\\r\\\\nBase = declarative_base()\\\\r\\\\n# setiap class yang akan dipetakan harus inherit dari instance declarative_base\\\\r\\\\n\\\\r\\\\nclass DaftarNilai(Base): #inherit from Base\\\\r\\\\n    __tablename__ = 'daftarNilai'    \\\\r\\\\n    # tablename disini hanyalah sebagai metadata\\\\r\\\\n\\\\r\\\\n    nama = Column(String(50), nullable=False, primary_key=True)\\\\r\\\\n    # membuat kolom nama dengan tipe data\\\\r\\\\n    # String maksimal panjang 50 karakter   \\\\r\\\\n    # dan tidak boleh Null   \\\\r\\\\n    nilai = Column(Integer, nullable=False)   \\\\r\\\\n\\\\r\\\\nengine = create_engine('sqlite:///latihan.db') \\\\r\\\\n# menyiapkan connector/engine sqlite\\\\r\\\\n\\\\r\\\\nBase.metadata.create_all(engine) \\\\r\\\\n# menjalankan perintah pemetaan/membuat database\\\"}]\", \"live\": true, \"thumbnail_image\": null, \"has_unpublished_changes\": false, \"related_post\": \"[]\", \"angular_url\": \"perkenalan-orm-dan-sqlalchemy\", \"title_extended\": \"\", \"numchild\": 0, \"content_type\": 34, \"show_in_menus\": false, \"date\": \"2015-04-07\", \"path\": \"0001000100010007\", \"url_path\": \"/home/blog/perkenalan-orm-dan-sqlalchemy/\", \"expired\": false, \"pk\": 12, \"categories\": \"[{\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Python\\\"}, {\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Software\\\"}]\", \"main_image\": null, \"locked\": false, \"author\": \"Abirafdi Raditya Putra\", \"depth\": 4, \"first_published_at\": \"2015-08-14T02:26:40.339Z\", \"expire_at\": null}", "user": 1, "page": 12}, "model": "wagtailcore.pagerevision", "pk": 66}, {"fields": {"approved_go_live_at": null, "created_at": "2015-08-14T02:48:50.025Z", "submitted_for_moderation": false, "content_json": "{\"search_description\": \"\", \"owner\": 1, \"intro\": \"<p>Kemampuan database merupakan kemampuan fundamental bagi setiap programmer. Bagi orang yang baru mulai belajar database pasti pernah mendengar Object Relational Mapping atau ORM. Pada post ini saya akan menjelaskan apa itu ORM berserta contohnya menggunakan SQLAlchemy</p>\", \"latest_revision_created_at\": \"2015-08-14T02:48:27.195Z\", \"main_background_image\": null, \"go_live_at\": null, \"title\": \"Perkenalan ORM dan SQLAlchemy\", \"seo_title\": \"\", \"slug\": \"perkenalan-orm-dan-sqlalchemy\", \"content\": \"[{\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Kemampuan database merupakan kemampuan fundamental bagi setiap programmer. Bagi orang yang baru mulai belajar database pasti pernah mendengar Object Relational Mapping atau ORM. Sebelum ORM ada, segala aktifitas dan perintah di database harus menggunakan bahasa SQL. Di era modern sekarang, hampir sebagian besar bahasa pemrograman yang digunakan bersifat <i>object oriented</i>, seperti Java, Python dan C++, ORM dibuat agar objek dapat dipetakan atau direlasikan ke suatu record di database, ORM juga mengubah sintaks SQL menjadi sintaks yang bersifat <i>object-oriented.</i>\\\\u00a0 sehingga \\\\u00a0memudahkan programmer dan meningkatkan produktifitas dalam hal menggunakan database karena object sudah terhubung langsung dengan record-record pada database, code readability juga akan meningkat karena sintaks ORM lebih terlihat <i>object-oriented.</i>\\\\u00a0</p><p>Jadi bagaimana sih cara ORM mempermudah kerja programmer? ORM menterjemahkan perintah dari programmer ke dalam bahasa SQL, termasuk mengubah tipe data dari field suatu objek supaya cocok dengan tipe data pada databasenya. ORM ada banyak, masing-masing memiliki kelebihan dan kekurangan, dan semuanya hampir berbentuk suatu library atau module yang kita install sendiri sesuai dengan bahasa pemrograman kita, namun ada juga ORM yang sudah terintegrasi pada suatu framework, contohnya ORM Django. Faktor utama bagus atau tidaknya dari suatu ORM adalah dari segi performa, seperti seberapa cepat suatu ORM dapat melaksanakan query yang kompleks. Perbandingan berbagai ORM Python yang lumayan detail bisa dilihat\\\\u00a0<a href=\\\\\\\"http://www.pythoncentral.io/sqlalchemy-vs-orms/\\\\\\\">disini</a>.\\\\u00a0</p><p>Disini saya akan menggunakan SQLAlchemy sebagai ORM pilihan saya, karena SQLAlchemy adalah ORM yang paling banyak digunakan di Python sehingga lebih mudah googling jika ada kesulitan...</p><p></p><p>Berikut merupakan demonstrasi SQLAlchemy</p>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"table users\\\"}, {\\\"type\\\": \\\"raw_html\\\", \\\"value\\\": \\\"<table>\\\\r\\\\n<tbody>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;nama &nbsp;</td>\\\\r\\\\n<td>&nbsp;umur&nbsp;</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Andi</td>\\\\r\\\\n<td>&nbsp;19</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Budi</td>\\\\r\\\\n<td>&nbsp;18</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Agung</td>\\\\r\\\\n<td>&nbsp;14</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Adit</td>\\\\r\\\\n<td>&nbsp;15</td>\\\\r\\\\n</tr>\\\\r\\\\n</tbody>\\\\r\\\\n</table>\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Menggunakan SQL.<br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"SELECT nama\\\\r\\\\nFROM users\\\\r\\\\nWHERE umur > 17;\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Menggunakan ORM SQLAlchemy<br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"query(User).filter(User.nama > 17) \\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>ORM akan otomatis menterjemahkan statement python ke dalam bahasa SQL sehingga kedua perintah diatas akan menghasilkan hasil yang sama yaitu<br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"Andi\\\\r\\\\nBudi\\\"}, {\\\"type\\\": \\\"subheading\\\", \\\"value\\\": \\\"Demonstrasi Lengkap\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Berikutnya saya akan memberi demonstrasi sederhana pengunaan SQLAlchemy yang dikombinasikan dengan sqlite, karena sqlite sudah disupport python out-of-the-box jadi tidak perlu meng-install modules lain.\\\\u00a0pertama kita install dulu SQLAlchemy, ketik command berikut di command-line.<br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"pip install sqlalchemy\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p><br/></p><p>Saya akan coba membuat database yang memiliki tabel daftarNilai. Kembali lagi ke arti ORM, yaitu\\\\u00a0<em>Object\\\\u00a0</em>Relational Mapper, table yang kita inginkan nanti otomatis terbuat sesuai dengan class/objek yang kita definisikan. Kita namakan file py kita models, karena disinilah bagamaina definisi database kita akan diatur, jika kalau nanti ada perubahan database, kita tinggal mengedit models.py ini.<br/></p>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"models.py\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"from sqlalchemy.ext.declarative import declarative_base\\\\r\\\\nfrom sqlalchemy import Column, Integer, String\\\\r\\\\n# Kita harus import setiap tipe data yang ingin kita gunakan\\\\r\\\\nfrom sqlalchemy import create_engine\\\\r\\\\n\\\\r\\\\nBase = declarative_base()\\\\r\\\\n# setiap class yang akan dipetakan harus inherit dari instance declarative_base\\\\r\\\\n\\\\r\\\\nclass DaftarNilai(Base): #inherit from Base\\\\r\\\\n    __tablename__ = 'daftarNilai'    \\\\r\\\\n    # tablename disini hanyalah sebagai metadata\\\\r\\\\n\\\\r\\\\n    nama = Column(String(50), nullable=False, primary_key=True)\\\\r\\\\n    # membuat kolom nama dengan tipe data\\\\r\\\\n    # String maksimal panjang 50 karakter   \\\\r\\\\n    # dan tidak boleh Null   \\\\r\\\\n    nilai = Column(Integer, nullable=False)   \\\\r\\\\n\\\\r\\\\nengine = create_engine('sqlite:///latihan.db') \\\\r\\\\n# menyiapkan connector/engine sqlite\\\\r\\\\n\\\\r\\\\nBase.metadata.create_all(engine) \\\\r\\\\n# menjalankan perintah pemetaan/membuat database\\\"}]\", \"live\": true, \"thumbnail_image\": null, \"has_unpublished_changes\": false, \"related_post\": \"[]\", \"angular_url\": \"perkenalan-orm-dan-sqlalchemy\", \"title_extended\": \"\", \"numchild\": 0, \"content_type\": 34, \"show_in_menus\": false, \"date\": \"2015-04-07\", \"path\": \"0001000100010007\", \"url_path\": \"/home/blog/perkenalan-orm-dan-sqlalchemy/\", \"expired\": false, \"pk\": 12, \"categories\": \"[{\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Python\\\"}, {\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Software\\\"}]\", \"main_image\": null, \"locked\": false, \"author\": \"Abirafdi Raditya Putra\", \"depth\": 4, \"first_published_at\": \"2015-08-14T02:26:40.339Z\", \"expire_at\": null}", "user": 1, "page": 12}, "model": "wagtailcore.pagerevision", "pk": 67}, {"fields": {"approved_go_live_at": null, "created_at": "2015-08-14T02:53:07.669Z", "submitted_for_moderation": false, "content_json": "{\"search_description\": \"\", \"owner\": 1, \"intro\": \"<p>Kemampuan database merupakan kemampuan fundamental bagi setiap programmer. Bagi orang yang baru mulai belajar database pasti pernah mendengar Object Relational Mapping atau ORM. Pada post ini saya akan menjelaskan apa itu ORM berserta contohnya menggunakan SQLAlchemy</p>\", \"latest_revision_created_at\": \"2015-08-14T02:48:50.025Z\", \"main_background_image\": null, \"go_live_at\": null, \"title\": \"Perkenalan ORM dan SQLAlchemy\", \"seo_title\": \"\", \"slug\": \"perkenalan-orm-dan-sqlalchemy\", \"content\": \"[{\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Kemampuan database merupakan kemampuan fundamental bagi setiap programmer. Bagi orang yang baru mulai belajar database pasti pernah mendengar Object Relational Mapping atau ORM. Sebelum ORM ada, segala aktifitas dan perintah di database harus menggunakan bahasa SQL. Di era modern sekarang, hampir sebagian besar bahasa pemrograman yang digunakan bersifat <i>object oriented</i>, seperti Java, Python dan C++, ORM dibuat agar objek dapat dipetakan atau direlasikan ke suatu record di database, ORM juga mengubah sintaks SQL menjadi sintaks yang bersifat <i>object-oriented.</i>\\\\u00a0 sehingga \\\\u00a0memudahkan programmer dan meningkatkan produktifitas dalam hal menggunakan database karena object sudah terhubung langsung dengan record-record pada database, code readability juga akan meningkat karena sintaks ORM lebih terlihat <i>object-oriented.</i>\\\\u00a0</p><p>Jadi bagaimana sih cara ORM mempermudah kerja programmer? ORM menterjemahkan perintah dari programmer ke dalam bahasa SQL, termasuk mengubah tipe data dari field suatu objek supaya cocok dengan tipe data pada databasenya. ORM ada banyak, masing-masing memiliki kelebihan dan kekurangan, dan semuanya hampir berbentuk suatu library atau module yang kita install sendiri sesuai dengan bahasa pemrograman kita, namun ada juga ORM yang sudah terintegrasi pada suatu framework, contohnya ORM Django. Faktor utama bagus atau tidaknya dari suatu ORM adalah dari segi performa, seperti seberapa cepat suatu ORM dapat melaksanakan query yang kompleks. Perbandingan berbagai ORM Python yang lumayan detail bisa dilihat\\\\u00a0<a href=\\\\\\\"http://www.pythoncentral.io/sqlalchemy-vs-orms/\\\\\\\">disini</a>.\\\\u00a0</p><p>Disini saya akan menggunakan SQLAlchemy sebagai ORM pilihan saya, karena SQLAlchemy adalah ORM yang paling banyak digunakan di Python sehingga lebih mudah googling jika ada kesulitan...</p><p></p><p>Berikut merupakan demonstrasi SQLAlchemy</p>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"table users\\\"}, {\\\"type\\\": \\\"raw_html\\\", \\\"value\\\": \\\"<table>\\\\r\\\\n<tbody>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;nama &nbsp;</td>\\\\r\\\\n<td>&nbsp;umur&nbsp;</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Andi</td>\\\\r\\\\n<td>&nbsp;19</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Budi</td>\\\\r\\\\n<td>&nbsp;18</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Agung</td>\\\\r\\\\n<td>&nbsp;14</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Adit</td>\\\\r\\\\n<td>&nbsp;15</td>\\\\r\\\\n</tr>\\\\r\\\\n</tbody>\\\\r\\\\n</table>\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Menggunakan SQL.<br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"SELECT nama\\\\r\\\\nFROM users\\\\r\\\\nWHERE umur > 17;\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Menggunakan ORM SQLAlchemy<br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"query(User).filter(User.nama > 17) \\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>ORM akan otomatis menterjemahkan statement python ke dalam bahasa SQL sehingga kedua perintah diatas akan menghasilkan hasil yang sama yaitu<br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"Andi\\\\r\\\\nBudi\\\"}, {\\\"type\\\": \\\"subheading\\\", \\\"value\\\": \\\"Demonstrasi Lengkap\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Berikutnya saya akan memberi demonstrasi sederhana pengunaan SQLAlchemy yang dikombinasikan dengan sqlite, karena sqlite sudah disupport python out-of-the-box jadi tidak perlu meng-install modules lain.\\\\u00a0pertama kita install dulu SQLAlchemy, ketik command berikut di command-line.<br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"pip install sqlalchemy\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Pertama buat database yang memiliki tabel daftarNilai. Sesuai dengan kepanjangan ORM,\\\\u00a0<em>Object\\\\u00a0</em>Relational Mapper, table yang kita inginkan nanti otomatis terbuat sesuai dengan class atau objek yang kita definisikan jadi langkah selanjutnya adalah mendefinisikan class daftarNilai. Kumpulan class yang akan dijadikan table kita letakkan di satu file yang bernama models.py<br/></p>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"models.py\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"from sqlalchemy.ext.declarative import declarative_base\\\\r\\\\nfrom sqlalchemy import Column, Integer, String\\\\r\\\\n# Kita harus import setiap tipe data yang ingin kita gunakan\\\\r\\\\nfrom sqlalchemy import create_engine\\\\r\\\\n\\\\r\\\\nBase = declarative_base()\\\\r\\\\n# setiap class yang akan dipetakan harus inherit dari instance declarative_base\\\\r\\\\n\\\\r\\\\nclass DaftarNilai(Base): #inherit from Base\\\\r\\\\n    __tablename__ = 'daftarNilai'    \\\\r\\\\n    # tablename disini hanyalah sebagai metadata\\\\r\\\\n\\\\r\\\\n    nama = Column(String(50), nullable=False, primary_key=True)\\\\r\\\\n    # membuat kolom nama dengan tipe data\\\\r\\\\n    # String maksimal panjang 50 karakter   \\\\r\\\\n    # dan tidak boleh Null   \\\\r\\\\n    nilai = Column(Integer, nullable=False)   \\\\r\\\\n\\\\r\\\\nengine = create_engine('sqlite:///latihan.db') \\\\r\\\\n# menyiapkan connector/engine sqlite\\\\r\\\\n\\\\r\\\\nBase.metadata.create_all(engine) \\\\r\\\\n# menjalankan perintah pemetaan/membuat database\\\"}]\", \"live\": true, \"thumbnail_image\": null, \"has_unpublished_changes\": false, \"related_post\": \"[]\", \"angular_url\": \"perkenalan-orm-dan-sqlalchemy\", \"title_extended\": \"\", \"numchild\": 0, \"content_type\": 34, \"show_in_menus\": false, \"date\": \"2015-04-07\", \"path\": \"0001000100010007\", \"url_path\": \"/home/blog/perkenalan-orm-dan-sqlalchemy/\", \"expired\": false, \"pk\": 12, \"categories\": \"[{\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Python\\\"}, {\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Software\\\"}]\", \"main_image\": null, \"locked\": false, \"author\": \"Abirafdi Raditya Putra\", \"depth\": 4, \"first_published_at\": \"2015-08-14T02:26:40.339Z\", \"expire_at\": null}", "user": 1, "page": 12}, "model": "wagtailcore.pagerevision", "pk": 68}, {"fields": {"approved_go_live_at": null, "created_at": "2015-08-14T02:53:41.613Z", "submitted_for_moderation": false, "content_json": "{\"search_description\": \"\", \"owner\": 1, \"intro\": \"<p>Kemampuan database merupakan kemampuan fundamental bagi setiap programmer. Bagi orang yang baru mulai belajar database pasti pernah mendengar Object Relational Mapping atau ORM. Pada post ini saya akan menjelaskan apa itu ORM berserta contohnya menggunakan SQLAlchemy</p>\", \"latest_revision_created_at\": \"2015-08-14T02:53:07.669Z\", \"main_background_image\": null, \"go_live_at\": null, \"title\": \"Perkenalan ORM dan SQLAlchemy\", \"seo_title\": \"\", \"slug\": \"perkenalan-orm-dan-sqlalchemy\", \"content\": \"[{\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Kemampuan database merupakan kemampuan fundamental bagi setiap programmer. Bagi orang yang baru mulai belajar database pasti pernah mendengar Object Relational Mapping atau ORM. Sebelum ORM ada, segala aktifitas dan perintah di database harus menggunakan bahasa SQL. Di era modern sekarang, hampir sebagian besar bahasa pemrograman yang digunakan bersifat <i>object oriented</i>, seperti Java, Python dan C++, ORM dibuat agar objek dapat dipetakan atau direlasikan ke suatu record di database, ORM juga mengubah sintaks SQL menjadi sintaks yang bersifat <i>object-oriented.</i>\\\\u00a0 sehingga \\\\u00a0memudahkan programmer dan meningkatkan produktifitas dalam hal menggunakan database karena object sudah terhubung langsung dengan record-record pada database, code readability juga akan meningkat karena sintaks ORM lebih terlihat <i>object-oriented.</i>\\\\u00a0</p><p>Jadi bagaimana sih cara ORM mempermudah kerja programmer? ORM menterjemahkan perintah dari programmer ke dalam bahasa SQL, termasuk mengubah tipe data dari field suatu objek supaya cocok dengan tipe data pada databasenya. ORM ada banyak, masing-masing memiliki kelebihan dan kekurangan, dan semuanya hampir berbentuk suatu library atau module yang kita install sendiri sesuai dengan bahasa pemrograman kita, namun ada juga ORM yang sudah terintegrasi pada suatu framework, contohnya ORM Django. Faktor utama bagus atau tidaknya dari suatu ORM adalah dari segi performa, seperti seberapa cepat suatu ORM dapat melaksanakan query yang kompleks. Perbandingan berbagai ORM Python yang lumayan detail bisa dilihat\\\\u00a0<a href=\\\\\\\"http://www.pythoncentral.io/sqlalchemy-vs-orms/\\\\\\\">disini</a>.\\\\u00a0</p><p>Disini saya akan menggunakan SQLAlchemy sebagai ORM pilihan saya, karena SQLAlchemy adalah ORM yang paling banyak digunakan di Python sehingga lebih mudah googling jika ada kesulitan...</p><p></p><p>Berikut merupakan demonstrasi SQLAlchemy</p>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"table users\\\"}, {\\\"type\\\": \\\"raw_html\\\", \\\"value\\\": \\\"<table>\\\\r\\\\n<tbody>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;nama &nbsp;</td>\\\\r\\\\n<td>&nbsp;umur&nbsp;</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Andi</td>\\\\r\\\\n<td>&nbsp;19</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Budi</td>\\\\r\\\\n<td>&nbsp;18</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Agung</td>\\\\r\\\\n<td>&nbsp;14</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Adit</td>\\\\r\\\\n<td>&nbsp;15</td>\\\\r\\\\n</tr>\\\\r\\\\n</tbody>\\\\r\\\\n</table>\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Menggunakan SQL.<br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"SELECT nama\\\\r\\\\nFROM users\\\\r\\\\nWHERE umur > 17;\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Menggunakan ORM SQLAlchemy<br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"query(User).filter(User.nama > 17) \\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>ORM akan otomatis menterjemahkan statement python ke dalam bahasa SQL sehingga kedua perintah diatas akan menghasilkan hasil yang sama yaitu<br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"Andi\\\\r\\\\nBudi\\\"}, {\\\"type\\\": \\\"subheading\\\", \\\"value\\\": \\\"Demonstrasi Lengkap\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Berikutnya saya akan memberi demonstrasi sederhana pengunaan SQLAlchemy yang dikombinasikan dengan sqlite, karena sqlite sudah disupport python out-of-the-box jadi tidak perlu meng-install modules lain.\\\\u00a0pertama kita install dulu SQLAlchemy, ketik command berikut di command-line.<br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"pip install sqlalchemy\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Langkah pertama alah membuat database yang memiliki tabel daftarNilai. Sesuai dengan kepanjangan ORM,\\\\u00a0<em>Object\\\\u00a0</em>Relational Mapper, table yang kita inginkan nanti otomatis terbuat sesuai dengan class atau objek yang kita definisikan jadi langkah selanjutnya adalah mendefinisikan class daftarNilai. Kumpulan class yang akan dijadikan table kita letakkan di satu file yang bernama models.py<br/></p>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"models.py\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"from sqlalchemy.ext.declarative import declarative_base\\\\r\\\\nfrom sqlalchemy import Column, Integer, String\\\\r\\\\n# Kita harus import setiap tipe data yang ingin kita gunakan\\\\r\\\\nfrom sqlalchemy import create_engine\\\\r\\\\n\\\\r\\\\nBase = declarative_base()\\\\r\\\\n# setiap class yang akan dipetakan harus inherit dari instance declarative_base\\\\r\\\\n\\\\r\\\\nclass DaftarNilai(Base): #inherit from Base\\\\r\\\\n    __tablename__ = 'daftarNilai'    \\\\r\\\\n    # tablename disini hanyalah sebagai metadata\\\\r\\\\n\\\\r\\\\n    nama = Column(String(50), nullable=False, primary_key=True)\\\\r\\\\n    # membuat kolom nama dengan tipe data\\\\r\\\\n    # String maksimal panjang 50 karakter   \\\\r\\\\n    # dan tidak boleh Null   \\\\r\\\\n    nilai = Column(Integer, nullable=False)   \\\\r\\\\n\\\\r\\\\nengine = create_engine('sqlite:///latihan.db') \\\\r\\\\n# menyiapkan connector/engine sqlite\\\\r\\\\n\\\\r\\\\nBase.metadata.create_all(engine) \\\\r\\\\n# menjalankan perintah pemetaan/membuat database\\\"}]\", \"live\": true, \"thumbnail_image\": null, \"has_unpublished_changes\": false, \"related_post\": \"[]\", \"angular_url\": \"perkenalan-orm-dan-sqlalchemy\", \"title_extended\": \"\", \"numchild\": 0, \"content_type\": 34, \"show_in_menus\": false, \"date\": \"2015-04-07\", \"path\": \"0001000100010007\", \"url_path\": \"/home/blog/perkenalan-orm-dan-sqlalchemy/\", \"expired\": false, \"pk\": 12, \"categories\": \"[{\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Python\\\"}, {\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Software\\\"}]\", \"main_image\": null, \"locked\": false, \"author\": \"Abirafdi Raditya Putra\", \"depth\": 4, \"first_published_at\": \"2015-08-14T02:26:40.339Z\", \"expire_at\": null}", "user": 1, "page": 12}, "model": "wagtailcore.pagerevision", "pk": 69}, {"fields": {"approved_go_live_at": null, "created_at": "2015-08-14T02:54:17.308Z", "submitted_for_moderation": false, "content_json": "{\"search_description\": \"\", \"owner\": 1, \"intro\": \"<p>Kemampuan database merupakan kemampuan fundamental bagi setiap programmer. Bagi orang yang baru mulai belajar database pasti pernah mendengar Object Relational Mapping atau ORM. Pada post ini saya akan menjelaskan apa itu ORM berserta contohnya menggunakan SQLAlchemy</p>\", \"latest_revision_created_at\": \"2015-08-14T02:53:41.613Z\", \"main_background_image\": null, \"go_live_at\": null, \"title\": \"Perkenalan ORM dan SQLAlchemy\", \"seo_title\": \"\", \"slug\": \"perkenalan-orm-dan-sqlalchemy\", \"content\": \"[{\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Kemampuan database merupakan kemampuan fundamental bagi setiap programmer. Bagi orang yang baru mulai belajar database pasti pernah mendengar Object Relational Mapping atau ORM. Sebelum ORM ada, segala aktifitas dan perintah di database harus menggunakan bahasa SQL. Di era modern sekarang, hampir sebagian besar bahasa pemrograman yang digunakan bersifat <i>object oriented</i>, seperti Java, Python dan C++, ORM dibuat agar objek dapat dipetakan atau direlasikan ke suatu record di database, ORM juga mengubah sintaks SQL menjadi sintaks yang bersifat <i>object-oriented.</i>\\\\u00a0 sehingga \\\\u00a0memudahkan programmer dan meningkatkan produktifitas dalam hal menggunakan database karena object sudah terhubung langsung dengan record-record pada database, code readability juga akan meningkat karena sintaks ORM lebih terlihat <i>object-oriented.</i>\\\\u00a0</p><p>Jadi bagaimana sih cara ORM mempermudah kerja programmer? ORM menterjemahkan perintah dari programmer ke dalam bahasa SQL, termasuk mengubah tipe data dari field suatu objek supaya cocok dengan tipe data pada databasenya. ORM ada banyak, masing-masing memiliki kelebihan dan kekurangan, dan semuanya hampir berbentuk suatu library atau module yang kita install sendiri sesuai dengan bahasa pemrograman kita, namun ada juga ORM yang sudah terintegrasi pada suatu framework, contohnya ORM Django. Faktor utama bagus atau tidaknya dari suatu ORM adalah dari segi performa, seperti seberapa cepat suatu ORM dapat melaksanakan query yang kompleks. Perbandingan berbagai ORM Python yang lumayan detail bisa dilihat\\\\u00a0<a href=\\\\\\\"http://www.pythoncentral.io/sqlalchemy-vs-orms/\\\\\\\">disini</a>.\\\\u00a0</p><p>Disini saya akan menggunakan SQLAlchemy sebagai ORM pilihan saya, karena SQLAlchemy adalah ORM yang paling banyak digunakan di Python sehingga lebih mudah googling jika ada kesulitan...</p><p></p><p>Berikut merupakan demonstrasi SQLAlchemy</p>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"table users\\\"}, {\\\"type\\\": \\\"raw_html\\\", \\\"value\\\": \\\"<table>\\\\r\\\\n<tbody>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;nama &nbsp;</td>\\\\r\\\\n<td>&nbsp;umur&nbsp;</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Andi</td>\\\\r\\\\n<td>&nbsp;19</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Budi</td>\\\\r\\\\n<td>&nbsp;18</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Agung</td>\\\\r\\\\n<td>&nbsp;14</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Adit</td>\\\\r\\\\n<td>&nbsp;15</td>\\\\r\\\\n</tr>\\\\r\\\\n</tbody>\\\\r\\\\n</table>\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Menggunakan SQL.<br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"SELECT nama\\\\r\\\\nFROM users\\\\r\\\\nWHERE umur > 17;\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Menggunakan ORM SQLAlchemy<br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"query(User).filter(User.nama > 17) \\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>ORM akan otomatis menterjemahkan statement python ke dalam bahasa SQL sehingga kedua perintah diatas akan menghasilkan hasil yang sama yaitu<br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"Andi\\\\r\\\\nBudi\\\"}, {\\\"type\\\": \\\"subheading\\\", \\\"value\\\": \\\"Demonstrasi Lengkap\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Berikutnya saya akan memberi demonstrasi sederhana pengunaan SQLAlchemy yang dikombinasikan dengan sqlite, karena sqlite sudah disupport python out-of-the-box jadi tidak perlu meng-install modules lain.\\\\u00a0pertama kita install dulu SQLAlchemy, ketik command berikut di command-line.<br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"pip install sqlalchemy\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Langkah pertama alah membuat database yang memiliki tabel daftarNilai. Sesuai dengan kepanjangan ORM, yaitu\\\\u00a0<i>Object\\\\u00a0Relational Mapper</i>, table yang kita inginkan nanti otomatis terbuat sesuai dengan class atau objek yang kita definisikan jadi langkah selanjutnya adalah mendefinisikan class daftarNilai. Kumpulan class yang akan dijadikan table kita letakkan di satu file yang bernama models.py<br/></p>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"models.py\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"from sqlalchemy.ext.declarative import declarative_base\\\\r\\\\nfrom sqlalchemy import Column, Integer, String\\\\r\\\\n# Kita harus import setiap tipe data yang ingin kita gunakan\\\\r\\\\nfrom sqlalchemy import create_engine\\\\r\\\\n\\\\r\\\\nBase = declarative_base()\\\\r\\\\n# setiap class yang akan dipetakan harus inherit dari instance declarative_base\\\\r\\\\n\\\\r\\\\nclass DaftarNilai(Base): #inherit from Base\\\\r\\\\n    __tablename__ = 'daftarNilai'    \\\\r\\\\n    # tablename disini hanyalah sebagai metadata\\\\r\\\\n\\\\r\\\\n    nama = Column(String(50), nullable=False, primary_key=True)\\\\r\\\\n    # membuat kolom nama dengan tipe data\\\\r\\\\n    # String maksimal panjang 50 karakter   \\\\r\\\\n    # dan tidak boleh Null   \\\\r\\\\n    nilai = Column(Integer, nullable=False)   \\\\r\\\\n\\\\r\\\\nengine = create_engine('sqlite:///latihan.db') \\\\r\\\\n# menyiapkan connector/engine sqlite\\\\r\\\\n\\\\r\\\\nBase.metadata.create_all(engine) \\\\r\\\\n# menjalankan perintah pemetaan/membuat database\\\"}]\", \"live\": true, \"thumbnail_image\": null, \"has_unpublished_changes\": false, \"related_post\": \"[]\", \"angular_url\": \"perkenalan-orm-dan-sqlalchemy\", \"title_extended\": \"\", \"numchild\": 0, \"content_type\": 34, \"show_in_menus\": false, \"date\": \"2015-04-07\", \"path\": \"0001000100010007\", \"url_path\": \"/home/blog/perkenalan-orm-dan-sqlalchemy/\", \"expired\": false, \"pk\": 12, \"categories\": \"[{\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Python\\\"}, {\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Software\\\"}]\", \"main_image\": null, \"locked\": false, \"author\": \"Abirafdi Raditya Putra\", \"depth\": 4, \"first_published_at\": \"2015-08-14T02:26:40.339Z\", \"expire_at\": null}", "user": 1, "page": 12}, "model": "wagtailcore.pagerevision", "pk": 70}, {"fields": {"approved_go_live_at": null, "created_at": "2015-08-14T02:55:12.318Z", "submitted_for_moderation": false, "content_json": "{\"search_description\": \"\", \"owner\": 1, \"intro\": \"<p>Kemampuan database merupakan kemampuan fundamental bagi setiap programmer. Bagi orang yang baru mulai belajar database pasti pernah mendengar Object Relational Mapping atau ORM. Pada post ini saya akan menjelaskan apa itu ORM berserta contohnya menggunakan SQLAlchemy</p>\", \"latest_revision_created_at\": \"2015-08-14T02:54:17.308Z\", \"main_background_image\": null, \"go_live_at\": null, \"title\": \"Perkenalan ORM dan SQLAlchemy\", \"seo_title\": \"\", \"slug\": \"perkenalan-orm-dan-sqlalchemy\", \"content\": \"[{\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Kemampuan database merupakan kemampuan fundamental bagi setiap programmer. Bagi orang yang baru mulai belajar database pasti pernah mendengar Object Relational Mapping atau ORM. Sebelum ORM ada, segala aktifitas dan perintah di database harus menggunakan bahasa SQL. Di era modern sekarang, hampir sebagian besar bahasa pemrograman yang digunakan bersifat <i>object oriented</i>, seperti Java, Python dan C++, ORM dibuat agar objek dapat dipetakan atau direlasikan ke suatu record di database, ORM juga mengubah sintaks SQL menjadi sintaks yang bersifat <i>object-oriented.</i>\\\\u00a0 sehingga \\\\u00a0memudahkan programmer dan meningkatkan produktifitas dalam hal menggunakan database karena object sudah terhubung langsung dengan record-record pada database, code readability juga akan meningkat karena sintaks ORM lebih terlihat <i>object-oriented.</i>\\\\u00a0</p><p>Jadi bagaimana sih cara ORM mempermudah kerja programmer? ORM menterjemahkan perintah dari programmer ke dalam bahasa SQL, termasuk mengubah tipe data dari field suatu objek supaya cocok dengan tipe data pada databasenya. ORM ada banyak, masing-masing memiliki kelebihan dan kekurangan, dan semuanya hampir berbentuk suatu library atau module yang kita install sendiri sesuai dengan bahasa pemrograman kita, namun ada juga ORM yang sudah terintegrasi pada suatu framework, contohnya ORM Django. Faktor utama bagus atau tidaknya dari suatu ORM adalah dari segi performa, seperti seberapa cepat suatu ORM dapat melaksanakan query yang kompleks. Perbandingan berbagai ORM Python yang lumayan detail bisa dilihat\\\\u00a0<a href=\\\\\\\"http://www.pythoncentral.io/sqlalchemy-vs-orms/\\\\\\\">disini</a>.\\\\u00a0</p><p>Disini saya akan menggunakan SQLAlchemy sebagai ORM pilihan saya, karena SQLAlchemy adalah ORM yang paling banyak digunakan di Python sehingga lebih mudah googling jika ada kesulitan...</p><p></p><p>Berikut merupakan demonstrasi SQLAlchemy</p>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"table users\\\"}, {\\\"type\\\": \\\"raw_html\\\", \\\"value\\\": \\\"<table>\\\\r\\\\n<tbody>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;nama &nbsp;</td>\\\\r\\\\n<td>&nbsp;umur&nbsp;</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Andi</td>\\\\r\\\\n<td>&nbsp;19</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Budi</td>\\\\r\\\\n<td>&nbsp;18</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Agung</td>\\\\r\\\\n<td>&nbsp;14</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Adit</td>\\\\r\\\\n<td>&nbsp;15</td>\\\\r\\\\n</tr>\\\\r\\\\n</tbody>\\\\r\\\\n</table>\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Menggunakan SQL.<br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"SELECT nama\\\\r\\\\nFROM users\\\\r\\\\nWHERE umur > 17;\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Menggunakan ORM SQLAlchemy<br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"query(User).filter(User.nama > 17) \\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>ORM akan otomatis menterjemahkan statement python ke dalam bahasa SQL sehingga kedua perintah diatas akan menghasilkan hasil yang sama yaitu<br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"Andi\\\\r\\\\nBudi\\\"}, {\\\"type\\\": \\\"subheading\\\", \\\"value\\\": \\\"Demonstrasi Lengkap\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Berikutnya saya akan memberi demonstrasi sederhana pengunaan SQLAlchemy yang dikombinasikan dengan sqlite, karena sqlite sudah disupport python out-of-the-box jadi tidak perlu meng-install modules lain.\\\\u00a0pertama kita install dulu SQLAlchemy, ketik command berikut di command-line.<br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"pip install sqlalchemy\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Langkah pertama alah membuat database yang memiliki tabel daftarNilai. Sesuai dengan kepanjangan ORM, yaitu\\\\u00a0<i>Object\\\\u00a0Relational Mapper</i>, table yang kita inginkan nanti otomatis terbuat sesuai dengan class atau objek yang kita definisikan jadi langkah selanjutnya adalah mendefinisikan class daftarNilai. Kumpulan class yang akan dijadikan table kita letakkan di satu file yang bernama models.py<br/></p>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"models.py\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"from sqlalchemy.ext.declarative import declarative_base\\\\r\\\\nfrom sqlalchemy import Column, Integer, String\\\\r\\\\n# Kita harus import setiap tipe data yang ingin kita gunakan\\\\r\\\\nfrom sqlalchemy import create_engine\\\\r\\\\n\\\\r\\\\nBase = declarative_base()\\\\r\\\\n# setiap class yang akan dipetakan harus inherit dari instance declarative_base\\\\r\\\\n\\\\r\\\\nclass DaftarNilai(Base): #inherit from Base\\\\r\\\\n    __tablename__ = 'daftarNilai'    \\\\r\\\\n    # tablename disini hanya sebagai metadata\\\\r\\\\n\\\\r\\\\n    nama = Column(String(50), nullable=False, primary_key=True)\\\\r\\\\n    # membuat kolom nama dengan tipe data\\\\r\\\\n    # String maksimal panjang 50 karakter   \\\\r\\\\n    # dan tidak boleh Null   \\\\r\\\\n    nilai = Column(Integer, nullable=False)   \\\\r\\\\n\\\\r\\\\nengine = create_engine('sqlite:///latihan.db') \\\\r\\\\n# menyiapkan connector/engine sqlite\\\\r\\\\n\\\\r\\\\nBase.metadata.create_all(engine) \\\\r\\\\n# menjalankan perintah pemetaan/membuat database\\\"}]\", \"live\": true, \"thumbnail_image\": null, \"has_unpublished_changes\": false, \"related_post\": \"[]\", \"angular_url\": \"perkenalan-orm-dan-sqlalchemy\", \"title_extended\": \"\", \"numchild\": 0, \"content_type\": 34, \"show_in_menus\": false, \"date\": \"2015-04-07\", \"path\": \"0001000100010007\", \"url_path\": \"/home/blog/perkenalan-orm-dan-sqlalchemy/\", \"expired\": false, \"pk\": 12, \"categories\": \"[{\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Python\\\"}, {\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Software\\\"}]\", \"main_image\": null, \"locked\": false, \"author\": \"Abirafdi Raditya Putra\", \"depth\": 4, \"first_published_at\": \"2015-08-14T02:26:40.339Z\", \"expire_at\": null}", "user": 1, "page": 12}, "model": "wagtailcore.pagerevision", "pk": 71}, {"fields": {"approved_go_live_at": null, "created_at": "2015-08-14T02:57:31.077Z", "submitted_for_moderation": false, "content_json": "{\"search_description\": \"\", \"owner\": 1, \"intro\": \"<p>Kemampuan database merupakan kemampuan fundamental bagi setiap programmer. Bagi orang yang baru mulai belajar database pasti pernah mendengar Object Relational Mapping atau ORM. Pada post ini saya akan menjelaskan apa itu ORM berserta contohnya menggunakan SQLAlchemy</p>\", \"latest_revision_created_at\": \"2015-08-14T02:55:12.318Z\", \"main_background_image\": null, \"go_live_at\": null, \"title\": \"Perkenalan ORM dan SQLAlchemy\", \"seo_title\": \"\", \"slug\": \"perkenalan-orm-dan-sqlalchemy\", \"content\": \"[{\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Kemampuan database merupakan kemampuan fundamental bagi setiap programmer. Bagi orang yang baru mulai belajar database pasti pernah mendengar Object Relational Mapping atau ORM. Sebelum ORM ada, segala aktifitas dan perintah di database harus menggunakan bahasa SQL. Di era modern sekarang, hampir sebagian besar bahasa pemrograman yang digunakan bersifat <i>object oriented</i>, seperti Java, Python dan C++, ORM dibuat agar objek dapat dipetakan atau direlasikan ke suatu record di database, ORM juga mengubah sintaks SQL menjadi sintaks yang bersifat <i>object-oriented.</i>\\\\u00a0 sehingga \\\\u00a0memudahkan programmer dan meningkatkan produktifitas dalam hal menggunakan database karena object sudah terhubung langsung dengan record-record pada database, code readability juga akan meningkat karena sintaks ORM lebih terlihat <i>object-oriented.</i>\\\\u00a0</p><p>Jadi bagaimana sih cara ORM mempermudah kerja programmer? ORM menterjemahkan perintah dari programmer ke dalam bahasa SQL, termasuk mengubah tipe data dari field suatu objek supaya cocok dengan tipe data pada databasenya. ORM ada banyak, masing-masing memiliki kelebihan dan kekurangan, dan semuanya hampir berbentuk suatu library atau module yang kita install sendiri sesuai dengan bahasa pemrograman kita, namun ada juga ORM yang sudah terintegrasi pada suatu framework, contohnya ORM Django. Faktor utama bagus atau tidaknya dari suatu ORM adalah dari segi performa, seperti seberapa cepat suatu ORM dapat melaksanakan query yang kompleks. Perbandingan berbagai ORM Python yang lumayan detail bisa dilihat\\\\u00a0<a href=\\\\\\\"http://www.pythoncentral.io/sqlalchemy-vs-orms/\\\\\\\">disini</a>.\\\\u00a0</p><p>Disini saya akan menggunakan SQLAlchemy sebagai ORM pilihan saya, karena SQLAlchemy adalah ORM yang paling banyak digunakan di Python sehingga lebih mudah googling jika ada kesulitan...</p><p></p><p>Berikut merupakan demonstrasi SQLAlchemy</p>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"table users\\\"}, {\\\"type\\\": \\\"raw_html\\\", \\\"value\\\": \\\"<table>\\\\r\\\\n<tbody>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;nama &nbsp;</td>\\\\r\\\\n<td>&nbsp;umur&nbsp;</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Andi</td>\\\\r\\\\n<td>&nbsp;19</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Budi</td>\\\\r\\\\n<td>&nbsp;18</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Agung</td>\\\\r\\\\n<td>&nbsp;14</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Adit</td>\\\\r\\\\n<td>&nbsp;15</td>\\\\r\\\\n</tr>\\\\r\\\\n</tbody>\\\\r\\\\n</table>\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Menggunakan SQL.<br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"SELECT nama\\\\r\\\\nFROM users\\\\r\\\\nWHERE umur > 17;\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Menggunakan ORM SQLAlchemy<br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"query(User).filter(User.nama > 17) \\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>ORM akan otomatis menterjemahkan statement python ke dalam bahasa SQL sehingga kedua perintah diatas akan menghasilkan hasil yang sama yaitu<br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"Andi\\\\r\\\\nBudi\\\"}, {\\\"type\\\": \\\"subheading\\\", \\\"value\\\": \\\"Demonstrasi Lengkap\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Berikutnya saya akan memberi demonstrasi sederhana pengunaan SQLAlchemy yang dikombinasikan dengan sqlite, karena sqlite sudah disupport python out-of-the-box jadi tidak perlu meng-install modules lain.\\\\u00a0pertama kita install dulu SQLAlchemy, ketik command berikut di command-line.<br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"pip install sqlalchemy\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Langkah pertama alah membuat database yang memiliki tabel daftarNilai. Sesuai dengan kepanjangan ORM, yaitu\\\\u00a0<i>Object\\\\u00a0Relational Mapper</i>, table yang kita inginkan nanti otomatis terbuat sesuai dengan class atau objek yang kita definisikan jadi langkah selanjutnya adalah mendefinisikan class daftarNilai. Kumpulan class yang akan dijadikan table kita letakkan di satu file yang bernama models.py<br/></p>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"models.py\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"from sqlalchemy.ext.declarative import declarative_base\\\\r\\\\nfrom sqlalchemy import Column, Integer, String\\\\r\\\\n# Kita harus import setiap tipe data yang ingin kita gunakan\\\\r\\\\nfrom sqlalchemy import create_engine\\\\r\\\\n\\\\r\\\\nBase = declarative_base()\\\\r\\\\n# setiap class yang akan dipetakan harus inherit dari instance declarative_base\\\\r\\\\n\\\\r\\\\nclass DaftarNilai(Base): #inherit from Base\\\\r\\\\n    __tablename__ = 'daftarNilai'    \\\\r\\\\n    # tablename disini hanya sebagai metadata\\\\r\\\\n\\\\r\\\\n    nama = Column(String(50), nullable=False, primary_key=True)\\\\r\\\\n    # membuat kolom nama dengan tipe data\\\\r\\\\n    # String maksimal panjang 50 karakter   \\\\r\\\\n    # dan tidak boleh Null   \\\\r\\\\n    nilai = Column(Integer, nullable=False)   \\\\r\\\\n\\\\r\\\\nengine = create_engine('sqlite:///latihan.db') \\\\r\\\\n# menyiapkan connector/engine sqlite\\\\r\\\\n\\\\r\\\\nBase.metadata.create_all(engine) \\\\r\\\\n# menjalankan perintah pemetaan/membuat database\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Lalu jalankan script diatas. Sqlite bersifat file-based, sehingga urlnya menggunakan 3 slashes. Isi nama databasenya sesuai kemauan anda, nantinya akan terbuat file .db di folder yang sama dengan script ini dijalankan.\\\\u00a0</p><p><br/></p><p>Selanjutnya kita akan coba menambahkan record<br/></p>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"tambahrecord.py\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"from sqlalchemy.orm import sessionmaker\\\\r\\\\nfrom sqlalchemy import create_engine\\\\r\\\\nfrom models import DaftarNilai, Base\\\\r\\\\n\\\\r\\\\nengine = create_engine('sqlite:///latihan/db')\\\\r\\\\n#membuat connector/engine\\\\r\\\\n\\\\r\\\\nDBSession = sessionmaker()\\\\r\\\\n#sebelum kita mengakses database, kita harus membuat session\\\\r\\\\n#terlebih dahulu\\\\r\\\\n\\\\r\\\\nDBSession.configure(bind=engine)\\\\r\\\\nsession = DBSession\\\\r\\\\n\\\\r\\\\nnew_DaftarNilai = DaftarNilai(nama='Andi', nilai=80)\\\\r\\\\n#untuk membuat record baru, kita mendefinisikannya dalam bentuk objek\\\\r\\\\n#yang nantinya akan otomatis berubah menjadi tipe data yang cocok\\\\r\\\\n#dengan database\\\\r\\\\n\\\\r\\\\nsession.add(new_DaftarNilai)\\\\r\\\\nnew_DaftarNilai = DaftarNilai(nama='Adit', nilai=90)\\\\r\\\\nsession.add(new_DaftarNilai)\\\\r\\\\n\\\\r\\\\nsession.commit()\\\\r\\\\n#jangan lupa untuk commit perubahan yang terjadi\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Nah untuk melihat apakah record yang baru saja kita masukkan berhasil ditambah ke database, buat script lihatrecord.py</p>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"lihatrecord.py\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"from sqlalchemy.orm import sessionmaker\\\\r\\\\nfrom sqlalchemy import create_engine\\\\r\\\\nfrom models import DaftarNilai, Base\\\\r\\\\n\\\\r\\\\nengine = create_engine('sqlite:///latihan/db')\\\\r\\\\nDBSession = sessionmaker()\\\\r\\\\nDBSession.configure(bind=engine)\\\\r\\\\nsession = DBSession\\\\r\\\\n\\\\r\\\\nsemuaDaftarNilai = session.query(DaftarNilai).all()\\\\r\\\\n#mengambil semua record ke dalam variabel semuaDaftarNilai\\\\r\\\\n#karena terdapat 2 record, maka bisa di iterasikan dengan for\\\\r\\\\n\\\\r\\\\nfor mahasiswa in semuaDaftarNilai:\\\\r\\\\n    print mahasiswa.nama + ' ' + str(mahasiswa.nilai) + '/n'\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>jalankan testrecord.py maka akan didapat hasil querynya.</p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"Andi 80\\\\r\\\\nAdit 90\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Jika kalian gabungkan semua script diatas, kalian tidak perlu membuat engine dan sesssion pada pembuatan record dan melihat record, engine dan session hanya perlu dibuat sekali saja.\\\\u00a0</p><p>\\\\u00a0\\\\u00a0</p><p>Further reading:</p><ul><li><a href=\\\\\\\"http://docs.sqlalchemy.org/en/rel_0_9/orm/tutorial.html\\\\\\\">SQLAlchemy</a></li><li>SQLAlchemy koneksi dengan\\\\u00a0<a href=\\\\\\\"http://docs.sqlalchemy.org/en/rel_0_9/core/engines.html\\\\\\\">database lain\\\\u00a0</a></li></ul>\\\"}]\", \"live\": true, \"thumbnail_image\": null, \"has_unpublished_changes\": false, \"related_post\": \"[]\", \"angular_url\": \"perkenalan-orm-dan-sqlalchemy\", \"title_extended\": \"\", \"numchild\": 0, \"content_type\": 34, \"show_in_menus\": false, \"date\": \"2015-04-07\", \"path\": \"0001000100010007\", \"url_path\": \"/home/blog/perkenalan-orm-dan-sqlalchemy/\", \"expired\": false, \"pk\": 12, \"categories\": \"[{\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Python\\\"}, {\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Software\\\"}]\", \"main_image\": null, \"locked\": false, \"author\": \"Abirafdi Raditya Putra\", \"depth\": 4, \"first_published_at\": \"2015-08-14T02:26:40.339Z\", \"expire_at\": null}", "user": 1, "page": 12}, "model": "wagtailcore.pagerevision", "pk": 72}, {"fields": {"approved_go_live_at": null, "created_at": "2015-08-14T02:58:06.087Z", "submitted_for_moderation": false, "content_json": "{\"search_description\": \"\", \"owner\": 1, \"intro\": \"<p>Kemampuan database merupakan kemampuan fundamental bagi setiap programmer. Bagi orang yang baru mulai belajar database pasti pernah mendengar Object Relational Mapping atau ORM. Pada post ini saya akan menjelaskan apa itu ORM berserta contohnya menggunakan SQLAlchemy</p>\", \"latest_revision_created_at\": \"2015-08-14T02:57:31.077Z\", \"main_background_image\": null, \"go_live_at\": null, \"title\": \"Perkenalan ORM dan SQLAlchemy\", \"seo_title\": \"\", \"slug\": \"perkenalan-orm-dan-sqlalchemy\", \"content\": \"[{\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Kemampuan database merupakan kemampuan fundamental bagi setiap programmer. Bagi orang yang baru mulai belajar database pasti pernah mendengar Object Relational Mapping atau ORM. Sebelum ORM ada, segala aktifitas dan perintah di database harus menggunakan bahasa SQL. Di era modern sekarang, hampir sebagian besar bahasa pemrograman yang digunakan bersifat <i>object oriented</i>, seperti Java, Python dan C++, ORM dibuat agar objek dapat dipetakan atau direlasikan ke suatu record di database, ORM juga mengubah sintaks SQL menjadi sintaks yang bersifat <i>object-oriented.</i>\\\\u00a0 sehingga \\\\u00a0memudahkan programmer dan meningkatkan produktifitas dalam hal menggunakan database karena object sudah terhubung langsung dengan record-record pada database, code readability juga akan meningkat karena sintaks ORM lebih terlihat <i>object-oriented.</i>\\\\u00a0</p><p>Jadi bagaimana sih cara ORM mempermudah kerja programmer? ORM menterjemahkan perintah dari programmer ke dalam bahasa SQL, termasuk mengubah tipe data dari field suatu objek supaya cocok dengan tipe data pada databasenya. ORM ada banyak, masing-masing memiliki kelebihan dan kekurangan, dan semuanya hampir berbentuk suatu library atau module yang kita install sendiri sesuai dengan bahasa pemrograman kita, namun ada juga ORM yang sudah terintegrasi pada suatu framework, contohnya ORM Django. Faktor utama bagus atau tidaknya dari suatu ORM adalah dari segi performa, seperti seberapa cepat suatu ORM dapat melaksanakan query yang kompleks. Perbandingan berbagai ORM Python yang lumayan detail bisa dilihat\\\\u00a0<a href=\\\\\\\"http://www.pythoncentral.io/sqlalchemy-vs-orms/\\\\\\\">disini</a>.\\\\u00a0</p><p>Disini saya akan menggunakan SQLAlchemy sebagai ORM pilihan saya, karena SQLAlchemy adalah ORM yang paling banyak digunakan di Python sehingga lebih mudah googling jika ada kesulitan...</p><p></p><p>Berikut merupakan demonstrasi SQLAlchemy</p>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"table users\\\"}, {\\\"type\\\": \\\"raw_html\\\", \\\"value\\\": \\\"<table>\\\\r\\\\n<tbody>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;nama &nbsp;</td>\\\\r\\\\n<td>&nbsp;umur&nbsp;</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Andi</td>\\\\r\\\\n<td>&nbsp;19</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Budi</td>\\\\r\\\\n<td>&nbsp;18</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Agung</td>\\\\r\\\\n<td>&nbsp;14</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Adit</td>\\\\r\\\\n<td>&nbsp;15</td>\\\\r\\\\n</tr>\\\\r\\\\n</tbody>\\\\r\\\\n</table>\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p><br/></p><p>menggunakan SQL.<br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"SELECT nama\\\\r\\\\nFROM users\\\\r\\\\nWHERE umur > 17;\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p><br/></p><p>menggunakan ORM SQLAlchemy<br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"query(User).filter(User.nama > 17) \\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p><br/></p><p>ORM akan otomatis menterjemahkan statement python ke dalam bahasa SQL sehingga kedua perintah diatas akan menghasilkan hasil yang sama yaitu<br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"Andi\\\\r\\\\nBudi\\\"}, {\\\"type\\\": \\\"subheading\\\", \\\"value\\\": \\\"Demonstrasi Lengkap\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Berikutnya saya akan memberi demonstrasi sederhana pengunaan SQLAlchemy yang dikombinasikan dengan sqlite, karena sqlite sudah disupport python out-of-the-box jadi tidak perlu meng-install modules lain.\\\\u00a0pertama kita install dulu SQLAlchemy, ketik command berikut di command-line.<br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"pip install sqlalchemy\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Langkah pertama alah membuat database yang memiliki tabel daftarNilai. Sesuai dengan kepanjangan ORM, yaitu\\\\u00a0<i>Object\\\\u00a0Relational Mapper</i>, table yang kita inginkan nanti otomatis terbuat sesuai dengan class atau objek yang kita definisikan jadi langkah selanjutnya adalah mendefinisikan class daftarNilai. Kumpulan class yang akan dijadikan table kita letakkan di satu file yang bernama models.py<br/></p>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"models.py\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"from sqlalchemy.ext.declarative import declarative_base\\\\r\\\\nfrom sqlalchemy import Column, Integer, String\\\\r\\\\n# Kita harus import setiap tipe data yang ingin kita gunakan\\\\r\\\\nfrom sqlalchemy import create_engine\\\\r\\\\n\\\\r\\\\nBase = declarative_base()\\\\r\\\\n# setiap class yang akan dipetakan harus inherit dari instance declarative_base\\\\r\\\\n\\\\r\\\\nclass DaftarNilai(Base): #inherit from Base\\\\r\\\\n    __tablename__ = 'daftarNilai'    \\\\r\\\\n    # tablename disini hanya sebagai metadata\\\\r\\\\n\\\\r\\\\n    nama = Column(String(50), nullable=False, primary_key=True)\\\\r\\\\n    # membuat kolom nama dengan tipe data\\\\r\\\\n    # String maksimal panjang 50 karakter   \\\\r\\\\n    # dan tidak boleh Null   \\\\r\\\\n    nilai = Column(Integer, nullable=False)   \\\\r\\\\n\\\\r\\\\nengine = create_engine('sqlite:///latihan.db') \\\\r\\\\n# menyiapkan connector/engine sqlite\\\\r\\\\n\\\\r\\\\nBase.metadata.create_all(engine) \\\\r\\\\n# menjalankan perintah pemetaan/membuat database\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Lalu jalankan script diatas. Sqlite bersifat file-based, sehingga urlnya menggunakan 3 slashes. Isi nama databasenya sesuai kemauan anda, nantinya akan terbuat file .db di folder yang sama dengan script ini dijalankan.\\\\u00a0</p><p><br/></p><p>Selanjutnya kita akan coba menambahkan record<br/></p>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"tambahrecord.py\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"from sqlalchemy.orm import sessionmaker\\\\r\\\\nfrom sqlalchemy import create_engine\\\\r\\\\nfrom models import DaftarNilai, Base\\\\r\\\\n\\\\r\\\\nengine = create_engine('sqlite:///latihan/db')\\\\r\\\\n#membuat connector/engine\\\\r\\\\n\\\\r\\\\nDBSession = sessionmaker()\\\\r\\\\n#sebelum kita mengakses database, kita harus membuat session\\\\r\\\\n#terlebih dahulu\\\\r\\\\n\\\\r\\\\nDBSession.configure(bind=engine)\\\\r\\\\nsession = DBSession\\\\r\\\\n\\\\r\\\\nnew_DaftarNilai = DaftarNilai(nama='Andi', nilai=80)\\\\r\\\\n#untuk membuat record baru, kita mendefinisikannya dalam bentuk objek\\\\r\\\\n#yang nantinya akan otomatis berubah menjadi tipe data yang cocok\\\\r\\\\n#dengan database\\\\r\\\\n\\\\r\\\\nsession.add(new_DaftarNilai)\\\\r\\\\nnew_DaftarNilai = DaftarNilai(nama='Adit', nilai=90)\\\\r\\\\nsession.add(new_DaftarNilai)\\\\r\\\\n\\\\r\\\\nsession.commit()\\\\r\\\\n#jangan lupa untuk commit perubahan yang terjadi\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Nah untuk melihat apakah record yang baru saja kita masukkan berhasil ditambah ke database, buat script lihatrecord.py</p>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"lihatrecord.py\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"from sqlalchemy.orm import sessionmaker\\\\r\\\\nfrom sqlalchemy import create_engine\\\\r\\\\nfrom models import DaftarNilai, Base\\\\r\\\\n\\\\r\\\\nengine = create_engine('sqlite:///latihan/db')\\\\r\\\\nDBSession = sessionmaker()\\\\r\\\\nDBSession.configure(bind=engine)\\\\r\\\\nsession = DBSession\\\\r\\\\n\\\\r\\\\nsemuaDaftarNilai = session.query(DaftarNilai).all()\\\\r\\\\n#mengambil semua record ke dalam variabel semuaDaftarNilai\\\\r\\\\n#karena terdapat 2 record, maka bisa di iterasikan dengan for\\\\r\\\\n\\\\r\\\\nfor mahasiswa in semuaDaftarNilai:\\\\r\\\\n    print mahasiswa.nama + ' ' + str(mahasiswa.nilai) + '/n'\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>jalankan testrecord.py maka akan didapat hasil querynya.</p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"Andi 80\\\\r\\\\nAdit 90\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Jika kalian gabungkan semua script diatas, kalian tidak perlu membuat engine dan sesssion pada pembuatan record dan melihat record, engine dan session hanya perlu dibuat sekali saja.\\\\u00a0</p><p>\\\\u00a0\\\\u00a0</p><p>Further reading:</p><ul><li><a href=\\\\\\\"http://docs.sqlalchemy.org/en/rel_0_9/orm/tutorial.html\\\\\\\">SQLAlchemy</a></li><li>SQLAlchemy koneksi dengan\\\\u00a0<a href=\\\\\\\"http://docs.sqlalchemy.org/en/rel_0_9/core/engines.html\\\\\\\">database lain\\\\u00a0</a></li></ul>\\\"}]\", \"live\": true, \"thumbnail_image\": null, \"has_unpublished_changes\": false, \"related_post\": \"[]\", \"angular_url\": \"perkenalan-orm-dan-sqlalchemy\", \"title_extended\": \"\", \"numchild\": 0, \"content_type\": 34, \"show_in_menus\": false, \"date\": \"2015-04-07\", \"path\": \"0001000100010007\", \"url_path\": \"/home/blog/perkenalan-orm-dan-sqlalchemy/\", \"expired\": false, \"pk\": 12, \"categories\": \"[{\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Python\\\"}, {\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Software\\\"}]\", \"main_image\": null, \"locked\": false, \"author\": \"Abirafdi Raditya Putra\", \"depth\": 4, \"first_published_at\": \"2015-08-14T02:26:40.339Z\", \"expire_at\": null}", "user": 1, "page": 12}, "model": "wagtailcore.pagerevision", "pk": 73}, {"fields": {"approved_go_live_at": null, "created_at": "2015-08-14T02:58:45.546Z", "submitted_for_moderation": false, "content_json": "{\"search_description\": \"\", \"owner\": 1, \"intro\": \"<p>Kemampuan database merupakan kemampuan fundamental bagi setiap programmer. Bagi orang yang baru mulai belajar database pasti pernah mendengar Object Relational Mapping atau ORM. Pada post ini saya akan menjelaskan apa itu ORM berserta contohnya menggunakan SQLAlchemy</p>\", \"latest_revision_created_at\": \"2015-08-14T02:58:06.087Z\", \"main_background_image\": null, \"go_live_at\": null, \"title\": \"Perkenalan ORM dan SQLAlchemy\", \"seo_title\": \"\", \"slug\": \"perkenalan-orm-dan-sqlalchemy\", \"content\": \"[{\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Kemampuan database merupakan kemampuan fundamental bagi setiap programmer. Bagi orang yang baru mulai belajar database pasti pernah mendengar Object Relational Mapping atau ORM. Sebelum ORM ada, segala aktifitas dan perintah di database harus menggunakan bahasa SQL. Di era modern sekarang, hampir sebagian besar bahasa pemrograman yang digunakan bersifat <i>object oriented</i>, seperti Java, Python dan C++, ORM dibuat agar objek dapat dipetakan atau direlasikan ke suatu record di database, ORM juga mengubah sintaks SQL menjadi sintaks yang bersifat <i>object-oriented.</i>\\\\u00a0 sehingga \\\\u00a0memudahkan programmer dan meningkatkan produktifitas dalam hal menggunakan database karena object sudah terhubung langsung dengan record-record pada database, code readability juga akan meningkat karena sintaks ORM lebih terlihat <i>object-oriented.</i>\\\\u00a0</p><p>Jadi bagaimana sih cara ORM mempermudah kerja programmer? ORM menterjemahkan perintah dari programmer ke dalam bahasa SQL, termasuk mengubah tipe data dari field suatu objek supaya cocok dengan tipe data pada databasenya. ORM ada banyak, masing-masing memiliki kelebihan dan kekurangan, dan semuanya hampir berbentuk suatu library atau module yang kita install sendiri sesuai dengan bahasa pemrograman kita, namun ada juga ORM yang sudah terintegrasi pada suatu framework, contohnya ORM Django. Faktor utama bagus atau tidaknya dari suatu ORM adalah dari segi performa, seperti seberapa cepat suatu ORM dapat melaksanakan query yang kompleks. Perbandingan berbagai ORM Python yang lumayan detail bisa dilihat\\\\u00a0<a href=\\\\\\\"http://www.pythoncentral.io/sqlalchemy-vs-orms/\\\\\\\">disini</a>.\\\\u00a0</p><p>Disini saya akan menggunakan SQLAlchemy sebagai ORM pilihan saya, karena SQLAlchemy adalah ORM yang paling banyak digunakan di Python sehingga lebih mudah googling jika ada kesulitan...</p><p></p><p>Berikut merupakan demonstrasi SQLAlchemy</p>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"table users\\\"}, {\\\"type\\\": \\\"raw_html\\\", \\\"value\\\": \\\"<table>\\\\r\\\\n<tbody>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;nama &nbsp;</td>\\\\r\\\\n<td>&nbsp;umur&nbsp;</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Andi</td>\\\\r\\\\n<td>&nbsp;19</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Budi</td>\\\\r\\\\n<td>&nbsp;18</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Agung</td>\\\\r\\\\n<td>&nbsp;14</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Adit</td>\\\\r\\\\n<td>&nbsp;15</td>\\\\r\\\\n</tr>\\\\r\\\\n</tbody>\\\\r\\\\n</table>\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p><br/></p><p>menggunakan SQL.<br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"SELECT nama\\\\r\\\\nFROM users\\\\r\\\\nWHERE umur > 17;\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p><br/></p><p>menggunakan ORM SQLAlchemy<br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"query(User).filter(User.nama > 17) \\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p><br/></p><p>ORM akan otomatis menterjemahkan statement python ke dalam bahasa SQL sehingga kedua perintah diatas akan menghasilkan hasil yang sama yaitu<br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"Andi\\\\r\\\\nBudi\\\"}, {\\\"type\\\": \\\"subheading\\\", \\\"value\\\": \\\"Demonstrasi Lengkap\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Berikutnya saya akan memberi demonstrasi sederhana pengunaan SQLAlchemy yang dikombinasikan dengan sqlite, karena sqlite sudah disupport python out-of-the-box jadi tidak perlu meng-install modules lain.\\\\u00a0pertama kita install dulu SQLAlchemy, ketik command berikut di command-line.<br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"pip install sqlalchemy\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Langkah pertama alah membuat database yang memiliki tabel daftarNilai. Sesuai dengan kepanjangan ORM, yaitu\\\\u00a0<i>Object\\\\u00a0Relational Mapper</i>, table yang kita inginkan nanti otomatis terbuat sesuai dengan class atau objek yang kita definisikan jadi langkah selanjutnya adalah mendefinisikan class daftarNilai. Kumpulan class yang akan dijadikan table kita letakkan di satu file yang bernama models.py<br/></p>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"models.py\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"from sqlalchemy.ext.declarative import declarative_base\\\\r\\\\nfrom sqlalchemy import Column, Integer, String\\\\r\\\\n# Kita harus import setiap tipe data yang ingin kita gunakan\\\\r\\\\nfrom sqlalchemy import create_engine\\\\r\\\\n\\\\r\\\\nBase = declarative_base()\\\\r\\\\n# setiap class yang akan dipetakan harus inherit dari instance declarative_base\\\\r\\\\n\\\\r\\\\nclass DaftarNilai(Base): #inherit from Base\\\\r\\\\n    __tablename__ = 'daftarNilai'    \\\\r\\\\n    # tablename disini hanya sebagai metadata\\\\r\\\\n\\\\r\\\\n    nama = Column(String(50), nullable=False, primary_key=True)\\\\r\\\\n    # membuat kolom nama dengan tipe data\\\\r\\\\n    # String maksimal panjang 50 karakter   \\\\r\\\\n    # dan tidak boleh Null   \\\\r\\\\n    nilai = Column(Integer, nullable=False)   \\\\r\\\\n\\\\r\\\\nengine = create_engine('sqlite:///latihan.db') \\\\r\\\\n# menyiapkan connector/engine sqlite\\\\r\\\\n\\\\r\\\\nBase.metadata.create_all(engine) \\\\r\\\\n# menjalankan perintah pemetaan/membuat database\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Lalu jalankan script diatas. Sqlite bersifat file-based, sehingga urlnya menggunakan 3 slashes. Isi nama databasenya sesuai kemauan anda, nantinya akan terbuat file .db di folder yang sama dengan script ini dijalankan.\\\\u00a0</p><p>Selanjutnya kita akan coba menambahkan record<br/></p>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"tambahrecord.py\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"from sqlalchemy.orm import sessionmaker\\\\r\\\\nfrom sqlalchemy import create_engine\\\\r\\\\nfrom models import DaftarNilai, Base\\\\r\\\\n\\\\r\\\\nengine = create_engine('sqlite:///latihan/db')\\\\r\\\\n#membuat connector/engine\\\\r\\\\n\\\\r\\\\nDBSession = sessionmaker()\\\\r\\\\n#sebelum kita mengakses database, kita harus membuat session\\\\r\\\\n#terlebih dahulu\\\\r\\\\n\\\\r\\\\nDBSession.configure(bind=engine)\\\\r\\\\nsession = DBSession\\\\r\\\\n\\\\r\\\\nnew_DaftarNilai = DaftarNilai(nama='Andi', nilai=80)\\\\r\\\\n#untuk membuat record baru, kita mendefinisikannya dalam bentuk objek\\\\r\\\\n#yang nantinya akan otomatis berubah menjadi tipe data yang cocok\\\\r\\\\n#dengan database\\\\r\\\\n\\\\r\\\\nsession.add(new_DaftarNilai)\\\\r\\\\nnew_DaftarNilai = DaftarNilai(nama='Adit', nilai=90)\\\\r\\\\nsession.add(new_DaftarNilai)\\\\r\\\\n\\\\r\\\\nsession.commit()\\\\r\\\\n#jangan lupa untuk commit perubahan yang terjadi\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Nah untuk melihat apakah record yang baru saja kita masukkan berhasil ditambah ke database, buat script lihatrecord.py</p>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"lihatrecord.py\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"from sqlalchemy.orm import sessionmaker\\\\r\\\\nfrom sqlalchemy import create_engine\\\\r\\\\nfrom models import DaftarNilai, Base\\\\r\\\\n\\\\r\\\\nengine = create_engine('sqlite:///latihan/db')\\\\r\\\\nDBSession = sessionmaker()\\\\r\\\\nDBSession.configure(bind=engine)\\\\r\\\\nsession = DBSession\\\\r\\\\n\\\\r\\\\nsemuaDaftarNilai = session.query(DaftarNilai).all()\\\\r\\\\n#mengambil semua record ke dalam variabel semuaDaftarNilai\\\\r\\\\n#karena terdapat 2 record, maka bisa di iterasikan dengan for\\\\r\\\\n\\\\r\\\\nfor mahasiswa in semuaDaftarNilai:\\\\r\\\\n    print mahasiswa.nama + ' ' + str(mahasiswa.nilai) + '/n'\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>jalankan testrecord.py maka akan didapat hasil querynya.</p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"Andi 80\\\\r\\\\nAdit 90\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Jika kalian gabungkan semua script diatas, kalian tidak perlu membuat engine dan sesssion pada pembuatan record dan melihat record, engine dan session hanya perlu dibuat sekali saja.\\\\u00a0</p><p>\\\\u00a0\\\\u00a0</p><p>Further reading:</p><ul><li><a href=\\\\\\\"http://docs.sqlalchemy.org/en/rel_0_9/orm/tutorial.html\\\\\\\">SQLAlchemy</a></li><li>SQLAlchemy koneksi dengan\\\\u00a0<a href=\\\\\\\"http://docs.sqlalchemy.org/en/rel_0_9/core/engines.html\\\\\\\">database lain\\\\u00a0</a></li></ul>\\\"}]\", \"live\": true, \"thumbnail_image\": null, \"has_unpublished_changes\": false, \"related_post\": \"[]\", \"angular_url\": \"perkenalan-orm-dan-sqlalchemy\", \"title_extended\": \"\", \"numchild\": 0, \"content_type\": 34, \"show_in_menus\": false, \"date\": \"2015-04-07\", \"path\": \"0001000100010007\", \"url_path\": \"/home/blog/perkenalan-orm-dan-sqlalchemy/\", \"expired\": false, \"pk\": 12, \"categories\": \"[{\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Python\\\"}, {\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Software\\\"}]\", \"main_image\": null, \"locked\": false, \"author\": \"Abirafdi Raditya Putra\", \"depth\": 4, \"first_published_at\": \"2015-08-14T02:26:40.339Z\", \"expire_at\": null}", "user": 1, "page": 12}, "model": "wagtailcore.pagerevision", "pk": 74}, {"fields": {"approved_go_live_at": null, "created_at": "2015-08-14T03:05:22.123Z", "submitted_for_moderation": false, "content_json": "{\"search_description\": \"\", \"owner\": 1, \"intro\": \"<p>Kemampuan database merupakan kemampuan fundamental bagi setiap programmer. Bagi orang yang baru mulai belajar database pasti pernah mendengar Object Relational Mapping atau ORM. Pada post ini saya akan menjelaskan apa itu ORM berserta contohnya menggunakan SQLAlchemy</p>\", \"latest_revision_created_at\": \"2015-08-14T02:58:45.546Z\", \"main_background_image\": null, \"go_live_at\": null, \"title\": \"Perkenalan ORM dan SQLAlchemy\", \"seo_title\": \"\", \"slug\": \"perkenalan-orm-dan-sqlalchemy\", \"content\": \"[{\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Kemampuan database merupakan kemampuan fundamental bagi setiap programmer. Bagi orang yang baru mulai belajar database pasti pernah mendengar Object Relational Mapping atau ORM. Sebelum ORM ada, segala aktifitas dan perintah di database harus menggunakan bahasa SQL. Di era modern sekarang, hampir sebagian besar bahasa pemrograman yang digunakan bersifat <i>object oriented</i>, seperti Java, Python dan C++, ORM dibuat agar objek dapat dipetakan atau direlasikan ke suatu record di database, ORM juga mengubah sintaks SQL menjadi sintaks yang bersifat <i>object-oriented.</i>\\\\u00a0 sehingga \\\\u00a0memudahkan programmer dan meningkatkan produktifitas dalam hal menggunakan database karena object sudah terhubung langsung dengan record-record pada database, code readability juga akan meningkat karena sintaks ORM lebih terlihat <i>object-oriented.</i>\\\\u00a0</p><p>Jadi bagaimana cara ORM mempermudah kerja programmer? ORM menterjemahkan perintah dari programmer ke dalam bahasa SQL, termasuk mengubah tipe data dari field suatu objek supaya cocok dengan tipe data pada databasenya. ORM ada banyak, masing-masing memiliki kelebihan dan kekurangan, dan semuanya hampir berbentuk suatu library atau module yang kita install sendiri sesuai dengan bahasa pemrograman kita, namun ada juga ORM yang sudah terintegrasi pada suatu framework, contohnya ORM Django. Faktor utama bagus atau tidaknya dari suatu ORM adalah dari segi performa, seperti seberapa cepat suatu ORM dapat melaksanakan query yang kompleks. Perbandingan berbagai ORM Python yang lumayan detail bisa dilihat\\\\u00a0<a href=\\\\\\\"http://www.pythoncentral.io/sqlalchemy-vs-orms/\\\\\\\">disini</a>.\\\\u00a0</p><p>Disini saya akan menggunakan SQLAlchemy sebagai ORM pilihan saya, karena SQLAlchemy adalah ORM yang paling banyak digunakan di Python sehingga lebih mudah googling jika ada kesulitan...</p><p></p><p>Berikut merupakan demonstrasi SQLAlchemy</p>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"table users\\\"}, {\\\"type\\\": \\\"raw_html\\\", \\\"value\\\": \\\"<table>\\\\r\\\\n<tbody>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;nama &nbsp;</td>\\\\r\\\\n<td>&nbsp;umur&nbsp;</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Andi</td>\\\\r\\\\n<td>&nbsp;19</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Budi</td>\\\\r\\\\n<td>&nbsp;18</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Agung</td>\\\\r\\\\n<td>&nbsp;14</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Adit</td>\\\\r\\\\n<td>&nbsp;15</td>\\\\r\\\\n</tr>\\\\r\\\\n</tbody>\\\\r\\\\n</table>\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p><br/></p><p>menggunakan SQL.<br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"SELECT nama\\\\r\\\\nFROM users\\\\r\\\\nWHERE umur > 17;\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p><br/></p><p>menggunakan ORM SQLAlchemy<br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"query(User).filter(User.nama > 17) \\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p><br/></p><p>ORM akan otomatis menterjemahkan statement python ke dalam bahasa SQL sehingga kedua perintah diatas akan menghasilkan hasil yang sama yaitu<br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"Andi\\\\r\\\\nBudi\\\"}, {\\\"type\\\": \\\"subheading\\\", \\\"value\\\": \\\"Demonstrasi Lengkap\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Berikutnya saya akan memberi demonstrasi sederhana pengunaan SQLAlchemy yang dikombinasikan dengan sqlite, karena sqlite sudah disupport python out-of-the-box jadi tidak perlu meng-install modules lain.\\\\u00a0pertama kita install dulu SQLAlchemy, ketik command berikut di command-line.<br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"pip install sqlalchemy\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Langkah pertama alah membuat database yang memiliki tabel daftarNilai. Sesuai dengan kepanjangan ORM, yaitu\\\\u00a0<i>Object\\\\u00a0Relational Mapper</i>, table yang kita inginkan nanti otomatis terbuat sesuai dengan class atau objek yang kita definisikan, jadi langkah selanjutnya adalah mendefinisikan class daftarNilai. Kumpulan class yang akan dijadikan table kita letakkan di satu file yang bernama models.py<br/></p>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"models.py\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"from sqlalchemy.ext.declarative import declarative_base\\\\r\\\\nfrom sqlalchemy import Column, Integer, String\\\\r\\\\n# Kita harus import setiap tipe data yang ingin kita gunakan\\\\r\\\\nfrom sqlalchemy import create_engine\\\\r\\\\n\\\\r\\\\nBase = declarative_base()\\\\r\\\\n# setiap class yang akan dipetakan harus inherit dari instance declarative_base\\\\r\\\\n\\\\r\\\\nclass DaftarNilai(Base): #inherit from Base\\\\r\\\\n    __tablename__ = 'daftarNilai'    \\\\r\\\\n    # tablename disini hanya sebagai metadata\\\\r\\\\n\\\\r\\\\n    nama = Column(String(50), nullable=False, primary_key=True)\\\\r\\\\n    # membuat kolom nama dengan tipe data\\\\r\\\\n    # String maksimal panjang 50 karakter   \\\\r\\\\n    # dan tidak boleh Null   \\\\r\\\\n    nilai = Column(Integer, nullable=False)   \\\\r\\\\n\\\\r\\\\nengine = create_engine('sqlite:///latihan.db') \\\\r\\\\n# menyiapkan connector/engine sqlite\\\\r\\\\n\\\\r\\\\nBase.metadata.create_all(engine) \\\\r\\\\n# menjalankan perintah pemetaan/membuat database\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Lalu jalankan script diatas. Sqlite bersifat file-based, sehingga urlnya menggunakan 3 slashes. Isi nama databasenya sesuai kemauan anda, nantinya akan terbuat file .db di folder yang sama dengan script ini dijalankan.\\\\u00a0</p><p>Berikut merupakan script untuk menambah object atau record ke database.<br/></p>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"tambahrecord.py\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"from sqlalchemy.orm import sessionmaker\\\\r\\\\nfrom sqlalchemy import create_engine\\\\r\\\\nfrom models import DaftarNilai, Base\\\\r\\\\n\\\\r\\\\nengine = create_engine('sqlite:///latihan/db')\\\\r\\\\n# membuat connector/engine\\\\r\\\\n\\\\r\\\\nDBSession = sessionmaker()\\\\r\\\\n# sebelum kita mengakses database, kita harus membuat session\\\\r\\\\n# terlebih dahulu\\\\r\\\\n\\\\r\\\\nDBSession.configure(bind=engine)\\\\r\\\\nsession = DBSession\\\\r\\\\n\\\\r\\\\nnew_DaftarNilai = DaftarNilai(nama='Andi', nilai=80)\\\\r\\\\n# untuk membuat record baru, kita mendefinisikannya dalam bentuk objek\\\\r\\\\n# yang nantinya akan otomatis berubah menjadi tipe data yang cocok\\\\r\\\\n# dengan database\\\\r\\\\n\\\\r\\\\nsession.add(new_DaftarNilai)\\\\r\\\\nnew_DaftarNilai = DaftarNilai(nama='Adit', nilai=90)\\\\r\\\\nsession.add(new_DaftarNilai)\\\\r\\\\n\\\\r\\\\nsession.commit()\\\\r\\\\n# jangan lupa untuk commit perubahan yang terjadi\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p><br/></p><p>Untuk melihat apakah record yang baru saja kita masukkan berhasil ditambah ke database, buat script lihatrecord.py</p>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"lihatrecord.py\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"from sqlalchemy.orm import sessionmaker\\\\r\\\\nfrom sqlalchemy import create_engine\\\\r\\\\nfrom models import DaftarNilai, Base\\\\r\\\\n\\\\r\\\\nengine = create_engine('sqlite:///latihan/db')\\\\r\\\\nDBSession = sessionmaker()\\\\r\\\\nDBSession.configure(bind=engine)\\\\r\\\\nsession = DBSession\\\\r\\\\n\\\\r\\\\nsemuaDaftarNilai = session.query(DaftarNilai).all()\\\\r\\\\n# mengambil semua record ke dalam variabel semuaDaftarNilai\\\\r\\\\n# karena terdapat 2 record, maka bisa di iterasikan dengan for\\\\r\\\\n\\\\r\\\\nfor mahasiswa in semuaDaftarNilai:\\\\r\\\\n    print mahasiswa.nama + ' ' + str(mahasiswa.nilai) + '/n'\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>jalankan testrecord.py maka akan didapat hasil querynya.</p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"Andi 80\\\\r\\\\nAdit 90\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Jika kalian gabungkan semua script diatas pada satu file, instantiasi engine dan session hanya perlu sekali saja.</p>\\\"}, {\\\"type\\\": \\\"subheading\\\", \\\"value\\\": \\\"Conclusion\\\"}]\", \"live\": true, \"thumbnail_image\": null, \"has_unpublished_changes\": false, \"related_post\": \"[]\", \"angular_url\": \"perkenalan-orm-dan-sqlalchemy\", \"title_extended\": \"\", \"numchild\": 0, \"content_type\": 34, \"show_in_menus\": false, \"date\": \"2015-04-07\", \"path\": \"0001000100010007\", \"url_path\": \"/home/blog/perkenalan-orm-dan-sqlalchemy/\", \"expired\": false, \"pk\": 12, \"categories\": \"[{\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Python\\\"}, {\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Software\\\"}]\", \"main_image\": null, \"locked\": false, \"author\": \"Abirafdi Raditya Putra\", \"depth\": 4, \"first_published_at\": \"2015-08-14T02:26:40.339Z\", \"expire_at\": null}", "user": 1, "page": 12}, "model": "wagtailcore.pagerevision", "pk": 75}, {"fields": {"approved_go_live_at": null, "created_at": "2015-08-14T03:05:48.560Z", "submitted_for_moderation": false, "content_json": "{\"search_description\": \"\", \"owner\": 1, \"intro\": \"<p>Kemampuan database merupakan kemampuan fundamental bagi setiap programmer. Bagi orang yang baru mulai belajar database pasti pernah mendengar Object Relational Mapping atau ORM. Pada post ini saya akan menjelaskan apa itu ORM berserta contohnya menggunakan SQLAlchemy</p>\", \"latest_revision_created_at\": \"2015-08-14T03:05:22.123Z\", \"main_background_image\": null, \"go_live_at\": null, \"title\": \"Perkenalan ORM dan SQLAlchemy\", \"seo_title\": \"\", \"slug\": \"perkenalan-orm-dan-sqlalchemy\", \"content\": \"[{\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Kemampuan database merupakan kemampuan fundamental bagi setiap programmer. Bagi orang yang baru mulai belajar database pasti pernah mendengar Object Relational Mapping atau ORM. Sebelum ORM ada, segala aktifitas dan perintah di database harus menggunakan bahasa SQL. Di era modern sekarang, hampir sebagian besar bahasa pemrograman yang digunakan bersifat <i>object oriented</i>, seperti Java, Python dan C++, ORM dibuat agar objek dapat dipetakan atau direlasikan ke suatu record di database, ORM juga mengubah sintaks SQL menjadi sintaks yang bersifat <i>object-oriented.</i>\\\\u00a0 sehingga \\\\u00a0memudahkan programmer dan meningkatkan produktifitas dalam hal menggunakan database karena object sudah terhubung langsung dengan record-record pada database, code readability juga akan meningkat karena sintaks ORM lebih terlihat <i>object-oriented.</i>\\\\u00a0</p><p>Jadi bagaimana cara ORM mempermudah kerja programmer? ORM menterjemahkan perintah dari programmer ke dalam bahasa SQL, termasuk mengubah tipe data dari field suatu objek supaya cocok dengan tipe data pada databasenya. ORM ada banyak, masing-masing memiliki kelebihan dan kekurangan, dan semuanya hampir berbentuk suatu library atau module yang kita install sendiri sesuai dengan bahasa pemrograman kita, namun ada juga ORM yang sudah terintegrasi pada suatu framework, contohnya ORM Django. Faktor utama bagus atau tidaknya dari suatu ORM adalah dari segi performa, seperti seberapa cepat suatu ORM dapat melaksanakan query yang kompleks. Perbandingan berbagai ORM Python yang lumayan detail bisa dilihat\\\\u00a0<a href=\\\\\\\"http://www.pythoncentral.io/sqlalchemy-vs-orms/\\\\\\\">disini</a>.\\\\u00a0</p><p>Disini saya akan menggunakan SQLAlchemy sebagai ORM pilihan saya, karena SQLAlchemy adalah ORM yang paling banyak digunakan di Python sehingga lebih mudah googling jika ada kesulitan...</p><p></p><p>Berikut merupakan demonstrasi singkat ORM SQLAlchemy</p>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"table users\\\"}, {\\\"type\\\": \\\"raw_html\\\", \\\"value\\\": \\\"<table>\\\\r\\\\n<tbody>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;nama &nbsp;</td>\\\\r\\\\n<td>&nbsp;umur&nbsp;</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Andi</td>\\\\r\\\\n<td>&nbsp;19</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Budi</td>\\\\r\\\\n<td>&nbsp;18</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Agung</td>\\\\r\\\\n<td>&nbsp;14</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Adit</td>\\\\r\\\\n<td>&nbsp;15</td>\\\\r\\\\n</tr>\\\\r\\\\n</tbody>\\\\r\\\\n</table>\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p><br/></p><p>menggunakan SQL.<br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"SELECT nama\\\\r\\\\nFROM users\\\\r\\\\nWHERE umur > 17;\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p><br/></p><p>menggunakan ORM SQLAlchemy<br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"query(User).filter(User.nama > 17) \\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p><br/></p><p>ORM akan otomatis menterjemahkan statement python ke dalam bahasa SQL sehingga kedua perintah diatas akan menghasilkan hasil yang sama yaitu<br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"Andi\\\\r\\\\nBudi\\\"}, {\\\"type\\\": \\\"subheading\\\", \\\"value\\\": \\\"Demonstrasi Lengkap\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Berikutnya saya akan memberi demonstrasi sederhana pengunaan SQLAlchemy yang dikombinasikan dengan sqlite, karena sqlite sudah disupport python out-of-the-box jadi tidak perlu meng-install modules lain.\\\\u00a0pertama kita install dulu SQLAlchemy, ketik command berikut di command-line.<br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"pip install sqlalchemy\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Langkah pertama alah membuat database yang memiliki tabel daftarNilai. Sesuai dengan kepanjangan ORM, yaitu\\\\u00a0<i>Object\\\\u00a0Relational Mapper</i>, table yang kita inginkan nanti otomatis terbuat sesuai dengan class atau objek yang kita definisikan, jadi langkah selanjutnya adalah mendefinisikan class daftarNilai. Kumpulan class yang akan dijadikan table kita letakkan di satu file yang bernama models.py<br/></p>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"models.py\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"from sqlalchemy.ext.declarative import declarative_base\\\\r\\\\nfrom sqlalchemy import Column, Integer, String\\\\r\\\\n# Kita harus import setiap tipe data yang ingin kita gunakan\\\\r\\\\nfrom sqlalchemy import create_engine\\\\r\\\\n\\\\r\\\\nBase = declarative_base()\\\\r\\\\n# setiap class yang akan dipetakan harus inherit dari instance declarative_base\\\\r\\\\n\\\\r\\\\nclass DaftarNilai(Base): #inherit from Base\\\\r\\\\n    __tablename__ = 'daftarNilai'    \\\\r\\\\n    # tablename disini hanya sebagai metadata\\\\r\\\\n\\\\r\\\\n    nama = Column(String(50), nullable=False, primary_key=True)\\\\r\\\\n    # membuat kolom nama dengan tipe data\\\\r\\\\n    # String maksimal panjang 50 karakter   \\\\r\\\\n    # dan tidak boleh Null   \\\\r\\\\n    nilai = Column(Integer, nullable=False)   \\\\r\\\\n\\\\r\\\\nengine = create_engine('sqlite:///latihan.db') \\\\r\\\\n# menyiapkan connector/engine sqlite\\\\r\\\\n\\\\r\\\\nBase.metadata.create_all(engine) \\\\r\\\\n# menjalankan perintah pemetaan/membuat database\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Lalu jalankan script diatas. Sqlite bersifat file-based, sehingga urlnya menggunakan 3 slashes. Isi nama databasenya sesuai kemauan anda, nantinya akan terbuat file .db di folder yang sama dengan script ini dijalankan.\\\\u00a0</p><p>Berikut merupakan script untuk menambah object atau record ke database.<br/></p>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"tambahrecord.py\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"from sqlalchemy.orm import sessionmaker\\\\r\\\\nfrom sqlalchemy import create_engine\\\\r\\\\nfrom models import DaftarNilai, Base\\\\r\\\\n\\\\r\\\\nengine = create_engine('sqlite:///latihan/db')\\\\r\\\\n# membuat connector/engine\\\\r\\\\n\\\\r\\\\nDBSession = sessionmaker()\\\\r\\\\n# sebelum kita mengakses database, kita harus membuat session\\\\r\\\\n# terlebih dahulu\\\\r\\\\n\\\\r\\\\nDBSession.configure(bind=engine)\\\\r\\\\nsession = DBSession\\\\r\\\\n\\\\r\\\\nnew_DaftarNilai = DaftarNilai(nama='Andi', nilai=80)\\\\r\\\\n# untuk membuat record baru, kita mendefinisikannya dalam bentuk objek\\\\r\\\\n# yang nantinya akan otomatis berubah menjadi tipe data yang cocok\\\\r\\\\n# dengan database\\\\r\\\\n\\\\r\\\\nsession.add(new_DaftarNilai)\\\\r\\\\nnew_DaftarNilai = DaftarNilai(nama='Adit', nilai=90)\\\\r\\\\nsession.add(new_DaftarNilai)\\\\r\\\\n\\\\r\\\\nsession.commit()\\\\r\\\\n# jangan lupa untuk commit perubahan yang terjadi\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p><br/></p><p>Untuk melihat apakah record yang baru saja kita masukkan berhasil ditambah ke database, buat script lihatrecord.py</p>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"lihatrecord.py\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"from sqlalchemy.orm import sessionmaker\\\\r\\\\nfrom sqlalchemy import create_engine\\\\r\\\\nfrom models import DaftarNilai, Base\\\\r\\\\n\\\\r\\\\nengine = create_engine('sqlite:///latihan/db')\\\\r\\\\nDBSession = sessionmaker()\\\\r\\\\nDBSession.configure(bind=engine)\\\\r\\\\nsession = DBSession\\\\r\\\\n\\\\r\\\\nsemuaDaftarNilai = session.query(DaftarNilai).all()\\\\r\\\\n# mengambil semua record ke dalam variabel semuaDaftarNilai\\\\r\\\\n# karena terdapat 2 record, maka bisa di iterasikan dengan for\\\\r\\\\n\\\\r\\\\nfor mahasiswa in semuaDaftarNilai:\\\\r\\\\n    print mahasiswa.nama + ' ' + str(mahasiswa.nilai) + '/n'\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>jalankan testrecord.py maka akan didapat hasil querynya.</p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"Andi 80\\\\r\\\\nAdit 90\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Jika kalian gabungkan semua script diatas pada satu file, instantiasi engine dan session hanya perlu sekali saja.</p>\\\"}, {\\\"type\\\": \\\"subheading\\\", \\\"value\\\": \\\"Conclusion\\\"}]\", \"live\": true, \"thumbnail_image\": null, \"has_unpublished_changes\": false, \"related_post\": \"[]\", \"angular_url\": \"perkenalan-orm-dan-sqlalchemy\", \"title_extended\": \"\", \"numchild\": 0, \"content_type\": 34, \"show_in_menus\": false, \"date\": \"2015-04-07\", \"path\": \"0001000100010007\", \"url_path\": \"/home/blog/perkenalan-orm-dan-sqlalchemy/\", \"expired\": false, \"pk\": 12, \"categories\": \"[{\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Python\\\"}, {\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Software\\\"}]\", \"main_image\": null, \"locked\": false, \"author\": \"Abirafdi Raditya Putra\", \"depth\": 4, \"first_published_at\": \"2015-08-14T02:26:40.339Z\", \"expire_at\": null}", "user": 1, "page": 12}, "model": "wagtailcore.pagerevision", "pk": 76}, {"fields": {"approved_go_live_at": null, "created_at": "2015-08-14T03:09:02.512Z", "submitted_for_moderation": false, "content_json": "{\"search_description\": \"\", \"owner\": 1, \"intro\": \"<p>Kemampuan database merupakan kemampuan fundamental bagi setiap programmer. Bagi orang yang baru mulai belajar database pasti pernah mendengar Object Relational Mapping atau ORM. Pada post ini saya akan menjelaskan apa itu ORM berserta contohnya menggunakan SQLAlchemy</p>\", \"latest_revision_created_at\": \"2015-08-14T03:05:48.560Z\", \"main_background_image\": null, \"go_live_at\": null, \"title\": \"Perkenalan ORM dan SQLAlchemy\", \"seo_title\": \"\", \"slug\": \"perkenalan-orm-dan-sqlalchemy\", \"content\": \"[{\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Kemampuan database merupakan kemampuan fundamental bagi setiap programmer. Bagi orang yang baru mulai belajar database pasti pernah mendengar Object Relational Mapping atau ORM. Sebelum ORM ada, segala aktifitas dan perintah di database harus menggunakan bahasa SQL. Di era modern sekarang, hampir sebagian besar bahasa pemrograman yang digunakan bersifat <i>object oriented</i>, seperti Java, Python dan C++, ORM dibuat agar objek dapat dipetakan atau direlasikan ke suatu record di database, ORM juga mengubah sintaks SQL menjadi sintaks yang bersifat <i>object-oriented.</i>\\\\u00a0 sehingga \\\\u00a0memudahkan programmer dan meningkatkan produktifitas dalam hal menggunakan database karena object sudah terhubung langsung dengan record-record pada database, code readability juga akan meningkat karena sintaks ORM lebih terlihat <i>object-oriented.</i>\\\\u00a0</p><p>Jadi bagaimana cara ORM mempermudah kerja programmer? ORM menterjemahkan perintah dari programmer ke dalam bahasa SQL, termasuk mengubah tipe data dari field suatu objek supaya cocok dengan tipe data pada databasenya. ORM ada banyak, masing-masing memiliki kelebihan dan kekurangan, dan semuanya hampir berbentuk suatu library atau module yang kita install sendiri sesuai dengan bahasa pemrograman kita, namun ada juga ORM yang sudah terintegrasi pada suatu framework, contohnya ORM Django. Faktor utama bagus atau tidaknya dari suatu ORM adalah dari segi performa, seperti seberapa cepat suatu ORM dapat melaksanakan query yang kompleks. Perbandingan berbagai ORM Python yang lumayan detail bisa dilihat\\\\u00a0<a href=\\\\\\\"http://www.pythoncentral.io/sqlalchemy-vs-orms/\\\\\\\">disini</a>.\\\\u00a0</p><p>Disini saya akan menggunakan SQLAlchemy sebagai ORM pilihan saya, karena SQLAlchemy adalah ORM yang paling banyak digunakan di Python sehingga lebih mudah googling jika ada kesulitan...</p><p></p><p>Berikut merupakan demonstrasi singkat ORM SQLAlchemy</p>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"table users\\\"}, {\\\"type\\\": \\\"raw_html\\\", \\\"value\\\": \\\"<table>\\\\r\\\\n<tbody>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;nama &nbsp;</td>\\\\r\\\\n<td>&nbsp;umur&nbsp;</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Andi</td>\\\\r\\\\n<td>&nbsp;19</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Budi</td>\\\\r\\\\n<td>&nbsp;18</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Agung</td>\\\\r\\\\n<td>&nbsp;14</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Adit</td>\\\\r\\\\n<td>&nbsp;15</td>\\\\r\\\\n</tr>\\\\r\\\\n</tbody>\\\\r\\\\n</table>\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p><br/></p><p>menggunakan SQL.<br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"SELECT nama\\\\r\\\\nFROM users\\\\r\\\\nWHERE umur > 17;\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p><br/></p><p>menggunakan ORM SQLAlchemy<br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"query(User).filter(User.nama > 17) \\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p><br/></p><p>ORM akan otomatis menterjemahkan statement python ke dalam bahasa SQL sehingga kedua perintah diatas akan menghasilkan hasil yang sama yaitu<br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"Andi\\\\r\\\\nBudi\\\"}, {\\\"type\\\": \\\"subheading\\\", \\\"value\\\": \\\"Demonstrasi Lengkap\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Berikutnya saya akan memberi demonstrasi sederhana pengunaan SQLAlchemy yang dikombinasikan dengan SQLite, karena sqlite sudah disupport python out-of-the-box jadi tidak perlu meng-install modules lain.\\\\u00a0pertama kita install dulu SQLAlchemy, ketik command berikut di command-line.<br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"pip install sqlalchemy\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Langkah pertama alah membuat database yang memiliki tabel daftarNilai. Sesuai dengan kepanjangan ORM, yaitu\\\\u00a0<i>Object\\\\u00a0Relational Mapper</i>, table yang kita inginkan nanti otomatis terbuat sesuai dengan class atau objek yang kita definisikan, jadi langkah selanjutnya adalah mendefinisikan class daftarNilai. Kumpulan class yang akan dijadikan table kita letakkan di satu file yang bernama models.py<br/></p>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"models.py\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"from sqlalchemy.ext.declarative import declarative_base\\\\r\\\\nfrom sqlalchemy import Column, Integer, String\\\\r\\\\n# Kita harus import setiap tipe data yang ingin kita gunakan\\\\r\\\\nfrom sqlalchemy import create_engine\\\\r\\\\n\\\\r\\\\nBase = declarative_base()\\\\r\\\\n# setiap class yang akan dipetakan harus inherit dari instance declarative_base\\\\r\\\\n\\\\r\\\\nclass DaftarNilai(Base): #inherit from Base\\\\r\\\\n    __tablename__ = 'daftarNilai'    \\\\r\\\\n    # tablename disini hanya sebagai metadata\\\\r\\\\n\\\\r\\\\n    nama = Column(String(50), nullable=False, primary_key=True)\\\\r\\\\n    # membuat kolom nama dengan tipe data\\\\r\\\\n    # String maksimal panjang 50 karakter   \\\\r\\\\n    # dan tidak boleh Null   \\\\r\\\\n    nilai = Column(Integer, nullable=False)   \\\\r\\\\n\\\\r\\\\nengine = create_engine('sqlite:///latihan.db') \\\\r\\\\n# menyiapkan connector/engine sqlite\\\\r\\\\n\\\\r\\\\nBase.metadata.create_all(engine) \\\\r\\\\n# menjalankan perintah pemetaan/membuat database\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Lalu jalankan script diatas. SQLite bersifat file-based, sehingga urlnya menggunakan 3 slashes. Isi nama databasenya sesuai kemauan anda, nantinya akan terbuat file .db di folder yang sama dengan script ini dijalankan.\\\\u00a0</p><p>Berikut merupakan script untuk menambah object atau record ke database.<br/></p>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"tambahrecord.py\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"from sqlalchemy.orm import sessionmaker\\\\r\\\\nfrom sqlalchemy import create_engine\\\\r\\\\nfrom models import DaftarNilai, Base\\\\r\\\\n\\\\r\\\\nengine = create_engine('sqlite:///latihan/db')\\\\r\\\\n# membuat connector/engine\\\\r\\\\n\\\\r\\\\nDBSession = sessionmaker()\\\\r\\\\n# sebelum kita mengakses database, kita harus membuat session\\\\r\\\\n# terlebih dahulu\\\\r\\\\n\\\\r\\\\nDBSession.configure(bind=engine)\\\\r\\\\nsession = DBSession\\\\r\\\\n\\\\r\\\\nnew_DaftarNilai = DaftarNilai(nama='Andi', nilai=80)\\\\r\\\\n# untuk membuat record baru, kita mendefinisikannya dalam bentuk objek\\\\r\\\\n# yang nantinya akan otomatis berubah menjadi tipe data yang cocok\\\\r\\\\n# dengan database\\\\r\\\\n\\\\r\\\\nsession.add(new_DaftarNilai)\\\\r\\\\nnew_DaftarNilai = DaftarNilai(nama='Adit', nilai=90)\\\\r\\\\nsession.add(new_DaftarNilai)\\\\r\\\\n\\\\r\\\\nsession.commit()\\\\r\\\\n# jangan lupa untuk commit perubahan yang terjadi\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p><br/></p><p>Untuk melihat apakah record yang baru saja kita masukkan berhasil ditambah ke database, buat script lihatrecord.py</p>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"lihatrecord.py\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"from sqlalchemy.orm import sessionmaker\\\\r\\\\nfrom sqlalchemy import create_engine\\\\r\\\\nfrom models import DaftarNilai, Base\\\\r\\\\n\\\\r\\\\nengine = create_engine('sqlite:///latihan/db')\\\\r\\\\nDBSession = sessionmaker()\\\\r\\\\nDBSession.configure(bind=engine)\\\\r\\\\nsession = DBSession\\\\r\\\\n\\\\r\\\\nsemuaDaftarNilai = session.query(DaftarNilai).all()\\\\r\\\\n# mengambil semua record ke dalam variabel semuaDaftarNilai\\\\r\\\\n# karena terdapat 2 record, maka bisa di iterasikan dengan for\\\\r\\\\n\\\\r\\\\nfor mahasiswa in semuaDaftarNilai:\\\\r\\\\n    print mahasiswa.nama + ' ' + str(mahasiswa.nilai) + '/n'\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>jalankan testrecord.py maka akan didapat hasil querynya.</p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"Andi 80\\\\r\\\\nAdit 90\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Jika kalian gabungkan semua script diatas pada satu file, instantiasi engine dan session hanya perlu sekali saja.\\\\\\\\</p><p><br/></p><p>Selesai sudah demonstrasi penggunaan SQAlchemy dengan SQLite. Semoga dapat memberikan pencerahan bagi pembaca.</p><p><br/></p><p>Further reading:</p><ul><li><a href=\\\\\\\"http://docs.sqlalchemy.org/en/rel_0_9/orm/tutorial.html\\\\\\\">SQLAlchemy</a></li><li>SQLAlchemy koneksi dengan\\\\u00a0<a href=\\\\\\\"http://docs.sqlalchemy.org/en/rel_0_9/core/engines.html\\\\\\\">database lain\\\\u00a0</a></li></ul>\\\"}]\", \"live\": true, \"thumbnail_image\": null, \"has_unpublished_changes\": false, \"related_post\": \"[]\", \"angular_url\": \"perkenalan-orm-dan-sqlalchemy\", \"title_extended\": \"\", \"numchild\": 0, \"content_type\": 34, \"show_in_menus\": false, \"date\": \"2015-04-07\", \"path\": \"0001000100010007\", \"url_path\": \"/home/blog/perkenalan-orm-dan-sqlalchemy/\", \"expired\": false, \"pk\": 12, \"categories\": \"[{\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Python\\\"}, {\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Software\\\"}]\", \"main_image\": null, \"locked\": false, \"author\": \"Abirafdi Raditya Putra\", \"depth\": 4, \"first_published_at\": \"2015-08-14T02:26:40.339Z\", \"expire_at\": null}", "user": 1, "page": 12}, "model": "wagtailcore.pagerevision", "pk": 77}, {"fields": {"approved_go_live_at": null, "created_at": "2015-08-14T03:16:39.451Z", "submitted_for_moderation": false, "content_json": "{\"search_description\": \"\", \"owner\": 1, \"intro\": \"<p>Kemampuan database merupakan kemampuan fundamental bagi setiap programmer. Bagi orang yang baru mulai belajar database pasti pernah mendengar Object Relational Mapping atau ORM. Pada post ini saya akan menjelaskan apa itu ORM berserta contohnya menggunakan SQLAlchemy</p>\", \"latest_revision_created_at\": \"2015-08-14T03:09:02.512Z\", \"main_background_image\": null, \"go_live_at\": null, \"title\": \"Perkenalan ORM dan SQLAlchemy\", \"seo_title\": \"\", \"slug\": \"perkenalan-orm-dan-sqlalchemy\", \"content\": \"[{\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Kemampuan database merupakan kemampuan fundamental bagi setiap programmer. Bagi orang yang baru mulai belajar database pasti pernah mendengar Object Relational Mapping atau ORM. Sebelum ORM ada, segala aktifitas dan perintah di database harus menggunakan bahasa SQL. Di era modern sekarang, hampir sebagian besar bahasa pemrograman yang digunakan bersifat <i>object oriented</i>, seperti Java, Python dan C++, ORM dibuat agar objek dapat dipetakan atau direlasikan ke suatu record di database, ORM juga mengubah sintaks SQL menjadi sintaks yang bersifat <i>object-oriented.</i>\\\\u00a0 sehingga \\\\u00a0memudahkan programmer dan meningkatkan produktifitas dalam hal menggunakan database karena object sudah terhubung langsung dengan record-record pada database, code readability juga akan meningkat karena sintaks ORM lebih terlihat <i>object-oriented.</i>\\\\u00a0</p><p>Jadi bagaimana cara ORM mempermudah kerja programmer? ORM menterjemahkan perintah dari programmer ke dalam bahasa SQL, termasuk mengubah tipe data dari field suatu objek supaya cocok dengan tipe data pada databasenya. ORM ada banyak, masing-masing memiliki kelebihan dan kekurangan, dan semuanya hampir berbentuk suatu library atau module yang kita install sendiri sesuai dengan bahasa pemrograman kita, namun ada juga ORM yang sudah terintegrasi pada suatu framework, contohnya ORM Django. Faktor utama bagus atau tidaknya dari suatu ORM adalah dari segi performa, seperti seberapa cepat suatu ORM dapat melaksanakan query yang kompleks. Perbandingan berbagai ORM Python yang lumayan detail bisa dilihat\\\\u00a0<a href=\\\\\\\"http://www.pythoncentral.io/sqlalchemy-vs-orms/\\\\\\\">disini</a>.\\\\u00a0</p><p>Disini saya akan menggunakan SQLAlchemy sebagai ORM pilihan saya, karena SQLAlchemy adalah ORM yang paling banyak digunakan di Python sehingga lebih mudah googling jika ada kesulitan...</p><p></p><p>Berikut merupakan demonstrasi singkat ORM SQLAlchemy</p>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"table users\\\"}, {\\\"type\\\": \\\"raw_html\\\", \\\"value\\\": \\\"<table>\\\\r\\\\n<tbody>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;nama &nbsp;</td>\\\\r\\\\n<td>&nbsp;umur&nbsp;</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Andi</td>\\\\r\\\\n<td>&nbsp;19</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Budi</td>\\\\r\\\\n<td>&nbsp;18</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Agung</td>\\\\r\\\\n<td>&nbsp;14</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Adit</td>\\\\r\\\\n<td>&nbsp;15</td>\\\\r\\\\n</tr>\\\\r\\\\n</tbody>\\\\r\\\\n</table>\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p><br/></p><p>menggunakan SQL.<br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"SELECT nama\\\\r\\\\nFROM users\\\\r\\\\nWHERE umur > 17;\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p><br/></p><p>menggunakan ORM SQLAlchemy<br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"query(User).filter(User.nama > 17) \\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p><br/></p><p>ORM akan otomatis menterjemahkan statement python ke dalam bahasa SQL sehingga kedua perintah diatas akan menghasilkan hasil yang sama yaitu<br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"Andi\\\\r\\\\nBudi\\\"}, {\\\"type\\\": \\\"subheading\\\", \\\"value\\\": \\\"Demonstrasi Lengkap\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Berikutnya saya akan memberi demonstrasi sederhana pengunaan SQLAlchemy yang dikombinasikan dengan SQLite, karena sqlite sudah disupport python out-of-the-box jadi tidak perlu meng-install modules lain.\\\\u00a0pertama kita install dulu SQLAlchemy, ketik command berikut di command-line.<br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"pip install sqlalchemy\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Langkah pertama alah membuat database yang memiliki tabel daftarNilai. Sesuai dengan kepanjangan ORM, yaitu\\\\u00a0<i>Object\\\\u00a0Relational Mapper</i>, table yang kita inginkan nanti otomatis terbuat sesuai dengan class atau objek yang kita definisikan, jadi langkah selanjutnya adalah mendefinisikan class daftarNilai. Kumpulan class yang akan dijadikan table kita letakkan di satu file yang bernama models.py<br/></p>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"models.py\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"from sqlalchemy.ext.declarative import declarative_base\\\\r\\\\nfrom sqlalchemy import Column, Integer, String\\\\r\\\\n# Kita harus import setiap tipe data yang ingin kita gunakan\\\\r\\\\nfrom sqlalchemy import create_engine\\\\r\\\\n\\\\r\\\\nBase = declarative_base()\\\\r\\\\n# setiap class yang akan dipetakan harus inherit dari instance declarative_base\\\\r\\\\n\\\\r\\\\nclass DaftarNilai(Base): #inherit from Base\\\\r\\\\n    __tablename__ = 'daftarNilai'    \\\\r\\\\n    # tablename disini hanya sebagai metadata\\\\r\\\\n\\\\r\\\\n    nama = Column(String(50), nullable=False, primary_key=True)\\\\r\\\\n    # membuat kolom nama dengan tipe data\\\\r\\\\n    # String maksimal panjang 50 karakter   \\\\r\\\\n    # dan tidak boleh Null   \\\\r\\\\n    nilai = Column(Integer, nullable=False)   \\\\r\\\\n\\\\r\\\\nengine = create_engine('sqlite:///latihan.db') \\\\r\\\\n# menyiapkan connector/engine sqlite\\\\r\\\\n\\\\r\\\\nBase.metadata.create_all(engine) \\\\r\\\\n# menjalankan perintah pemetaan/membuat database\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Lalu jalankan script diatas. SQLite bersifat file-based, sehingga urlnya menggunakan 3 slashes. Isi nama databasenya sesuai kemauan anda, nantinya akan terbuat file .db di folder yang sama dengan script ini dijalankan.\\\\u00a0</p><p>Berikut merupakan script untuk menambah object atau record ke database.<br/></p>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"tambahrecord.py\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"from sqlalchemy.orm import sessionmaker\\\\r\\\\nfrom sqlalchemy import create_engine\\\\r\\\\nfrom models import DaftarNilai, Base\\\\r\\\\n\\\\r\\\\nengine = create_engine('sqlite:///latihan/db')\\\\r\\\\n# membuat connector/engine\\\\r\\\\n\\\\r\\\\nDBSession = sessionmaker()\\\\r\\\\n# sebelum kita mengakses database, kita harus membuat session\\\\r\\\\n# terlebih dahulu\\\\r\\\\n\\\\r\\\\nDBSession.configure(bind=engine)\\\\r\\\\nsession = DBSession\\\\r\\\\n\\\\r\\\\nnew_DaftarNilai = DaftarNilai(nama='Andi', nilai=80)\\\\r\\\\n# untuk membuat record baru, kita mendefinisikannya dalam bentuk objek\\\\r\\\\n# yang nantinya akan otomatis berubah menjadi tipe data yang cocok\\\\r\\\\n# dengan database\\\\r\\\\n\\\\r\\\\nsession.add(new_DaftarNilai)\\\\r\\\\nnew_DaftarNilai = DaftarNilai(nama='Adit', nilai=90)\\\\r\\\\nsession.add(new_DaftarNilai)\\\\r\\\\n\\\\r\\\\nsession.commit()\\\\r\\\\n# jangan lupa untuk commit perubahan yang terjadi\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p><br/></p><p>Untuk melihat apakah record yang baru saja kita masukkan berhasil ditambah ke database, buat script lihatrecord.py</p>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"lihatrecord.py\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"from sqlalchemy.orm import sessionmaker\\\\r\\\\nfrom sqlalchemy import create_engine\\\\r\\\\nfrom models import DaftarNilai, Base\\\\r\\\\n\\\\r\\\\nengine = create_engine('sqlite:///latihan/db')\\\\r\\\\nDBSession = sessionmaker()\\\\r\\\\nDBSession.configure(bind=engine)\\\\r\\\\nsession = DBSession\\\\r\\\\n\\\\r\\\\nsemuaDaftarNilai = session.query(DaftarNilai).all()\\\\r\\\\n# mengambil semua record ke dalam variabel semuaDaftarNilai\\\\r\\\\n# karena terdapat 2 record, maka bisa di iterasikan dengan for\\\\r\\\\n\\\\r\\\\nfor mahasiswa in semuaDaftarNilai:\\\\r\\\\n    print mahasiswa.nama + ' ' + str(mahasiswa.nilai) + '/n'\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>jalankan testrecord.py maka akan didapat hasil querynya.</p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"Andi 80\\\\r\\\\nAdit 90\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Jika kalian gabungkan semua script diatas pada satu file, instantiasi engine dan session hanya perlu sekali saja.\\\\\\\\</p><p><br/></p><p>Selesai sudah demonstrasi penggunaan SQAlchemy dengan SQLite. Semoga dapat memberikan pencerahan bagi pembaca.</p><p><br/></p><p>Further reading:</p><ul><li><a href=\\\\\\\"http://docs.sqlalchemy.org/en/rel_0_9/orm/tutorial.html\\\\\\\">SQLAlchemy</a></li><li>SQLAlchemy koneksi dengan\\\\u00a0<a href=\\\\\\\"http://docs.sqlalchemy.org/en/rel_0_9/core/engines.html\\\\\\\">database lain\\\\u00a0</a></li></ul>\\\"}]\", \"live\": true, \"thumbnail_image\": null, \"has_unpublished_changes\": false, \"related_post\": \"[]\", \"angular_url\": \"perkenalan-orm-dan-sqlalchemy\", \"title_extended\": \"\", \"numchild\": 0, \"main_image_disc\": \"image from www.agile-code.com\", \"content_type\": 34, \"show_in_menus\": false, \"date\": \"2015-04-07\", \"path\": \"0001000100010007\", \"url_path\": \"/home/blog/perkenalan-orm-dan-sqlalchemy/\", \"expired\": false, \"pk\": 12, \"categories\": \"[{\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Python\\\"}, {\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Software\\\"}]\", \"main_image\": 22, \"locked\": false, \"author\": \"Abirafdi Raditya Putra\", \"depth\": 4, \"first_published_at\": \"2015-08-14T02:26:40.339Z\", \"expire_at\": null}", "user": 1, "page": 12}, "model": "wagtailcore.pagerevision", "pk": 78}, {"fields": {"approved_go_live_at": null, "created_at": "2015-08-14T03:16:57.028Z", "submitted_for_moderation": false, "content_json": "{\"search_description\": \"\", \"owner\": 1, \"intro\": \"<p>Kemampuan database merupakan kemampuan fundamental bagi setiap programmer. Bagi orang yang baru mulai belajar database pasti pernah mendengar Object Relational Mapping atau ORM. Pada post ini saya akan menjelaskan apa itu ORM berserta contohnya menggunakan SQLAlchemy</p>\", \"latest_revision_created_at\": \"2015-08-14T03:16:39.451Z\", \"main_background_image\": null, \"go_live_at\": null, \"title\": \"Perkenalan ORM dan SQLAlchemy\", \"seo_title\": \"\", \"slug\": \"perkenalan-orm-dan-sqlalchemy\", \"content\": \"[{\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Kemampuan database merupakan kemampuan fundamental bagi setiap programmer. Bagi orang yang baru mulai belajar database pasti pernah mendengar Object Relational Mapping atau ORM. Sebelum ORM ada, segala aktifitas dan perintah di database harus menggunakan bahasa SQL. Di era modern sekarang, hampir sebagian besar bahasa pemrograman yang digunakan bersifat <i>object oriented</i>, seperti Java, Python dan C++, ORM dibuat agar objek dapat dipetakan atau direlasikan ke suatu record di database, ORM juga mengubah sintaks SQL menjadi sintaks yang bersifat <i>object-oriented.</i>\\\\u00a0 sehingga \\\\u00a0memudahkan programmer dan meningkatkan produktifitas dalam hal menggunakan database karena object sudah terhubung langsung dengan record-record pada database, code readability juga akan meningkat karena sintaks ORM lebih terlihat <i>object-oriented.</i>\\\\u00a0</p><p>Jadi bagaimana cara ORM mempermudah kerja programmer? ORM menterjemahkan perintah dari programmer ke dalam bahasa SQL, termasuk mengubah tipe data dari field suatu objek supaya cocok dengan tipe data pada databasenya. ORM ada banyak, masing-masing memiliki kelebihan dan kekurangan, dan semuanya hampir berbentuk suatu library atau module yang kita install sendiri sesuai dengan bahasa pemrograman kita, namun ada juga ORM yang sudah terintegrasi pada suatu framework, contohnya ORM Django. Faktor utama bagus atau tidaknya dari suatu ORM adalah dari segi performa, seperti seberapa cepat suatu ORM dapat melaksanakan query yang kompleks. Perbandingan berbagai ORM Python yang lumayan detail bisa dilihat\\\\u00a0<a href=\\\\\\\"http://www.pythoncentral.io/sqlalchemy-vs-orms/\\\\\\\">disini</a>.\\\\u00a0</p><p>Disini saya akan menggunakan SQLAlchemy sebagai ORM pilihan saya, karena SQLAlchemy adalah ORM yang paling banyak digunakan di Python sehingga lebih mudah googling jika ada kesulitan...</p><p></p><p>Berikut merupakan demonstrasi singkat ORM SQLAlchemy</p>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"table users\\\"}, {\\\"type\\\": \\\"raw_html\\\", \\\"value\\\": \\\"<table>\\\\r\\\\n<tbody>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;nama &nbsp;</td>\\\\r\\\\n<td>&nbsp;umur&nbsp;</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Andi</td>\\\\r\\\\n<td>&nbsp;19</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Budi</td>\\\\r\\\\n<td>&nbsp;18</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Agung</td>\\\\r\\\\n<td>&nbsp;14</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Adit</td>\\\\r\\\\n<td>&nbsp;15</td>\\\\r\\\\n</tr>\\\\r\\\\n</tbody>\\\\r\\\\n</table>\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p><br/></p><p>menggunakan SQL.<br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"SELECT nama\\\\r\\\\nFROM users\\\\r\\\\nWHERE umur > 17;\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p><br/></p><p>menggunakan ORM SQLAlchemy<br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"query(User).filter(User.nama > 17) \\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p><br/></p><p>ORM akan otomatis menterjemahkan statement python ke dalam bahasa SQL sehingga kedua perintah diatas akan menghasilkan hasil yang sama yaitu<br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"Andi\\\\r\\\\nBudi\\\"}, {\\\"type\\\": \\\"subheading\\\", \\\"value\\\": \\\"Demonstrasi Lengkap\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Berikutnya saya akan memberi demonstrasi sederhana pengunaan SQLAlchemy yang dikombinasikan dengan SQLite, karena sqlite sudah disupport python out-of-the-box jadi tidak perlu meng-install modules lain.\\\\u00a0pertama kita install dulu SQLAlchemy, ketik command berikut di command-line.<br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"pip install sqlalchemy\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Langkah pertama alah membuat database yang memiliki tabel daftarNilai. Sesuai dengan kepanjangan ORM, yaitu\\\\u00a0<i>Object\\\\u00a0Relational Mapper</i>, table yang kita inginkan nanti otomatis terbuat sesuai dengan class atau objek yang kita definisikan, jadi langkah selanjutnya adalah mendefinisikan class daftarNilai. Kumpulan class yang akan dijadikan table kita letakkan di satu file yang bernama models.py<br/></p>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"models.py\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"from sqlalchemy.ext.declarative import declarative_base\\\\r\\\\nfrom sqlalchemy import Column, Integer, String\\\\r\\\\n# Kita harus import setiap tipe data yang ingin kita gunakan\\\\r\\\\nfrom sqlalchemy import create_engine\\\\r\\\\n\\\\r\\\\nBase = declarative_base()\\\\r\\\\n# setiap class yang akan dipetakan harus inherit dari instance declarative_base\\\\r\\\\n\\\\r\\\\nclass DaftarNilai(Base): #inherit from Base\\\\r\\\\n    __tablename__ = 'daftarNilai'    \\\\r\\\\n    # tablename disini hanya sebagai metadata\\\\r\\\\n\\\\r\\\\n    nama = Column(String(50), nullable=False, primary_key=True)\\\\r\\\\n    # membuat kolom nama dengan tipe data\\\\r\\\\n    # String maksimal panjang 50 karakter   \\\\r\\\\n    # dan tidak boleh Null   \\\\r\\\\n    nilai = Column(Integer, nullable=False)   \\\\r\\\\n\\\\r\\\\nengine = create_engine('sqlite:///latihan.db') \\\\r\\\\n# menyiapkan connector/engine sqlite\\\\r\\\\n\\\\r\\\\nBase.metadata.create_all(engine) \\\\r\\\\n# menjalankan perintah pemetaan/membuat database\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Lalu jalankan script diatas. SQLite bersifat file-based, sehingga urlnya menggunakan 3 slashes. Isi nama databasenya sesuai kemauan anda, nantinya akan terbuat file .db di folder yang sama dengan script ini dijalankan.\\\\u00a0</p><p>Berikut merupakan script untuk menambah object atau record ke database.<br/></p>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"tambahrecord.py\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"from sqlalchemy.orm import sessionmaker\\\\r\\\\nfrom sqlalchemy import create_engine\\\\r\\\\nfrom models import DaftarNilai, Base\\\\r\\\\n\\\\r\\\\nengine = create_engine('sqlite:///latihan/db')\\\\r\\\\n# membuat connector/engine\\\\r\\\\n\\\\r\\\\nDBSession = sessionmaker()\\\\r\\\\n# sebelum kita mengakses database, kita harus membuat session\\\\r\\\\n# terlebih dahulu\\\\r\\\\n\\\\r\\\\nDBSession.configure(bind=engine)\\\\r\\\\nsession = DBSession\\\\r\\\\n\\\\r\\\\nnew_DaftarNilai = DaftarNilai(nama='Andi', nilai=80)\\\\r\\\\n# untuk membuat record baru, kita mendefinisikannya dalam bentuk objek\\\\r\\\\n# yang nantinya akan otomatis berubah menjadi tipe data yang cocok\\\\r\\\\n# dengan database\\\\r\\\\n\\\\r\\\\nsession.add(new_DaftarNilai)\\\\r\\\\nnew_DaftarNilai = DaftarNilai(nama='Adit', nilai=90)\\\\r\\\\nsession.add(new_DaftarNilai)\\\\r\\\\n\\\\r\\\\nsession.commit()\\\\r\\\\n# jangan lupa untuk commit perubahan yang terjadi\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p><br/></p><p>Untuk melihat apakah record yang baru saja kita masukkan berhasil ditambah ke database, buat script lihatrecord.py</p>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"lihatrecord.py\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"from sqlalchemy.orm import sessionmaker\\\\r\\\\nfrom sqlalchemy import create_engine\\\\r\\\\nfrom models import DaftarNilai, Base\\\\r\\\\n\\\\r\\\\nengine = create_engine('sqlite:///latihan/db')\\\\r\\\\nDBSession = sessionmaker()\\\\r\\\\nDBSession.configure(bind=engine)\\\\r\\\\nsession = DBSession\\\\r\\\\n\\\\r\\\\nsemuaDaftarNilai = session.query(DaftarNilai).all()\\\\r\\\\n# mengambil semua record ke dalam variabel semuaDaftarNilai\\\\r\\\\n# karena terdapat 2 record, maka bisa di iterasikan dengan for\\\\r\\\\n\\\\r\\\\nfor mahasiswa in semuaDaftarNilai:\\\\r\\\\n    print mahasiswa.nama + ' ' + str(mahasiswa.nilai) + '/n'\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>jalankan testrecord.py maka akan didapat hasil querynya.</p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"Andi 80\\\\r\\\\nAdit 90\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Jika kalian gabungkan semua script diatas pada satu file, instantiasi engine dan session hanya perlu sekali saja.\\\\\\\\</p><p><br/></p><p>Selesai sudah demonstrasi penggunaan SQAlchemy dengan SQLite. Semoga dapat memberikan pencerahan bagi pembaca.</p><p><br/></p><p>Further reading:</p><ul><li><a href=\\\\\\\"http://docs.sqlalchemy.org/en/rel_0_9/orm/tutorial.html\\\\\\\">SQLAlchemy</a></li><li>SQLAlchemy koneksi dengan\\\\u00a0<a href=\\\\\\\"http://docs.sqlalchemy.org/en/rel_0_9/core/engines.html\\\\\\\">database lain\\\\u00a0</a></li></ul>\\\"}]\", \"live\": true, \"thumbnail_image\": 22, \"has_unpublished_changes\": false, \"related_post\": \"[]\", \"angular_url\": \"perkenalan-orm-dan-sqlalchemy\", \"title_extended\": \"\", \"numchild\": 0, \"main_image_disc\": \"image from www.agile-code.com\", \"content_type\": 34, \"show_in_menus\": false, \"date\": \"2015-04-07\", \"path\": \"0001000100010007\", \"url_path\": \"/home/blog/perkenalan-orm-dan-sqlalchemy/\", \"expired\": false, \"pk\": 12, \"categories\": \"[{\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Python\\\"}, {\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Software\\\"}]\", \"main_image\": 22, \"locked\": false, \"author\": \"Abirafdi Raditya Putra\", \"depth\": 4, \"first_published_at\": \"2015-08-14T02:26:40.339Z\", \"expire_at\": null}", "user": 1, "page": 12}, "model": "wagtailcore.pagerevision", "pk": 79}, {"fields": {"approved_go_live_at": null, "created_at": "2015-08-14T03:25:17.545Z", "submitted_for_moderation": false, "content_json": "{\"search_description\": \"\", \"owner\": 1, \"intro\": \"<p>Kemampuan database merupakan kemampuan fundamental bagi setiap programmer. Bagi orang yang baru mulai belajar database pasti pernah mendengar Object Relational Mapping atau ORM. Pada post ini saya akan menjelaskan apa itu ORM berserta contohnya menggunakan SQLAlchemy</p>\", \"latest_revision_created_at\": \"2015-08-14T03:16:57.028Z\", \"main_background_image\": null, \"go_live_at\": null, \"title\": \"Perkenalan ORM dan SQLAlchemy\", \"seo_title\": \"\", \"slug\": \"perkenalan-orm-dan-sqlalchemy\", \"content\": \"[{\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Kemampuan database merupakan kemampuan fundamental bagi setiap programmer. Bagi orang yang baru mulai belajar database pasti pernah mendengar Object Relational Mapping atau ORM. Sebelum ORM ada, segala aktifitas dan perintah di database harus menggunakan bahasa SQL. Di era modern sekarang, hampir sebagian besar bahasa pemrograman yang digunakan bersifat <i>object oriented</i>, seperti Java, Python dan C++, ORM dibuat agar objek dapat dipetakan atau direlasikan ke suatu record di database, ORM juga mengubah sintaks SQL menjadi sintaks yang bersifat <i>object-oriented.</i>\\\\u00a0 sehingga \\\\u00a0memudahkan programmer dan meningkatkan produktifitas dalam hal menggunakan database karena object sudah terhubung langsung dengan record-record pada database, code readability juga akan meningkat karena sintaks ORM lebih terlihat <i>object-oriented.</i>\\\\u00a0</p><p>Jadi bagaimana cara ORM mempermudah kerja programmer? ORM menterjemahkan perintah dari programmer ke dalam bahasa SQL, termasuk mengubah tipe data dari field suatu objek supaya cocok dengan tipe data pada databasenya. ORM ada banyak, masing-masing memiliki kelebihan dan kekurangan, dan semuanya hampir berbentuk suatu library atau module yang kita install sendiri sesuai dengan bahasa pemrograman kita, namun ada juga ORM yang sudah terintegrasi pada suatu framework, contohnya ORM Django. Faktor utama bagus atau tidaknya dari suatu ORM adalah dari segi performa, seperti seberapa cepat suatu ORM dapat melaksanakan query yang kompleks. Perbandingan berbagai ORM Python yang lumayan detail bisa dilihat\\\\u00a0<a href=\\\\\\\"http://www.pythoncentral.io/sqlalchemy-vs-orms/\\\\\\\">disini</a>.\\\\u00a0</p><p>Disini saya akan menggunakan SQLAlchemy sebagai ORM pilihan saya, karena SQLAlchemy adalah ORM yang paling banyak digunakan di Python sehingga lebih mudah googling jika ada kesulitan...</p><p></p><p>Berikut merupakan demonstrasi singkat ORM SQLAlchemy</p>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"table users\\\"}, {\\\"type\\\": \\\"raw_html\\\", \\\"value\\\": \\\"<table>\\\\r\\\\n<tbody>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;nama &nbsp;</td>\\\\r\\\\n<td>&nbsp;umur&nbsp;</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Andi</td>\\\\r\\\\n<td>&nbsp;19</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Budi</td>\\\\r\\\\n<td>&nbsp;18</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Agung</td>\\\\r\\\\n<td>&nbsp;14</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Adit</td>\\\\r\\\\n<td>&nbsp;15</td>\\\\r\\\\n</tr>\\\\r\\\\n</tbody>\\\\r\\\\n</table>\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p><br/></p><p>menggunakan SQL.<br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"SELECT nama\\\\r\\\\nFROM users\\\\r\\\\nWHERE umur > 17;\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p><br/></p><p>menggunakan ORM SQLAlchemy<br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"query(User).filter(User.nama > 17) \\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p><br/></p><p>ORM akan otomatis menterjemahkan statement python ke dalam bahasa SQL sehingga kedua perintah diatas akan menghasilkan hasil yang sama yaitu<br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"Andi\\\\r\\\\nBudi\\\"}, {\\\"type\\\": \\\"subheading\\\", \\\"value\\\": \\\"Demonstrasi Lengkap\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Berikutnya saya akan memberi demonstrasi sederhana pengunaan SQLAlchemy yang dikombinasikan dengan SQLite, karena sqlite sudah disupport python out-of-the-box jadi tidak perlu meng-install modules lain.\\\\u00a0pertama kita install dulu SQLAlchemy, ketik command berikut di command-line.<br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"pip install sqlalchemy\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Langkah pertama alah membuat database yang memiliki tabel daftarNilai. Sesuai dengan kepanjangan ORM, yaitu\\\\u00a0<i>Object\\\\u00a0Relational Mapper</i>, table yang kita inginkan nanti otomatis terbuat sesuai dengan class atau objek yang kita definisikan, jadi langkah selanjutnya adalah mendefinisikan class daftarNilai. Kumpulan class yang akan dijadikan table kita letakkan di satu file yang bernama models.py<br/></p>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"models.py\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"from sqlalchemy.ext.declarative import declarative_base\\\\r\\\\nfrom sqlalchemy import Column, Integer, String\\\\r\\\\n# Kita harus import setiap tipe data yang ingin kita gunakan\\\\r\\\\nfrom sqlalchemy import create_engine\\\\r\\\\n\\\\r\\\\nBase = declarative_base()\\\\r\\\\n# setiap class yang akan dipetakan harus inherit dari instance declarative_base\\\\r\\\\n\\\\r\\\\nclass DaftarNilai(Base): #inherit from Base\\\\r\\\\n    __tablename__ = 'daftarNilai'    \\\\r\\\\n    # tablename disini hanya sebagai metadata\\\\r\\\\n\\\\r\\\\n    nama = Column(String(50), nullable=False, primary_key=True)\\\\r\\\\n    # membuat kolom nama dengan tipe data\\\\r\\\\n    # String maksimal panjang 50 karakter   \\\\r\\\\n    # dan tidak boleh Null   \\\\r\\\\n    nilai = Column(Integer, nullable=False)   \\\\r\\\\n\\\\r\\\\nengine = create_engine('sqlite:///latihan.db') \\\\r\\\\n# menyiapkan connector/engine sqlite\\\\r\\\\n\\\\r\\\\nBase.metadata.create_all(engine) \\\\r\\\\n# menjalankan perintah pemetaan/membuat database\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Lalu jalankan script diatas. SQLite bersifat file-based, sehingga urlnya menggunakan 3 slashes. Isi nama databasenya sesuai kemauan anda, nantinya akan terbuat file .db di folder yang sama dengan script ini dijalankan.\\\\u00a0</p><p>Berikut merupakan script untuk menambah object atau record ke database.<br/></p>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"tambahrecord.py\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"from sqlalchemy.orm import sessionmaker\\\\r\\\\nfrom sqlalchemy import create_engine\\\\r\\\\nfrom models import DaftarNilai, Base\\\\r\\\\n\\\\r\\\\nengine = create_engine('sqlite:///latihan/db')\\\\r\\\\n# membuat connector/engine\\\\r\\\\n\\\\r\\\\nDBSession = sessionmaker()\\\\r\\\\n# sebelum kita mengakses database, kita harus membuat session\\\\r\\\\n# terlebih dahulu\\\\r\\\\n\\\\r\\\\nDBSession.configure(bind=engine)\\\\r\\\\nsession = DBSession\\\\r\\\\n\\\\r\\\\nnew_DaftarNilai = DaftarNilai(nama='Andi', nilai=80)\\\\r\\\\n# untuk membuat record baru, kita mendefinisikannya dalam bentuk objek\\\\r\\\\n# yang nantinya akan otomatis berubah menjadi tipe data yang cocok\\\\r\\\\n# dengan database\\\\r\\\\n\\\\r\\\\nsession.add(new_DaftarNilai)\\\\r\\\\nnew_DaftarNilai = DaftarNilai(nama='Adit', nilai=90)\\\\r\\\\nsession.add(new_DaftarNilai)\\\\r\\\\n\\\\r\\\\nsession.commit()\\\\r\\\\n# jangan lupa untuk commit perubahan yang terjadi\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p><br/></p><p>Untuk melihat apakah record yang baru saja kita masukkan berhasil ditambah ke database, buat script lihatrecord.py</p>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"lihatrecord.py\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"from sqlalchemy.orm import sessionmaker\\\\r\\\\nfrom sqlalchemy import create_engine\\\\r\\\\nfrom models import DaftarNilai, Base\\\\r\\\\n\\\\r\\\\nengine = create_engine('sqlite:///latihan/db')\\\\r\\\\nDBSession = sessionmaker()\\\\r\\\\nDBSession.configure(bind=engine)\\\\r\\\\nsession = DBSession\\\\r\\\\n\\\\r\\\\nsemuaDaftarNilai = session.query(DaftarNilai).all()\\\\r\\\\n# mengambil semua record ke dalam variabel semuaDaftarNilai\\\\r\\\\n# karena terdapat 2 record, maka bisa di iterasikan dengan for\\\\r\\\\n\\\\r\\\\nfor mahasiswa in semuaDaftarNilai:\\\\r\\\\n    print mahasiswa.nama + ' ' + str(mahasiswa.nilai) + '/n'\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>jalankan testrecord.py maka akan didapat hasil querynya.</p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"Andi 80\\\\r\\\\nAdit 90\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Jika kalian gabungkan semua script diatas pada satu file, instantiasi engine dan session hanya perlu sekali saja.\\\\\\\\</p><p><br/></p><p>Selesai sudah demonstrasi penggunaan SQAlchemy dengan SQLite. Semoga dapat memberikan pencerahan bagi pembaca.</p><p><br/></p><p>Further reading:</p><ul><li><a href=\\\\\\\"http://docs.sqlalchemy.org/en/rel_0_9/orm/tutorial.html\\\\\\\">SQLAlchemy</a></li><li>SQLAlchemy koneksi dengan\\\\u00a0<a href=\\\\\\\"http://docs.sqlalchemy.org/en/rel_0_9/core/engines.html\\\\\\\">database lain\\\\u00a0</a></li></ul>\\\"}]\", \"live\": true, \"thumbnail_image\": 23, \"has_unpublished_changes\": false, \"related_post\": \"[]\", \"angular_url\": \"perkenalan-orm-dan-sqlalchemy\", \"title_extended\": \"\", \"numchild\": 0, \"main_image_disc\": \"image from www.agile-code.com\", \"content_type\": 34, \"show_in_menus\": false, \"date\": \"2015-04-07\", \"path\": \"0001000100010007\", \"url_path\": \"/home/blog/perkenalan-orm-dan-sqlalchemy/\", \"expired\": false, \"pk\": 12, \"categories\": \"[{\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Python\\\"}, {\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Software\\\"}]\", \"main_image\": 22, \"locked\": false, \"author\": \"Abirafdi Raditya Putra\", \"depth\": 4, \"first_published_at\": \"2015-08-14T02:26:40.339Z\", \"expire_at\": null}", "user": 1, "page": 12}, "model": "wagtailcore.pagerevision", "pk": 80}, {"fields": {"approved_go_live_at": null, "created_at": "2015-08-14T03:32:12.653Z", "submitted_for_moderation": false, "content_json": "{\"search_description\": \"\", \"owner\": 1, \"intro\": \"<p>Kemampuan database merupakan kemampuan fundamental bagi setiap programmer. Bagi orang yang baru mulai belajar database pasti pernah mendengar Object Relational Mapping atau ORM. Pada post ini saya akan menjelaskan apa itu ORM berserta contohnya menggunakan SQLAlchemy</p>\", \"latest_revision_created_at\": \"2015-08-14T03:25:17.545Z\", \"main_background_image\": null, \"go_live_at\": null, \"title\": \"Perkenalan ORM dan SQLAlchemy\", \"seo_title\": \"\", \"slug\": \"perkenalan-orm-dan-sqlalchemy\", \"content\": \"[{\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Kemampuan database merupakan kemampuan fundamental bagi setiap programmer. Bagi orang yang baru mulai belajar database pasti pernah mendengar Object Relational Mapping atau ORM. Sebelum ORM ada, segala aktifitas dan perintah di database harus menggunakan bahasa SQL. Di era modern sekarang, hampir sebagian besar bahasa pemrograman yang digunakan bersifat <i>object oriented</i>, seperti Java, Python dan C++, ORM dibuat agar objek dapat dipetakan atau direlasikan ke suatu record di database, ORM juga mengubah sintaks SQL menjadi sintaks yang bersifat <i>object-oriented.</i>\\\\u00a0 sehingga \\\\u00a0memudahkan programmer dan meningkatkan produktifitas dalam hal menggunakan database karena object sudah terhubung langsung dengan record-record pada database, code readability juga akan meningkat karena sintaks ORM lebih terlihat <i>object-oriented.</i>\\\\u00a0</p><p>Jadi bagaimana cara ORM mempermudah kerja programmer? ORM menterjemahkan perintah dari programmer ke dalam bahasa SQL, termasuk mengubah tipe data dari field suatu objek supaya cocok dengan tipe data pada databasenya. ORM ada banyak, masing-masing memiliki kelebihan dan kekurangan, dan semuanya hampir berbentuk suatu library atau module yang kita install sendiri sesuai dengan bahasa pemrograman kita, namun ada juga ORM yang sudah terintegrasi pada suatu framework, contohnya ORM Django. Faktor utama bagus atau tidaknya dari suatu ORM adalah dari segi performa, seperti seberapa cepat suatu ORM dapat melaksanakan query yang kompleks. Perbandingan berbagai ORM Python yang lumayan detail bisa dilihat\\\\u00a0<a href=\\\\\\\"http://www.pythoncentral.io/sqlalchemy-vs-orms/\\\\\\\">disini</a>.\\\\u00a0</p><p>Disini saya akan menggunakan SQLAlchemy sebagai ORM pilihan saya, karena SQLAlchemy adalah ORM yang paling banyak digunakan di Python sehingga lebih mudah googling jika ada kesulitan...</p><p></p><p>Berikut merupakan demonstrasi singkat ORM SQLAlchemy</p>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"table users\\\"}, {\\\"type\\\": \\\"raw_html\\\", \\\"value\\\": \\\"<table>\\\\r\\\\n<tbody>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;nama &nbsp;</td>\\\\r\\\\n<td>&nbsp;umur&nbsp;</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Andi</td>\\\\r\\\\n<td>&nbsp;19</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Budi</td>\\\\r\\\\n<td>&nbsp;18</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Agung</td>\\\\r\\\\n<td>&nbsp;14</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Adit</td>\\\\r\\\\n<td>&nbsp;15</td>\\\\r\\\\n</tr>\\\\r\\\\n</tbody>\\\\r\\\\n</table>\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p><br/></p><p>menggunakan SQL.<br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"SELECT nama\\\\r\\\\nFROM users\\\\r\\\\nWHERE umur > 17;\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p><br/></p><p>menggunakan ORM SQLAlchemy<br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"query(User).filter(User.nama > 17) \\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p><br/></p><p>ORM akan otomatis menterjemahkan statement python ke dalam bahasa SQL sehingga kedua perintah diatas akan menghasilkan hasil yang sama yaitu<br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"Andi\\\\r\\\\nBudi\\\"}, {\\\"type\\\": \\\"subheading\\\", \\\"value\\\": \\\"Demonstrasi Lengkap\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Berikutnya saya akan memberi demonstrasi sederhana pengunaan SQLAlchemy yang dikombinasikan dengan SQLite, karena sqlite sudah disupport python out-of-the-box jadi tidak perlu meng-install modules lain.\\\\u00a0pertama kita install dulu SQLAlchemy, ketik command berikut di command-line.<br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"pip install sqlalchemy\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Langkah pertama alah membuat database yang memiliki tabel daftarNilai. Sesuai dengan kepanjangan ORM, yaitu\\\\u00a0<i>Object\\\\u00a0Relational Mapper</i>, table yang kita inginkan nanti otomatis terbuat sesuai dengan class atau objek yang kita definisikan, jadi langkah selanjutnya adalah mendefinisikan class daftarNilai. Kumpulan class yang akan dijadikan table kita letakkan di satu file yang bernama models.py<br/></p>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"models.py\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"from sqlalchemy.ext.declarative import declarative_base\\\\r\\\\nfrom sqlalchemy import Column, Integer, String\\\\r\\\\n# Kita harus import setiap tipe data yang ingin kita gunakan\\\\r\\\\nfrom sqlalchemy import create_engine\\\\r\\\\n\\\\r\\\\nBase = declarative_base()\\\\r\\\\n# setiap class yang akan dipetakan harus inherit dari instance declarative_base\\\\r\\\\n\\\\r\\\\nclass DaftarNilai(Base): #inherit from Base\\\\r\\\\n    __tablename__ = 'daftarNilai'    \\\\r\\\\n    # tablename disini hanya sebagai metadata\\\\r\\\\n\\\\r\\\\n    nama = Column(String(50), nullable=False, primary_key=True)\\\\r\\\\n    # membuat kolom nama dengan tipe data\\\\r\\\\n    # String maksimal panjang 50 karakter   \\\\r\\\\n    # dan tidak boleh Null   \\\\r\\\\n    nilai = Column(Integer, nullable=False)   \\\\r\\\\n\\\\r\\\\nengine = create_engine('sqlite:///latihan.db') \\\\r\\\\n# menyiapkan connector/engine sqlite\\\\r\\\\n\\\\r\\\\nBase.metadata.create_all(engine) \\\\r\\\\n# menjalankan perintah pemetaan/membuat database\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Lalu jalankan script diatas. SQLite bersifat file-based, sehingga urlnya menggunakan 3 slashes. Isi nama databasenya sesuai kemauan anda, nantinya akan terbuat file .db di folder yang sama dengan script ini dijalankan.\\\\u00a0</p><p>Berikut merupakan script untuk menambah object atau record ke database.<br/></p>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"tambahrecord.py\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"from sqlalchemy.orm import sessionmaker\\\\r\\\\nfrom sqlalchemy import create_engine\\\\r\\\\nfrom models import DaftarNilai, Base\\\\r\\\\n\\\\r\\\\nengine = create_engine('sqlite:///latihan/db')\\\\r\\\\n# membuat connector/engine\\\\r\\\\n\\\\r\\\\nDBSession = sessionmaker()\\\\r\\\\n# sebelum kita mengakses database, kita harus membuat session\\\\r\\\\n# terlebih dahulu\\\\r\\\\n\\\\r\\\\nDBSession.configure(bind=engine)\\\\r\\\\nsession = DBSession\\\\r\\\\n\\\\r\\\\nnew_DaftarNilai = DaftarNilai(nama='Andi', nilai=80)\\\\r\\\\n# untuk membuat record baru, kita mendefinisikannya dalam bentuk objek\\\\r\\\\n# yang nantinya akan otomatis berubah menjadi tipe data yang cocok\\\\r\\\\n# dengan database\\\\r\\\\n\\\\r\\\\nsession.add(new_DaftarNilai)\\\\r\\\\nnew_DaftarNilai = DaftarNilai(nama='Adit', nilai=90)\\\\r\\\\nsession.add(new_DaftarNilai)\\\\r\\\\n\\\\r\\\\nsession.commit()\\\\r\\\\n# jangan lupa untuk commit perubahan yang terjadi\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p><br/></p><p>Untuk melihat apakah record yang baru saja kita masukkan berhasil ditambah ke database, buat script lihatrecord.py</p>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"lihatrecord.py\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"from sqlalchemy.orm import sessionmaker\\\\r\\\\nfrom sqlalchemy import create_engine\\\\r\\\\nfrom models import DaftarNilai, Base\\\\r\\\\n\\\\r\\\\nengine = create_engine('sqlite:///latihan/db')\\\\r\\\\nDBSession = sessionmaker()\\\\r\\\\nDBSession.configure(bind=engine)\\\\r\\\\nsession = DBSession\\\\r\\\\n\\\\r\\\\nsemuaDaftarNilai = session.query(DaftarNilai).all()\\\\r\\\\n# mengambil semua record ke dalam variabel semuaDaftarNilai\\\\r\\\\n# karena terdapat 2 record, maka bisa di iterasikan dengan for\\\\r\\\\n\\\\r\\\\nfor mahasiswa in semuaDaftarNilai:\\\\r\\\\n    print mahasiswa.nama + ' ' + str(mahasiswa.nilai) + '/n'\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>jalankan testrecord.py maka akan didapat hasil querynya.</p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"Andi 80\\\\r\\\\nAdit 90\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Jika kalian gabungkan semua script diatas pada satu file, instantiasi engine dan session hanya perlu sekali saja.\\\\\\\\</p><p><br/></p><p>Selesai sudah demonstrasi penggunaan SQAlchemy dengan SQLite. Semoga dapat memberikan pencerahan bagi pembaca.</p><p><br/></p><p>Further reading:</p><ul><li><a href=\\\\\\\"http://docs.sqlalchemy.org/en/rel_0_9/orm/tutorial.html\\\\\\\">SQLAlchemy</a></li><li>SQLAlchemy koneksi dengan\\\\u00a0<a href=\\\\\\\"http://docs.sqlalchemy.org/en/rel_0_9/core/engines.html\\\\\\\">database lain\\\\u00a0</a></li></ul>\\\"}]\", \"live\": true, \"thumbnail_image\": 23, \"has_unpublished_changes\": false, \"related_post\": \"[]\", \"main_img_disc\": \"image from www.agile-code.com\", \"angular_url\": \"perkenalan-orm-dan-sqlalchemy\", \"title_extended\": \"\", \"numchild\": 0, \"content_type\": 34, \"show_in_menus\": false, \"date\": \"2015-04-07\", \"path\": \"0001000100010007\", \"url_path\": \"/home/blog/perkenalan-orm-dan-sqlalchemy/\", \"expired\": false, \"pk\": 12, \"categories\": \"[{\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Python\\\"}, {\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Software\\\"}]\", \"main_image\": 22, \"locked\": false, \"author\": \"Abirafdi Raditya Putra\", \"depth\": 4, \"first_published_at\": \"2015-08-14T02:26:40.339Z\", \"expire_at\": null}", "user": 1, "page": 12}, "model": "wagtailcore.pagerevision", "pk": 81}, {"fields": {"approved_go_live_at": null, "created_at": "2015-08-14T04:01:37.990Z", "submitted_for_moderation": false, "content_json": "{\"search_description\": \"\", \"owner\": 1, \"intro\": \"<p>Preferensi sumber belajar Kivy</p>\", \"latest_revision_created_at\": \"2015-08-14T01:36:28.342Z\", \"main_background_image\": null, \"go_live_at\": null, \"title\": \"Kivy Tutorial 3 - Kivy Basics\", \"seo_title\": \"\", \"slug\": \"kivy-tutorial-3---kivy-basics\", \"content\": \"[{\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Maaf jika post ini tidak original, disini saya akan coba share sumber belajar Kivy saya. Video ini dibuat oleh salah satu kontributor Kivy, penjelasannya singkat, padat, jelas dan memuat banyak materi dasar. Setelah menonton video ini saya bisa membuat aplikasi-aplikasi sederhana.</p>\\\"}, {\\\"type\\\": \\\"raw_html\\\", \\\"value\\\": \\\"<iframe width=\\\\\\\"560\\\\\\\" height=\\\\\\\"315\\\\\\\" src=\\\\\\\"https://www.youtube.com/embed/F7UKmK9eQLY?list=PLdNh1e1kmiPP4YApJm8ENK2yMlwF1_edq\\\\\\\" frameborder=\\\\\\\"0\\\\\\\" allowfullscreen style=\\\\\\\"display: block; margin-left: auto; margin-right: auto;\\\\\\\"></iframe>\\\"}]\", \"live\": true, \"thumbnail_image\": null, \"has_unpublished_changes\": false, \"related_post\": \"[{\\\"type\\\": \\\"post\\\", \\\"value\\\": 8}, {\\\"type\\\": \\\"post\\\", \\\"value\\\": 10}]\", \"main_img_disc\": \"\", \"angular_url\": \"kivy-tutorial-3---kivy-basics\", \"title_extended\": \"\", \"numchild\": 0, \"content_type\": 34, \"show_in_menus\": false, \"date\": \"2015-04-05\", \"path\": \"0001000100010006\", \"url_path\": \"/home/blog/kivy-tutorial-3---kivy-basics/\", \"expired\": false, \"pk\": 11, \"categories\": \"[{\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Kivy\\\"}, {\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Python\\\"}]\", \"main_image\": null, \"locked\": false, \"author\": \"Abirafdi Raditya Putra\", \"depth\": 4, \"first_published_at\": \"2015-08-14T01:10:09.881Z\", \"expire_at\": null}", "user": 1, "page": 11}, "model": "wagtailcore.pagerevision", "pk": 82}, {"fields": {"approved_go_live_at": null, "created_at": "2015-08-14T04:05:14.600Z", "submitted_for_moderation": false, "content_json": "{\"search_description\": \"\", \"owner\": 1, \"intro\": \"<p>Pada tutorial ini kita akan membuat form login sederhana menggunakan database yang cross-platform, berjalan di Windows, Android, OS X, dan iOS dengan code yang sama.</p>\", \"latest_revision_created_at\": null, \"main_background_image\": null, \"go_live_at\": null, \"title\": \"Kivy Tutorial 4 - Database Support\", \"seo_title\": \"\", \"slug\": \"kivy-tutorial-4---database-support\", \"content\": \"[{\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Sebelumnya saya anggap kalian sudah mengerti dasar-dasar\\\\u00a0<a href=\\\\\\\"http://www.pythonified.com/blog/kivy-tutorial-3-where-to-start/\\\\\\\">kivy</a>\\\\u00a0dan juga konsep dasar\\\\u00a0<a href=\\\\\\\"http://www.pythonified.com/blog/perkenalan-orm-dan-sqlalchemy/\\\\\\\">ORM</a>\\\\u00a0dan\\\\u00a0<a href=\\\\\\\"http://www.pythonified.com/blog/perkenalan-orm-dan-sqlalchemy/\\\\\\\">SQLAlchemy</a>. Pada tutorial ini kita akan membuat form login sederhana menggunakan database yang cross-platform, berjalan di Windows, Android, OS X, dan iOS dengan code yang sama. Mau gamau kita menggunakan database yang bersifat file-based, yaitu SQLite. Tentunya SQLite memiliki beberapa kelemahan yaitu:</p><p></p><ol><li>Melakukan migrasi sedikit lebih ribet karena SQLite tidak support seperti menambah dan menghapus kolom, rename kolom dan juga mengganti constraint kolom. Solusinya pada saat migrasi ialah membuat table baru dan pindahkan semua data ke table yang baru. Bagi kalian yang belum tau migrasi, di tutorial berikutnya saya akan coba menjelaskan apa itu migrasi dan memberikan contohnya menggunakan Alembic.</li><li>Tentunya SQLite tidak cocok untuk aplikasi dengan skala besar.</li></ol><p>\\\\u00a0\\\\u00a0</p><p></p><p>Oke pertama kita buat dulu layout login kita dengan menggunakan .kv. Jangan lupa nama file kv harus sama dengan nama app kita tapi menggunakan lowercase-letters.</p>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"latihan.kv\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"#: kivy 1.9.0\\\\r\\\\n\\\\r\\\\n<LoginWindow>:\\\\r\\\\n    canvas.before:\\\\r\\\\n        Color:\\\\r\\\\n            rgba: (1,1,1,1)\\\\r\\\\n        Rectangle:\\\\r\\\\n            pos: self.pos\\\\r\\\\n            size: self.size\\\\r\\\\n    Label:\\\\r\\\\n        text: \\\\\\\"Login\\\\\\\"\\\\r\\\\n        color: (0,0,0,1)\\\\r\\\\n        font_size: 60\\\\r\\\\n        center_x: root.width * 0.5\\\\r\\\\n        center_y: root.top * 0.8\\\\r\\\\n    Label:\\\\r\\\\n        id: username_label\\\\r\\\\n        text: \\\\\\\"Username\\\\\\\"\\\\r\\\\n        color: (0,0,0,1)\\\\r\\\\n        font_size: 30\\\\r\\\\n        right: username_input.x - 60\\\\r\\\\n        center_y: root.top * 0.6\\\\r\\\\n    TextInput:\\\\r\\\\n        id: username_input\\\\r\\\\n        font_size: 20\\\\r\\\\n        center_x: root.width * 0.5\\\\r\\\\n        center_y: root.top * 0.6\\\\r\\\\n        height: 35\\\\r\\\\n        width: 300\\\\r\\\\n    Label:\\\\r\\\\n        id: password_label\\\\r\\\\n        text: \\\\\\\"Password\\\\\\\"\\\\r\\\\n        color: (0,0,0,1)\\\\r\\\\n        font_size: 30\\\\r\\\\n        right: password_input.x - 60\\\\r\\\\n        center_y: root.top * 0.5\\\\r\\\\n    TextInput:\\\\r\\\\n        id: password_input\\\\r\\\\n        font_size: 20\\\\r\\\\n        password: True\\\\r\\\\n        center_x: root.width * 0.5\\\\r\\\\n        center_y: root.top * 0.5\\\\r\\\\n        height: 35\\\\r\\\\n        width: 300\\\\r\\\\n    Button:\\\\r\\\\n        id: login_button\\\\r\\\\n        font_size: 20\\\\r\\\\n        center_x: root.width * 0.5\\\\r\\\\n        center_y: password_input.y - 100\\\\r\\\\n        text: \\\\\\\"login\\\\\\\"\\\\r\\\\n        size: (150,100)\\\\r\\\\n        on_press: root.login()\\\\r\\\\n    Label:\\\\r\\\\n        id: success\\\\r\\\\n        pos: (100,100)\\\\r\\\\n        color: (0,0,0,1)\\\\r\\\\n        text: \\\\\\\"fail\\\\\\\"\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"main.py\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"from kivy.app import App\\\\r\\\\nfrom kivy.uix.widget import Widget\\\\r\\\\n\\\\r\\\\nclass LoginWindow(Widget):\\\\r\\\\n    def login(self, *args):\\\\r\\\\n        username = self.ids.username_input\\\\r\\\\n        username_text = username.text\\\\r\\\\n        password = self.ids.password_input\\\\r\\\\n        password_text = password.text\\\\r\\\\n        if username_text == \\\\\\\"test\\\\\\\" and password_text == \\\\\\\"test\\\\\\\":\\\\r\\\\n            label = self.ids.success\\\\r\\\\n            label.text = \\\\\\\"Success\\\\\\\"\\\\r\\\\n\\\\r\\\\nclass LatihanApp(App):\\\\r\\\\n    def build(self):\\\\r\\\\n        return LoginWindow()\\\\r\\\\n\\\\r\\\\n\\\\r\\\\nif __name__ == '__main__':\\\\r\\\\n    LatihanApp().run()\\\"}]\", \"live\": true, \"thumbnail_image\": 25, \"has_unpublished_changes\": false, \"related_post\": \"[]\", \"main_img_disc\": \"\", \"angular_url\": \"kivy-tutorial-4---database-support\", \"title_extended\": \"\", \"numchild\": 0, \"content_type\": 34, \"show_in_menus\": false, \"date\": \"2015-04-08\", \"path\": \"0001000100010008\", \"url_path\": \"/home/blog/kivy-tutorial-4---database-support/\", \"expired\": false, \"pk\": 13, \"categories\": \"[{\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Kivy\\\"}, {\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Python\\\"}]\", \"main_image\": 24, \"locked\": false, \"author\": \"Abirafdi Raditya Putra\", \"depth\": 4, \"first_published_at\": null, \"expire_at\": null}", "user": 1, "page": 13}, "model": "wagtailcore.pagerevision", "pk": 83}, {"fields": {"approved_go_live_at": null, "created_at": "2015-08-14T04:06:39.726Z", "submitted_for_moderation": false, "content_json": "{\"search_description\": \"\", \"owner\": 1, \"intro\": \"<p>Pada tutorial ini kita akan membuat form login sederhana menggunakan database yang cross-platform, berjalan di Windows, Android, OS X, dan iOS dengan code yang sama.</p>\", \"latest_revision_created_at\": \"2015-08-14T04:05:14.600Z\", \"main_background_image\": null, \"go_live_at\": null, \"title\": \"Kivy Tutorial 4 - Database Support\", \"seo_title\": \"\", \"slug\": \"kivy-tutorial-4---database-support\", \"content\": \"[{\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Requirements :</p><p></p><ul><li>dasar-dasar\\\\u00a0<a href=\\\\\\\"http://www.pythonified.com/blog/kivy-tutorial-3-where-to-start/\\\\\\\">kivy</a></li><li>dasar\\\\u00a0<a href=\\\\\\\"http://www.pythonified.com/blog/perkenalan-orm-dan-sqlalchemy/\\\\\\\">ORM</a>\\\\u00a0dan\\\\u00a0<a href=\\\\\\\"http://www.pythonified.com/blog/perkenalan-orm-dan-sqlalchemy/\\\\\\\">SQLAlchemy</a>.\\\\u00a0</li></ul><p></p><p><br/></p><p>Pada tutorial ini kita akan membuat form login sederhana menggunakan database yang cross-platform, berjalan di Windows, Android, OS X, dan iOS dengan code yang sama. Mau gamau kita menggunakan database yang bersifat file-based, yaitu SQLite. Tentunya SQLite memiliki beberapa kelemahan yaitu:</p><p></p><ol><li>Melakukan migrasi sedikit lebih ribet karena SQLite tidak support seperti menambah dan menghapus kolom, rename kolom dan juga mengganti constraint kolom. Solusinya pada saat migrasi ialah membuat table baru dan pindahkan semua data ke table yang baru. Bagi kalian yang belum tau migrasi, di tutorial berikutnya saya akan coba menjelaskan apa itu migrasi dan memberikan contohnya menggunakan Alembic.</li><li>Tentunya SQLite tidak cocok untuk aplikasi dengan skala besar.</li></ol><p>\\\\u00a0\\\\u00a0</p><p></p><p>Oke pertama kita buat dulu layout login kita dengan menggunakan .kv. Jangan lupa nama file kv harus sama dengan nama app kita tapi menggunakan lowercase-letters.</p>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"latihan.kv\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"#: kivy 1.9.0\\\\r\\\\n\\\\r\\\\n<LoginWindow>:\\\\r\\\\n    canvas.before:\\\\r\\\\n        Color:\\\\r\\\\n            rgba: (1,1,1,1)\\\\r\\\\n        Rectangle:\\\\r\\\\n            pos: self.pos\\\\r\\\\n            size: self.size\\\\r\\\\n    Label:\\\\r\\\\n        text: \\\\\\\"Login\\\\\\\"\\\\r\\\\n        color: (0,0,0,1)\\\\r\\\\n        font_size: 60\\\\r\\\\n        center_x: root.width * 0.5\\\\r\\\\n        center_y: root.top * 0.8\\\\r\\\\n    Label:\\\\r\\\\n        id: username_label\\\\r\\\\n        text: \\\\\\\"Username\\\\\\\"\\\\r\\\\n        color: (0,0,0,1)\\\\r\\\\n        font_size: 30\\\\r\\\\n        right: username_input.x - 60\\\\r\\\\n        center_y: root.top * 0.6\\\\r\\\\n    TextInput:\\\\r\\\\n        id: username_input\\\\r\\\\n        font_size: 20\\\\r\\\\n        center_x: root.width * 0.5\\\\r\\\\n        center_y: root.top * 0.6\\\\r\\\\n        height: 35\\\\r\\\\n        width: 300\\\\r\\\\n    Label:\\\\r\\\\n        id: password_label\\\\r\\\\n        text: \\\\\\\"Password\\\\\\\"\\\\r\\\\n        color: (0,0,0,1)\\\\r\\\\n        font_size: 30\\\\r\\\\n        right: password_input.x - 60\\\\r\\\\n        center_y: root.top * 0.5\\\\r\\\\n    TextInput:\\\\r\\\\n        id: password_input\\\\r\\\\n        font_size: 20\\\\r\\\\n        password: True\\\\r\\\\n        center_x: root.width * 0.5\\\\r\\\\n        center_y: root.top * 0.5\\\\r\\\\n        height: 35\\\\r\\\\n        width: 300\\\\r\\\\n    Button:\\\\r\\\\n        id: login_button\\\\r\\\\n        font_size: 20\\\\r\\\\n        center_x: root.width * 0.5\\\\r\\\\n        center_y: password_input.y - 100\\\\r\\\\n        text: \\\\\\\"login\\\\\\\"\\\\r\\\\n        size: (150,100)\\\\r\\\\n        on_press: root.login()\\\\r\\\\n    Label:\\\\r\\\\n        id: success\\\\r\\\\n        pos: (100,100)\\\\r\\\\n        color: (0,0,0,1)\\\\r\\\\n        text: \\\\\\\"fail\\\\\\\"\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"main.py\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"from kivy.app import App\\\\r\\\\nfrom kivy.uix.widget import Widget\\\\r\\\\n\\\\r\\\\nclass LoginWindow(Widget):\\\\r\\\\n    def login(self, *args):\\\\r\\\\n        username = self.ids.username_input\\\\r\\\\n        username_text = username.text\\\\r\\\\n        password = self.ids.password_input\\\\r\\\\n        password_text = password.text\\\\r\\\\n        if username_text == \\\\\\\"test\\\\\\\" and password_text == \\\\\\\"test\\\\\\\":\\\\r\\\\n            label = self.ids.success\\\\r\\\\n            label.text = \\\\\\\"Success\\\\\\\"\\\\r\\\\n\\\\r\\\\nclass LatihanApp(App):\\\\r\\\\n    def build(self):\\\\r\\\\n        return LoginWindow()\\\\r\\\\n\\\\r\\\\n\\\\r\\\\nif __name__ == '__main__':\\\\r\\\\n    LatihanApp().run()\\\"}]\", \"live\": true, \"thumbnail_image\": 25, \"has_unpublished_changes\": false, \"related_post\": \"[]\", \"main_img_disc\": \"\", \"angular_url\": \"kivy-tutorial-4---database-support\", \"title_extended\": \"\", \"numchild\": 0, \"content_type\": 34, \"show_in_menus\": false, \"date\": \"2015-04-08\", \"path\": \"0001000100010008\", \"url_path\": \"/home/blog/kivy-tutorial-4---database-support/\", \"expired\": false, \"pk\": 13, \"categories\": \"[{\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Kivy\\\"}, {\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Python\\\"}]\", \"main_image\": 24, \"locked\": false, \"author\": \"Abirafdi Raditya Putra\", \"depth\": 4, \"first_published_at\": \"2015-08-14T04:05:14.619Z\", \"expire_at\": null}", "user": 1, "page": 13}, "model": "wagtailcore.pagerevision", "pk": 84}, {"fields": {"approved_go_live_at": null, "created_at": "2015-08-14T04:07:29.121Z", "submitted_for_moderation": false, "content_json": "{\"search_description\": \"\", \"owner\": 1, \"intro\": \"<p>Pada tutorial ini kita akan membuat form login sederhana menggunakan database yang cross-platform, berjalan di Windows, Android, OS X, dan iOS dengan code yang sama.</p>\", \"latest_revision_created_at\": \"2015-08-14T04:06:39.726Z\", \"main_background_image\": null, \"go_live_at\": null, \"title\": \"Kivy Tutorial 4 - Database Support\", \"seo_title\": \"\", \"slug\": \"kivy-tutorial-4---database-support\", \"content\": \"[{\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Requirements :</p><p></p><ul><li>dasar-dasar\\\\u00a0<a href=\\\\\\\"http://www.pythonified.com/blog/kivy-tutorial-3-where-to-start/\\\\\\\">kivy</a></li><li>dasar\\\\u00a0<a href=\\\\\\\"http://www.pythonified.com/blog/perkenalan-orm-dan-sqlalchemy/\\\\\\\">ORM</a>\\\\u00a0dan\\\\u00a0<a href=\\\\\\\"http://www.pythonified.com/blog/perkenalan-orm-dan-sqlalchemy/\\\\\\\">SQLAlchemy</a>.\\\\u00a0</li></ul><p></p><p>Pada tutorial ini kita akan membuat form login sederhana menggunakan database yang cross-platform, berjalan di Windows, Android, OS X, dan iOS dengan code yang sama. Mau gamau kita menggunakan database yang bersifat file-based, yaitu SQLite. Tentunya SQLite memiliki beberapa kelemahan yaitu:<br/></p><p></p><ol><li>Melakukan migrasi sedikit lebih ribet karena SQLite tidak support seperti menambah dan menghapus kolom, rename kolom dan juga mengganti constraint kolom. Solusinya pada saat migrasi ialah membuat table baru dan pindahkan semua data ke table yang baru. Bagi kalian yang belum tau migrasi, di tutorial berikutnya saya akan coba menjelaskan apa itu migrasi dan memberikan contohnya menggunakan Alembic.</li><li>Tentunya SQLite tidak cocok untuk aplikasi dengan skala besar.</li></ol><p>\\\\u00a0\\\\u00a0</p><p></p><p>Oke pertama kita buat dulu layout login kita dengan menggunakan .kv. Jangan lupa nama file kv harus sama dengan nama app kita tapi menggunakan lowercase-letters.</p>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"latihan.kv\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"#: kivy 1.9.0\\\\r\\\\n\\\\r\\\\n<LoginWindow>:\\\\r\\\\n    canvas.before:\\\\r\\\\n        Color:\\\\r\\\\n            rgba: (1,1,1,1)\\\\r\\\\n        Rectangle:\\\\r\\\\n            pos: self.pos\\\\r\\\\n            size: self.size\\\\r\\\\n    Label:\\\\r\\\\n        text: \\\\\\\"Login\\\\\\\"\\\\r\\\\n        color: (0,0,0,1)\\\\r\\\\n        font_size: 60\\\\r\\\\n        center_x: root.width * 0.5\\\\r\\\\n        center_y: root.top * 0.8\\\\r\\\\n    Label:\\\\r\\\\n        id: username_label\\\\r\\\\n        text: \\\\\\\"Username\\\\\\\"\\\\r\\\\n        color: (0,0,0,1)\\\\r\\\\n        font_size: 30\\\\r\\\\n        right: username_input.x - 60\\\\r\\\\n        center_y: root.top * 0.6\\\\r\\\\n    TextInput:\\\\r\\\\n        id: username_input\\\\r\\\\n        font_size: 20\\\\r\\\\n        center_x: root.width * 0.5\\\\r\\\\n        center_y: root.top * 0.6\\\\r\\\\n        height: 35\\\\r\\\\n        width: 300\\\\r\\\\n    Label:\\\\r\\\\n        id: password_label\\\\r\\\\n        text: \\\\\\\"Password\\\\\\\"\\\\r\\\\n        color: (0,0,0,1)\\\\r\\\\n        font_size: 30\\\\r\\\\n        right: password_input.x - 60\\\\r\\\\n        center_y: root.top * 0.5\\\\r\\\\n    TextInput:\\\\r\\\\n        id: password_input\\\\r\\\\n        font_size: 20\\\\r\\\\n        password: True\\\\r\\\\n        center_x: root.width * 0.5\\\\r\\\\n        center_y: root.top * 0.5\\\\r\\\\n        height: 35\\\\r\\\\n        width: 300\\\\r\\\\n    Button:\\\\r\\\\n        id: login_button\\\\r\\\\n        font_size: 20\\\\r\\\\n        center_x: root.width * 0.5\\\\r\\\\n        center_y: password_input.y - 100\\\\r\\\\n        text: \\\\\\\"login\\\\\\\"\\\\r\\\\n        size: (150,100)\\\\r\\\\n        on_press: root.login()\\\\r\\\\n    Label:\\\\r\\\\n        id: success\\\\r\\\\n        pos: (100,100)\\\\r\\\\n        color: (0,0,0,1)\\\\r\\\\n        text: \\\\\\\"fail\\\\\\\"\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"main.py\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"from kivy.app import App\\\\r\\\\nfrom kivy.uix.widget import Widget\\\\r\\\\n\\\\r\\\\nclass LoginWindow(Widget):\\\\r\\\\n    def login(self, *args):\\\\r\\\\n        username = self.ids.username_input\\\\r\\\\n        username_text = username.text\\\\r\\\\n        password = self.ids.password_input\\\\r\\\\n        password_text = password.text\\\\r\\\\n        if username_text == \\\\\\\"test\\\\\\\" and password_text == \\\\\\\"test\\\\\\\":\\\\r\\\\n            label = self.ids.success\\\\r\\\\n            label.text = \\\\\\\"Success\\\\\\\"\\\\r\\\\n\\\\r\\\\nclass LatihanApp(App):\\\\r\\\\n    def build(self):\\\\r\\\\n        return LoginWindow()\\\\r\\\\n\\\\r\\\\n\\\\r\\\\nif __name__ == '__main__':\\\\r\\\\n    LatihanApp().run()\\\"}]\", \"live\": true, \"thumbnail_image\": 25, \"has_unpublished_changes\": false, \"related_post\": \"[]\", \"main_img_disc\": \"\", \"angular_url\": \"kivy-tutorial-4---database-support\", \"title_extended\": \"\", \"numchild\": 0, \"content_type\": 34, \"show_in_menus\": false, \"date\": \"2015-04-08\", \"path\": \"0001000100010008\", \"url_path\": \"/home/blog/kivy-tutorial-4---database-support/\", \"expired\": false, \"pk\": 13, \"categories\": \"[{\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Kivy\\\"}, {\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Python\\\"}]\", \"main_image\": 24, \"locked\": false, \"author\": \"Abirafdi Raditya Putra\", \"depth\": 4, \"first_published_at\": \"2015-08-14T04:05:14.619Z\", \"expire_at\": null}", "user": 1, "page": 13}, "model": "wagtailcore.pagerevision", "pk": 85}, {"fields": {"approved_go_live_at": null, "created_at": "2015-08-14T04:09:49.774Z", "submitted_for_moderation": false, "content_json": "{\"search_description\": \"\", \"owner\": 1, \"intro\": \"<p>Pada tutorial ini kita akan membuat form login sederhana menggunakan database yang cross-platform, berjalan di Windows, Android, OS X, dan iOS dengan code yang sama.</p>\", \"latest_revision_created_at\": \"2015-08-14T04:07:29.121Z\", \"main_background_image\": null, \"go_live_at\": null, \"title\": \"Kivy Tutorial 4 - Database Support\", \"seo_title\": \"\", \"slug\": \"kivy-tutorial-4---database-support\", \"content\": \"[{\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Requirements :</p><p></p><ul><li>- dasar-dasar\\\\u00a0<a href=\\\\\\\"http://www.pythonified.com/blog/kivy-tutorial-3-where-to-start/\\\\\\\">kivy</a></li><li>- dasar\\\\u00a0<a href=\\\\\\\"http://www.pythonified.com/blog/perkenalan-orm-dan-sqlalchemy/\\\\\\\">ORM</a>\\\\u00a0dan\\\\u00a0<a href=\\\\\\\"http://www.pythonified.com/blog/perkenalan-orm-dan-sqlalchemy/\\\\\\\">SQLAlchemy</a>.\\\\u00a0</li></ul><p></p><p>Pada tutorial ini kita akan membuat form login sederhana menggunakan database yang cross-platform, berjalan di Windows, Android, OS X, dan iOS dengan code yang sama. Mau gamau kita menggunakan database yang bersifat file-based, yaitu SQLite. Tentunya SQLite memiliki beberapa kelemahan yaitu:<br/></p><p></p><ol><li>Melakukan migrasi sedikit lebih ribet karena SQLite tidak support seperti menambah dan menghapus kolom, rename kolom dan juga mengganti constraint kolom. Solusinya pada saat migrasi ialah membuat table baru dan pindahkan semua data ke table yang baru. Bagi kalian yang belum tau migrasi, di tutorial berikutnya saya akan coba menjelaskan apa itu migrasi dan memberikan contohnya menggunakan Alembic.</li><li>Tentunya SQLite tidak cocok untuk aplikasi dengan skala besar.</li></ol><p>\\\\u00a0\\\\u00a0</p><p></p><p>Oke pertama kita buat dulu layout login kita dengan menggunakan .kv. Jangan lupa nama file kv harus sama dengan nama app kita tapi menggunakan lowercase-letters.</p>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"latihan.kv\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"#: kivy 1.9.0\\\\r\\\\n\\\\r\\\\n<LoginWindow>:\\\\r\\\\n    canvas.before:\\\\r\\\\n        Color:\\\\r\\\\n            rgba: (1,1,1,1)\\\\r\\\\n        Rectangle:\\\\r\\\\n            pos: self.pos\\\\r\\\\n            size: self.size\\\\r\\\\n    Label:\\\\r\\\\n        text: \\\\\\\"Login\\\\\\\"\\\\r\\\\n        color: (0,0,0,1)\\\\r\\\\n        font_size: 60\\\\r\\\\n        center_x: root.width * 0.5\\\\r\\\\n        center_y: root.top * 0.8\\\\r\\\\n    Label:\\\\r\\\\n        id: username_label\\\\r\\\\n        text: \\\\\\\"Username\\\\\\\"\\\\r\\\\n        color: (0,0,0,1)\\\\r\\\\n        font_size: 30\\\\r\\\\n        right: username_input.x - 60\\\\r\\\\n        center_y: root.top * 0.6\\\\r\\\\n    TextInput:\\\\r\\\\n        id: username_input\\\\r\\\\n        font_size: 20\\\\r\\\\n        center_x: root.width * 0.5\\\\r\\\\n        center_y: root.top * 0.6\\\\r\\\\n        height: 35\\\\r\\\\n        width: 300\\\\r\\\\n    Label:\\\\r\\\\n        id: password_label\\\\r\\\\n        text: \\\\\\\"Password\\\\\\\"\\\\r\\\\n        color: (0,0,0,1)\\\\r\\\\n        font_size: 30\\\\r\\\\n        right: password_input.x - 60\\\\r\\\\n        center_y: root.top * 0.5\\\\r\\\\n    TextInput:\\\\r\\\\n        id: password_input\\\\r\\\\n        font_size: 20\\\\r\\\\n        password: True\\\\r\\\\n        center_x: root.width * 0.5\\\\r\\\\n        center_y: root.top * 0.5\\\\r\\\\n        height: 35\\\\r\\\\n        width: 300\\\\r\\\\n    Button:\\\\r\\\\n        id: login_button\\\\r\\\\n        font_size: 20\\\\r\\\\n        center_x: root.width * 0.5\\\\r\\\\n        center_y: password_input.y - 100\\\\r\\\\n        text: \\\\\\\"login\\\\\\\"\\\\r\\\\n        size: (150,100)\\\\r\\\\n        on_press: root.login()\\\\r\\\\n    Label:\\\\r\\\\n        id: success\\\\r\\\\n        pos: (100,100)\\\\r\\\\n        color: (0,0,0,1)\\\\r\\\\n        text: \\\\\\\"fail\\\\\\\"\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"main.py\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"from kivy.app import App\\\\r\\\\nfrom kivy.uix.widget import Widget\\\\r\\\\n\\\\r\\\\nclass LoginWindow(Widget):\\\\r\\\\n    def login(self, *args):\\\\r\\\\n        username = self.ids.username_input\\\\r\\\\n        username_text = username.text\\\\r\\\\n        password = self.ids.password_input\\\\r\\\\n        password_text = password.text\\\\r\\\\n        if username_text == \\\\\\\"test\\\\\\\" and password_text == \\\\\\\"test\\\\\\\":\\\\r\\\\n            label = self.ids.success\\\\r\\\\n            label.text = \\\\\\\"Success\\\\\\\"\\\\r\\\\n\\\\r\\\\nclass LatihanApp(App):\\\\r\\\\n    def build(self):\\\\r\\\\n        return LoginWindow()\\\\r\\\\n\\\\r\\\\n\\\\r\\\\nif __name__ == '__main__':\\\\r\\\\n    LatihanApp().run()\\\"}]\", \"live\": true, \"thumbnail_image\": 25, \"has_unpublished_changes\": false, \"related_post\": \"[]\", \"main_img_disc\": \"\", \"angular_url\": \"kivy-tutorial-4---database-support\", \"title_extended\": \"\", \"numchild\": 0, \"content_type\": 34, \"show_in_menus\": false, \"date\": \"2015-04-08\", \"path\": \"0001000100010008\", \"url_path\": \"/home/blog/kivy-tutorial-4---database-support/\", \"expired\": false, \"pk\": 13, \"categories\": \"[{\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Kivy\\\"}, {\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Python\\\"}]\", \"main_image\": 24, \"locked\": false, \"author\": \"Abirafdi Raditya Putra\", \"depth\": 4, \"first_published_at\": \"2015-08-14T04:05:14.619Z\", \"expire_at\": null}", "user": 1, "page": 13}, "model": "wagtailcore.pagerevision", "pk": 86}, {"fields": {"approved_go_live_at": null, "created_at": "2015-08-14T04:12:31.133Z", "submitted_for_moderation": false, "content_json": "{\"search_description\": \"\", \"owner\": 1, \"intro\": \"<p>Pada tutorial ini kita akan membuat form login sederhana menggunakan database yang cross-platform, berjalan di Windows, Android, OS X, dan iOS dengan code yang sama.</p>\", \"latest_revision_created_at\": \"2015-08-14T04:09:49.774Z\", \"main_background_image\": null, \"go_live_at\": null, \"title\": \"Kivy Tutorial 4 - Database Support\", \"seo_title\": \"\", \"slug\": \"kivy-tutorial-4---database-support\", \"content\": \"[{\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Requirements :</p><p></p><ul><li>- dasar-dasar\\\\u00a0<a href=\\\\\\\"http://www.pythonified.com/blog/kivy-tutorial-3-where-to-start/\\\\\\\">kivy</a></li><li>- dasar\\\\u00a0<a href=\\\\\\\"http://www.pythonified.com/blog/perkenalan-orm-dan-sqlalchemy/\\\\\\\">ORM</a>\\\\u00a0dan\\\\u00a0<a href=\\\\\\\"http://www.pythonified.com/blog/perkenalan-orm-dan-sqlalchemy/\\\\\\\">SQLAlchemy</a>.\\\\u00a0</li></ul><p></p><p>\\\\\\\\Pada tutorial ini kita akan membuat form login sederhana menggunakan database yang cross-platform, berjalan di Windows, Android, OS X, dan iOS dengan code yang sama. Mau gamau kita menggunakan database yang bersifat file-based, yaitu SQLite. Tentunya SQLite memiliki beberapa kelemahan yaitu:<br/></p><p></p><ol><li>Melakukan migrasi sedikit lebih ribet karena SQLite tidak support seperti menambah dan menghapus kolom, rename kolom dan juga mengganti constraint kolom. Solusinya pada saat migrasi ialah membuat table baru dan pindahkan semua data ke table yang baru. Bagi kalian yang belum tau migrasi, di tutorial berikutnya saya akan coba menjelaskan apa itu migrasi dan memberikan contohnya menggunakan Alembic.</li><li>Tentunya SQLite tidak cocok untuk aplikasi dengan skala besar.</li></ol><p>\\\\u00a0\\\\u00a0</p><p></p><p>Oke pertama kita buat dulu layout login kita dengan menggunakan .kv. Jangan lupa nama file kv harus sama dengan nama app kita tapi menggunakan lowercase-letters.</p>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"latihan.kv\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"#: kivy 1.9.0\\\\r\\\\n\\\\r\\\\n<LoginWindow>:\\\\r\\\\n    canvas.before:\\\\r\\\\n        Color:\\\\r\\\\n            rgba: (1,1,1,1)\\\\r\\\\n        Rectangle:\\\\r\\\\n            pos: self.pos\\\\r\\\\n            size: self.size\\\\r\\\\n    Label:\\\\r\\\\n        text: \\\\\\\"Login\\\\\\\"\\\\r\\\\n        color: (0,0,0,1)\\\\r\\\\n        font_size: 60\\\\r\\\\n        center_x: root.width * 0.5\\\\r\\\\n        center_y: root.top * 0.8\\\\r\\\\n    Label:\\\\r\\\\n        id: username_label\\\\r\\\\n        text: \\\\\\\"Username\\\\\\\"\\\\r\\\\n        color: (0,0,0,1)\\\\r\\\\n        font_size: 30\\\\r\\\\n        right: username_input.x - 60\\\\r\\\\n        center_y: root.top * 0.6\\\\r\\\\n    TextInput:\\\\r\\\\n        id: username_input\\\\r\\\\n        font_size: 20\\\\r\\\\n        center_x: root.width * 0.5\\\\r\\\\n        center_y: root.top * 0.6\\\\r\\\\n        height: 35\\\\r\\\\n        width: 300\\\\r\\\\n    Label:\\\\r\\\\n        id: password_label\\\\r\\\\n        text: \\\\\\\"Password\\\\\\\"\\\\r\\\\n        color: (0,0,0,1)\\\\r\\\\n        font_size: 30\\\\r\\\\n        right: password_input.x - 60\\\\r\\\\n        center_y: root.top * 0.5\\\\r\\\\n    TextInput:\\\\r\\\\n        id: password_input\\\\r\\\\n        font_size: 20\\\\r\\\\n        password: True\\\\r\\\\n        center_x: root.width * 0.5\\\\r\\\\n        center_y: root.top * 0.5\\\\r\\\\n        height: 35\\\\r\\\\n        width: 300\\\\r\\\\n    Button:\\\\r\\\\n        id: login_button\\\\r\\\\n        font_size: 20\\\\r\\\\n        center_x: root.width * 0.5\\\\r\\\\n        center_y: password_input.y - 100\\\\r\\\\n        text: \\\\\\\"login\\\\\\\"\\\\r\\\\n        size: (150,100)\\\\r\\\\n        on_press: root.login()\\\\r\\\\n    Label:\\\\r\\\\n        id: success\\\\r\\\\n        pos: (100,100)\\\\r\\\\n        color: (0,0,0,1)\\\\r\\\\n        text: \\\\\\\"fail\\\\\\\"\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"main.py\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"from kivy.app import App\\\\r\\\\nfrom kivy.uix.widget import Widget\\\\r\\\\n\\\\r\\\\nclass LoginWindow(Widget):\\\\r\\\\n    def login(self, *args):\\\\r\\\\n        username = self.ids.username_input\\\\r\\\\n        username_text = username.text\\\\r\\\\n        password = self.ids.password_input\\\\r\\\\n        password_text = password.text\\\\r\\\\n        if username_text == \\\\\\\"test\\\\\\\" and password_text == \\\\\\\"test\\\\\\\":\\\\r\\\\n            label = self.ids.success\\\\r\\\\n            label.text = \\\\\\\"Success\\\\\\\"\\\\r\\\\n\\\\r\\\\nclass LatihanApp(App):\\\\r\\\\n    def build(self):\\\\r\\\\n        return LoginWindow()\\\\r\\\\n\\\\r\\\\n\\\\r\\\\nif __name__ == '__main__':\\\\r\\\\n    LatihanApp().run()\\\"}]\", \"live\": true, \"thumbnail_image\": 25, \"has_unpublished_changes\": false, \"related_post\": \"[]\", \"main_img_disc\": \"\", \"angular_url\": \"kivy-tutorial-4---database-support\", \"title_extended\": \"\", \"numchild\": 0, \"content_type\": 34, \"show_in_menus\": false, \"date\": \"2015-04-08\", \"path\": \"0001000100010008\", \"url_path\": \"/home/blog/kivy-tutorial-4---database-support/\", \"expired\": false, \"pk\": 13, \"categories\": \"[{\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Kivy\\\"}, {\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Python\\\"}]\", \"main_image\": 24, \"locked\": false, \"author\": \"Abirafdi Raditya Putra\", \"depth\": 4, \"first_published_at\": \"2015-08-14T04:05:14.619Z\", \"expire_at\": null}", "user": 1, "page": 13}, "model": "wagtailcore.pagerevision", "pk": 87}, {"fields": {"approved_go_live_at": null, "created_at": "2015-08-14T04:12:38.606Z", "submitted_for_moderation": false, "content_json": "{\"search_description\": \"\", \"owner\": 1, \"intro\": \"<p>Pada tutorial ini kita akan membuat form login sederhana menggunakan database yang cross-platform, berjalan di Windows, Android, OS X, dan iOS dengan code yang sama.</p>\", \"latest_revision_created_at\": \"2015-08-14T04:12:31.133Z\", \"main_background_image\": null, \"go_live_at\": null, \"title\": \"Kivy Tutorial 4 - Database Support\", \"seo_title\": \"\", \"slug\": \"kivy-tutorial-4---database-support\", \"content\": \"[{\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Requirements :</p><p></p><ul><li>- dasar-dasar\\\\u00a0<a href=\\\\\\\"http://www.pythonified.com/blog/kivy-tutorial-3-where-to-start/\\\\\\\">kivy</a></li><li>- dasar\\\\u00a0<a href=\\\\\\\"http://www.pythonified.com/blog/perkenalan-orm-dan-sqlalchemy/\\\\\\\">ORM</a>\\\\u00a0dan\\\\u00a0<a href=\\\\\\\"http://www.pythonified.com/blog/perkenalan-orm-dan-sqlalchemy/\\\\\\\">SQLAlchemy</a>.\\\\u00a0</li></ul><p></p><p><br/></p><p>Pada tutorial ini kita akan membuat form login sederhana menggunakan database yang cross-platform, berjalan di Windows, Android, OS X, dan iOS dengan code yang sama. Mau gamau kita menggunakan database yang bersifat file-based, yaitu SQLite. Tentunya SQLite memiliki beberapa kelemahan yaitu:<br/></p><p></p><ol><li>Melakukan migrasi sedikit lebih ribet karena SQLite tidak support seperti menambah dan menghapus kolom, rename kolom dan juga mengganti constraint kolom. Solusinya pada saat migrasi ialah membuat table baru dan pindahkan semua data ke table yang baru. Bagi kalian yang belum tau migrasi, di tutorial berikutnya saya akan coba menjelaskan apa itu migrasi dan memberikan contohnya menggunakan Alembic.</li><li>Tentunya SQLite tidak cocok untuk aplikasi dengan skala besar.</li></ol><p>\\\\u00a0\\\\u00a0</p><p></p><p>Oke pertama kita buat dulu layout login kita dengan menggunakan .kv. Jangan lupa nama file kv harus sama dengan nama app kita tapi menggunakan lowercase-letters.</p>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"latihan.kv\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"#: kivy 1.9.0\\\\r\\\\n\\\\r\\\\n<LoginWindow>:\\\\r\\\\n    canvas.before:\\\\r\\\\n        Color:\\\\r\\\\n            rgba: (1,1,1,1)\\\\r\\\\n        Rectangle:\\\\r\\\\n            pos: self.pos\\\\r\\\\n            size: self.size\\\\r\\\\n    Label:\\\\r\\\\n        text: \\\\\\\"Login\\\\\\\"\\\\r\\\\n        color: (0,0,0,1)\\\\r\\\\n        font_size: 60\\\\r\\\\n        center_x: root.width * 0.5\\\\r\\\\n        center_y: root.top * 0.8\\\\r\\\\n    Label:\\\\r\\\\n        id: username_label\\\\r\\\\n        text: \\\\\\\"Username\\\\\\\"\\\\r\\\\n        color: (0,0,0,1)\\\\r\\\\n        font_size: 30\\\\r\\\\n        right: username_input.x - 60\\\\r\\\\n        center_y: root.top * 0.6\\\\r\\\\n    TextInput:\\\\r\\\\n        id: username_input\\\\r\\\\n        font_size: 20\\\\r\\\\n        center_x: root.width * 0.5\\\\r\\\\n        center_y: root.top * 0.6\\\\r\\\\n        height: 35\\\\r\\\\n        width: 300\\\\r\\\\n    Label:\\\\r\\\\n        id: password_label\\\\r\\\\n        text: \\\\\\\"Password\\\\\\\"\\\\r\\\\n        color: (0,0,0,1)\\\\r\\\\n        font_size: 30\\\\r\\\\n        right: password_input.x - 60\\\\r\\\\n        center_y: root.top * 0.5\\\\r\\\\n    TextInput:\\\\r\\\\n        id: password_input\\\\r\\\\n        font_size: 20\\\\r\\\\n        password: True\\\\r\\\\n        center_x: root.width * 0.5\\\\r\\\\n        center_y: root.top * 0.5\\\\r\\\\n        height: 35\\\\r\\\\n        width: 300\\\\r\\\\n    Button:\\\\r\\\\n        id: login_button\\\\r\\\\n        font_size: 20\\\\r\\\\n        center_x: root.width * 0.5\\\\r\\\\n        center_y: password_input.y - 100\\\\r\\\\n        text: \\\\\\\"login\\\\\\\"\\\\r\\\\n        size: (150,100)\\\\r\\\\n        on_press: root.login()\\\\r\\\\n    Label:\\\\r\\\\n        id: success\\\\r\\\\n        pos: (100,100)\\\\r\\\\n        color: (0,0,0,1)\\\\r\\\\n        text: \\\\\\\"fail\\\\\\\"\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"main.py\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"from kivy.app import App\\\\r\\\\nfrom kivy.uix.widget import Widget\\\\r\\\\n\\\\r\\\\nclass LoginWindow(Widget):\\\\r\\\\n    def login(self, *args):\\\\r\\\\n        username = self.ids.username_input\\\\r\\\\n        username_text = username.text\\\\r\\\\n        password = self.ids.password_input\\\\r\\\\n        password_text = password.text\\\\r\\\\n        if username_text == \\\\\\\"test\\\\\\\" and password_text == \\\\\\\"test\\\\\\\":\\\\r\\\\n            label = self.ids.success\\\\r\\\\n            label.text = \\\\\\\"Success\\\\\\\"\\\\r\\\\n\\\\r\\\\nclass LatihanApp(App):\\\\r\\\\n    def build(self):\\\\r\\\\n        return LoginWindow()\\\\r\\\\n\\\\r\\\\n\\\\r\\\\nif __name__ == '__main__':\\\\r\\\\n    LatihanApp().run()\\\"}]\", \"live\": true, \"thumbnail_image\": 25, \"has_unpublished_changes\": false, \"related_post\": \"[]\", \"main_img_disc\": \"\", \"angular_url\": \"kivy-tutorial-4---database-support\", \"title_extended\": \"\", \"numchild\": 0, \"content_type\": 34, \"show_in_menus\": false, \"date\": \"2015-04-08\", \"path\": \"0001000100010008\", \"url_path\": \"/home/blog/kivy-tutorial-4---database-support/\", \"expired\": false, \"pk\": 13, \"categories\": \"[{\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Kivy\\\"}, {\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Python\\\"}]\", \"main_image\": 24, \"locked\": false, \"author\": \"Abirafdi Raditya Putra\", \"depth\": 4, \"first_published_at\": \"2015-08-14T04:05:14.619Z\", \"expire_at\": null}", "user": 1, "page": 13}, "model": "wagtailcore.pagerevision", "pk": 88}, {"fields": {"approved_go_live_at": null, "created_at": "2015-08-14T04:14:32.060Z", "submitted_for_moderation": false, "content_json": "{\"search_description\": \"\", \"owner\": 1, \"intro\": \"<p>Pada tutorial ini kita akan membuat form login sederhana menggunakan database yang cross-platform, berjalan di Windows, Android, OS X, dan iOS dengan code yang sama.</p>\", \"latest_revision_created_at\": \"2015-08-14T04:12:38.606Z\", \"main_background_image\": null, \"go_live_at\": null, \"title\": \"Kivy Tutorial 4 - Database Support\", \"seo_title\": \"\", \"slug\": \"kivy-tutorial-4---database-support\", \"content\": \"[{\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Requirements :</p><p></p><ul><li>- dasar-dasar\\\\u00a0<a href=\\\\\\\"http://www.pythonified.com/blog/kivy-tutorial-3-where-to-start/\\\\\\\">kivy</a></li><li>- dasar\\\\u00a0<a href=\\\\\\\"http://www.pythonified.com/blog/perkenalan-orm-dan-sqlalchemy/\\\\\\\">ORM</a>\\\\u00a0dan\\\\u00a0<a href=\\\\\\\"http://www.pythonified.com/blog/perkenalan-orm-dan-sqlalchemy/\\\\\\\">SQLAlchemy</a>.\\\\u00a0</li></ul><p></p><p><br/></p><p>Pada tutorial ini kita akan membuat form login sederhana menggunakan database yang cross-platform, berjalan di Windows, Android, OS X, dan iOS dengan code yang sama, salah satu pilihan agar bisa berjalan di semua platform adalah menggunakan database yang bersifat file-based, yaitu SQLite. Tentunya SQLite memiliki beberapa kelemahan yaitu:<br/></p><p></p><ol><li>Melakukan migrasi sedikit lebih rumit karena SQLite tidak support seperti menambah dan menghapus kolom, rename kolom dan juga mengganti constraint kolom. Solusinya pada saat migrasi ialah membuat table baru dan pindahkan semua data ke table yang baru. Bagi kalian yang belum tau migrasi, di tutorial berikutnya saya akan coba menjelaskan apa itu migrasi dan memberikan contohnya menggunakan Alembic.</li><li>Tentunya SQLite tidak cocok untuk aplikasi dengan skala besar.</li></ol><p>\\\\u00a0\\\\u00a0</p><p></p><p>Oke pertama kita buat dulu layout login kita dengan menggunakan .kv. Jangan lupa nama file kv harus sama dengan nama app kita tetapi menggunakan lowercase-letters.</p>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"latihan.kv\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"#: kivy 1.9.0\\\\r\\\\n\\\\r\\\\n<LoginWindow>:\\\\r\\\\n    canvas.before:\\\\r\\\\n        Color:\\\\r\\\\n            rgba: (1,1,1,1)\\\\r\\\\n        Rectangle:\\\\r\\\\n            pos: self.pos\\\\r\\\\n            size: self.size\\\\r\\\\n    Label:\\\\r\\\\n        text: \\\\\\\"Login\\\\\\\"\\\\r\\\\n        color: (0,0,0,1)\\\\r\\\\n        font_size: 60\\\\r\\\\n        center_x: root.width * 0.5\\\\r\\\\n        center_y: root.top * 0.8\\\\r\\\\n    Label:\\\\r\\\\n        id: username_label\\\\r\\\\n        text: \\\\\\\"Username\\\\\\\"\\\\r\\\\n        color: (0,0,0,1)\\\\r\\\\n        font_size: 30\\\\r\\\\n        right: username_input.x - 60\\\\r\\\\n        center_y: root.top * 0.6\\\\r\\\\n    TextInput:\\\\r\\\\n        id: username_input\\\\r\\\\n        font_size: 20\\\\r\\\\n        center_x: root.width * 0.5\\\\r\\\\n        center_y: root.top * 0.6\\\\r\\\\n        height: 35\\\\r\\\\n        width: 300\\\\r\\\\n    Label:\\\\r\\\\n        id: password_label\\\\r\\\\n        text: \\\\\\\"Password\\\\\\\"\\\\r\\\\n        color: (0,0,0,1)\\\\r\\\\n        font_size: 30\\\\r\\\\n        right: password_input.x - 60\\\\r\\\\n        center_y: root.top * 0.5\\\\r\\\\n    TextInput:\\\\r\\\\n        id: password_input\\\\r\\\\n        font_size: 20\\\\r\\\\n        password: True\\\\r\\\\n        center_x: root.width * 0.5\\\\r\\\\n        center_y: root.top * 0.5\\\\r\\\\n        height: 35\\\\r\\\\n        width: 300\\\\r\\\\n    Button:\\\\r\\\\n        id: login_button\\\\r\\\\n        font_size: 20\\\\r\\\\n        center_x: root.width * 0.5\\\\r\\\\n        center_y: password_input.y - 100\\\\r\\\\n        text: \\\\\\\"login\\\\\\\"\\\\r\\\\n        size: (150,100)\\\\r\\\\n        on_press: root.login()\\\\r\\\\n    Label:\\\\r\\\\n        id: success\\\\r\\\\n        pos: (100,100)\\\\r\\\\n        color: (0,0,0,1)\\\\r\\\\n        text: \\\\\\\"fail\\\\\\\"\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"main.py\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"from kivy.app import App\\\\r\\\\nfrom kivy.uix.widget import Widget\\\\r\\\\n\\\\r\\\\nclass LoginWindow(Widget):\\\\r\\\\n    def login(self, *args):\\\\r\\\\n        username = self.ids.username_input\\\\r\\\\n        username_text = username.text\\\\r\\\\n        password = self.ids.password_input\\\\r\\\\n        password_text = password.text\\\\r\\\\n        if username_text == \\\\\\\"test\\\\\\\" and password_text == \\\\\\\"test\\\\\\\":\\\\r\\\\n            label = self.ids.success\\\\r\\\\n            label.text = \\\\\\\"Success\\\\\\\"\\\\r\\\\n\\\\r\\\\nclass LatihanApp(App):\\\\r\\\\n    def build(self):\\\\r\\\\n        return LoginWindow()\\\\r\\\\n\\\\r\\\\n\\\\r\\\\nif __name__ == '__main__':\\\\r\\\\n    LatihanApp().run()\\\"}]\", \"live\": true, \"thumbnail_image\": 25, \"has_unpublished_changes\": false, \"related_post\": \"[]\", \"main_img_disc\": \"\", \"angular_url\": \"kivy-tutorial-4---database-support\", \"title_extended\": \"\", \"numchild\": 0, \"content_type\": 34, \"show_in_menus\": false, \"date\": \"2015-04-08\", \"path\": \"0001000100010008\", \"url_path\": \"/home/blog/kivy-tutorial-4---database-support/\", \"expired\": false, \"pk\": 13, \"categories\": \"[{\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Kivy\\\"}, {\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Python\\\"}]\", \"main_image\": 24, \"locked\": false, \"author\": \"Abirafdi Raditya Putra\", \"depth\": 4, \"first_published_at\": \"2015-08-14T04:05:14.619Z\", \"expire_at\": null}", "user": 1, "page": 13}, "model": "wagtailcore.pagerevision", "pk": 89}, {"fields": {"approved_go_live_at": null, "created_at": "2015-08-14T04:18:46.226Z", "submitted_for_moderation": false, "content_json": "{\"search_description\": \"\", \"owner\": 1, \"intro\": \"<p>Pada tutorial ini kita akan membuat form login sederhana menggunakan database yang cross-platform, berjalan di Windows, Android, OS X, dan iOS dengan code yang sama.</p>\", \"latest_revision_created_at\": \"2015-08-14T04:14:32.060Z\", \"main_background_image\": null, \"go_live_at\": null, \"title\": \"Kivy Tutorial 4 - Database Support\", \"seo_title\": \"\", \"slug\": \"kivy-tutorial-4---database-support\", \"content\": \"[{\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Requirements :</p><p></p><ul><li>- dasar-dasar\\\\u00a0<a href=\\\\\\\"http://www.pythonified.com/blog/kivy-tutorial-3-where-to-start/\\\\\\\">kivy</a></li><li>- dasar\\\\u00a0<a href=\\\\\\\"http://www.pythonified.com/blog/perkenalan-orm-dan-sqlalchemy/\\\\\\\">ORM</a>\\\\u00a0dan\\\\u00a0<a href=\\\\\\\"http://www.pythonified.com/blog/perkenalan-orm-dan-sqlalchemy/\\\\\\\">SQLAlchemy</a>.\\\\u00a0</li></ul><p></p><p><br/></p><p>Pada tutorial ini kita akan membuat form login sederhana menggunakan database yang cross-platform, berjalan di Windows, Android, OS X, dan iOS dengan code yang sama, salah satu pilihan agar database bisa berjalan di semua platform adalah menggunakan database yang bersifat file-based, yaitu SQLite. Tentunya SQLite memiliki beberapa kelemahan yaitu:<br/></p><p></p><ol><li>Melakukan migrasi sedikit lebih rumit karena SQLite tidak support seperti menambah dan menghapus kolom, rename kolom dan juga mengganti constraint kolom. Solusinya pada saat migrasi ialah membuat table baru dan pindahkan semua data ke table yang baru. Bagi kalian yang belum tau migrasi, di tutorial berikutnya saya akan coba menjelaskan apa itu migrasi dan memberikan contohnya menggunakan Alembic.</li><li>Tentunya SQLite tidak cocok untuk aplikasi dengan skala besar.</li></ol><p>\\\\u00a0\\\\u00a0</p><p></p><p>Pertama kita buat dulu layout login kita dengan menggunakan .kv. Jangan lupa nama file kv harus sama dengan nama app kita tetapi menggunakan lowercase-letters.</p>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"latihan.kv\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"#: kivy 1.9.0\\\\r\\\\n\\\\r\\\\n<LoginWindow>:\\\\r\\\\n    canvas.before:\\\\r\\\\n        Color:\\\\r\\\\n            rgba: (1,1,1,1)\\\\r\\\\n        Rectangle:\\\\r\\\\n            pos: self.pos\\\\r\\\\n            size: self.size\\\\r\\\\n    Label:\\\\r\\\\n        text: \\\\\\\"Login\\\\\\\"\\\\r\\\\n        color: (0,0,0,1)\\\\r\\\\n        font_size: 60\\\\r\\\\n        center_x: root.width * 0.5\\\\r\\\\n        center_y: root.top * 0.8\\\\r\\\\n    Label:\\\\r\\\\n        id: username_label\\\\r\\\\n        text: \\\\\\\"Username\\\\\\\"\\\\r\\\\n        color: (0,0,0,1)\\\\r\\\\n        font_size: 30\\\\r\\\\n        right: username_input.x - 60\\\\r\\\\n        center_y: root.top * 0.6\\\\r\\\\n    TextInput:\\\\r\\\\n        id: username_input\\\\r\\\\n        font_size: 20\\\\r\\\\n        center_x: root.width * 0.5\\\\r\\\\n        center_y: root.top * 0.6\\\\r\\\\n        height: 35\\\\r\\\\n        width: 300\\\\r\\\\n    Label:\\\\r\\\\n        id: password_label\\\\r\\\\n        text: \\\\\\\"Password\\\\\\\"\\\\r\\\\n        color: (0,0,0,1)\\\\r\\\\n        font_size: 30\\\\r\\\\n        right: password_input.x - 60\\\\r\\\\n        center_y: root.top * 0.5\\\\r\\\\n    TextInput:\\\\r\\\\n        id: password_input\\\\r\\\\n        font_size: 20\\\\r\\\\n        password: True\\\\r\\\\n        center_x: root.width * 0.5\\\\r\\\\n        center_y: root.top * 0.5\\\\r\\\\n        height: 35\\\\r\\\\n        width: 300\\\\r\\\\n    Button:\\\\r\\\\n        id: login_button\\\\r\\\\n        font_size: 20\\\\r\\\\n        center_x: root.width * 0.5\\\\r\\\\n        center_y: password_input.y - 100\\\\r\\\\n        text: \\\\\\\"login\\\\\\\"\\\\r\\\\n        size: (150,100)\\\\r\\\\n        on_press: root.login()\\\\r\\\\n    Label:\\\\r\\\\n        id: success\\\\r\\\\n        pos: (100,100)\\\\r\\\\n        color: (0,0,0,1)\\\\r\\\\n        text: \\\\\\\"fail\\\\\\\"\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"main.py\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"from kivy.app import App\\\\r\\\\nfrom kivy.uix.widget import Widget\\\\r\\\\n\\\\r\\\\nclass LoginWindow(Widget):\\\\r\\\\n    def login(self, *args):\\\\r\\\\n        username = self.ids.username_input\\\\r\\\\n        username_text = username.text\\\\r\\\\n        password = self.ids.password_input\\\\r\\\\n        password_text = password.text\\\\r\\\\n        if username_text == \\\\\\\"test\\\\\\\" and password_text == \\\\\\\"test\\\\\\\":\\\\r\\\\n            label = self.ids.success\\\\r\\\\n            label.text = \\\\\\\"Success\\\\\\\"\\\\r\\\\n\\\\r\\\\nclass LatihanApp(App):\\\\r\\\\n    def build(self):\\\\r\\\\n        return LoginWindow()\\\\r\\\\n\\\\r\\\\n\\\\r\\\\nif __name__ == '__main__':\\\\r\\\\n    LatihanApp().run()\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Sebelum menggunakan database, kita cek dulu apakah aplikasi kita berjalan atau tidak, username dan password sementara kita hard-coded di dalam file main.py terlebih dahulu</p>\\\"}, {\\\"type\\\": \\\"full_image\\\", \\\"value\\\": 26}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Sekarang tinggal integrasikan SQAlchemy dengan Kivy, pertama kita buat dulu models database kita, jalankan script ini sekali untuk membuat databasenya.</p>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"models.py\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"from sqlalchemy.ext.declarative import declarative_base\\\\r\\\\nfrom sqlalchemy import Column, String\\\\r\\\\nfrom sqlalchemy import create_engine\\\\r\\\\n\\\\r\\\\nBase = declarative_base()\\\\r\\\\n\\\\r\\\\nclass User(Base):\\\\r\\\\n    __tablename__ = 'users'\\\\r\\\\n\\\\r\\\\n    username = Column(String(20), nullable=False, primary_key=True)\\\\r\\\\n    password = Column(String(20), nullable=False)\\\\r\\\\n\\\\r\\\\n\\\\r\\\\nengine = create_engine('sqlite:///latihan.db')\\\\r\\\\nBase.metadata.create_all(engine)\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>tambah record dengan menggunakan Python shell atau dengan menggunakan script berikut</p>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"tambahrecord.py\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"from sqlalchemy import create_engine\\\\r\\\\nfrom sqlalchemy.orm import sessionmaker\\\\r\\\\nfrom models import User\\\\r\\\\n\\\\r\\\\nengine = create_engine('sqlite:///latihan.db')\\\\r\\\\nDBSession = sessionmaker()\\\\r\\\\nDBSession.configure(bind=engine)\\\\r\\\\nsession = DBSession()\\\\r\\\\n\\\\r\\\\nnew_user = User(username='python', password='is_fun')\\\\r\\\\nsession.add(new_user)\\\\r\\\\nsession.commit()\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Selanjutnya kita integrasikan SQLAlchemy ke main.py</p>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"main.py\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"from kivy.app import App\\\\r\\\\nfrom kivy.uix.widget import Widget\\\\r\\\\nfrom kivy.core.window import Window\\\\r\\\\n\\\\r\\\\nfrom sqlalchemy import create_engine\\\\r\\\\nfrom sqlalchemy.orm import sessionmaker\\\\r\\\\nfrom models import User\\\\r\\\\n\\\\r\\\\nengine = create_engine('sqlite:///latihan.db')\\\\r\\\\nDBSession = sessionmaker()\\\\r\\\\nDBSession.configure(bind=engine)\\\\r\\\\nsession = DBSession()\\\\r\\\\n#kita letakkan statements membuat session disini\\\\r\\\\n#supaya session selalu dibuat saat aplikasi di run\\\\r\\\\n\\\\r\\\\nclass LoginWindow(Widget):\\\\r\\\\n    def login(self, *args):\\\\r\\\\n        username_input = self.ids.username_input\\\\r\\\\n        username_text = username_input.text\\\\r\\\\n        password_input = self.ids.password_input\\\\r\\\\n        password_text = password_input.text\\\\r\\\\n\\\\r\\\\n        #lakukan query untuk mendapatkan objek/record yang memiliki\\\\r\\\\n        #username sesuai dengan input. Karena hasil query selalu berbentuk\\\\r\\\\n        #list maka kita harus iterasi\\\\r\\\\n        for a in session.query(User).filter(User.username == username_text):\\\\r\\\\n            if a.password != password_text:\\\\r\\\\n                return\\\\r\\\\n            label = self.ids.success\\\\r\\\\n            label.text = \\\\\\\"Success\\\\\\\"\\\\r\\\\n\\\\r\\\\nclass LatihanApp(App):\\\\r\\\\n    def build(self):\\\\r\\\\n        return LoginWindow()\\\\r\\\\n\\\\r\\\\n\\\\r\\\\nif __name__ == '__main__':\\\\r\\\\n    LatihanApp().run()\\\"}]\", \"live\": true, \"thumbnail_image\": 25, \"has_unpublished_changes\": false, \"related_post\": \"[]\", \"main_img_disc\": \"\", \"angular_url\": \"kivy-tutorial-4---database-support\", \"title_extended\": \"\", \"numchild\": 0, \"content_type\": 34, \"show_in_menus\": false, \"date\": \"2015-04-08\", \"path\": \"0001000100010008\", \"url_path\": \"/home/blog/kivy-tutorial-4---database-support/\", \"expired\": false, \"pk\": 13, \"categories\": \"[{\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Kivy\\\"}, {\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Python\\\"}]\", \"main_image\": 24, \"locked\": false, \"author\": \"Abirafdi Raditya Putra\", \"depth\": 4, \"first_published_at\": \"2015-08-14T04:05:14.619Z\", \"expire_at\": null}", "user": 1, "page": 13}, "model": "wagtailcore.pagerevision", "pk": 90}, {"fields": {"approved_go_live_at": null, "created_at": "2015-08-14T04:19:32.177Z", "submitted_for_moderation": false, "content_json": "{\"search_description\": \"\", \"owner\": 1, \"intro\": \"<p>Pada tutorial ini kita akan membuat form login sederhana menggunakan database yang cross-platform, berjalan di Windows, Android, OS X, dan iOS dengan code yang sama.</p>\", \"latest_revision_created_at\": \"2015-08-14T04:18:46.226Z\", \"main_background_image\": null, \"go_live_at\": null, \"title\": \"Kivy Tutorial 4 - Database Support\", \"seo_title\": \"\", \"slug\": \"kivy-tutorial-4---database-support\", \"content\": \"[{\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Requirements :</p><p></p><ul><li>- dasar-dasar\\\\u00a0<a href=\\\\\\\"http://www.pythonified.com/blog/kivy-tutorial-3-where-to-start/\\\\\\\">kivy</a></li><li>- dasar\\\\u00a0<a href=\\\\\\\"http://www.pythonified.com/blog/perkenalan-orm-dan-sqlalchemy/\\\\\\\">ORM</a>\\\\u00a0dan\\\\u00a0<a href=\\\\\\\"http://www.pythonified.com/blog/perkenalan-orm-dan-sqlalchemy/\\\\\\\">SQLAlchemy</a>.\\\\u00a0</li></ul><p></p><p><br/></p><p>Pada tutorial ini kita akan membuat form login sederhana menggunakan database yang cross-platform, berjalan di Windows, Android, OS X, dan iOS dengan code yang sama, salah satu pilihan agar database bisa berjalan di semua platform adalah menggunakan database yang bersifat file-based, yaitu SQLite. Tentunya SQLite memiliki beberapa kelemahan yaitu:<br/></p><p></p><ol><li>Melakukan migrasi sedikit lebih rumit karena SQLite tidak support seperti menambah dan menghapus kolom, rename kolom dan juga mengganti constraint kolom. Solusinya pada saat migrasi ialah membuat table baru dan pindahkan semua data ke table yang baru. Bagi kalian yang belum tau migrasi, di tutorial berikutnya saya akan coba menjelaskan apa itu migrasi dan memberikan contohnya menggunakan Alembic.</li><li>Tentunya SQLite tidak cocok untuk aplikasi dengan skala besar.</li></ol><p>\\\\u00a0\\\\u00a0</p><p></p><p>Pertama kita buat dulu layout login kita dengan menggunakan .kv. Jangan lupa nama file kv harus sama dengan nama app kita tetapi menggunakan lowercase-letters.</p>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"latihan.kv\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"#: kivy 1.9.0\\\\r\\\\n\\\\r\\\\n<LoginWindow>:\\\\r\\\\n    canvas.before:\\\\r\\\\n        Color:\\\\r\\\\n            rgba: (1,1,1,1)\\\\r\\\\n        Rectangle:\\\\r\\\\n            pos: self.pos\\\\r\\\\n            size: self.size\\\\r\\\\n    Label:\\\\r\\\\n        text: \\\\\\\"Login\\\\\\\"\\\\r\\\\n        color: (0,0,0,1)\\\\r\\\\n        font_size: 60\\\\r\\\\n        center_x: root.width * 0.5\\\\r\\\\n        center_y: root.top * 0.8\\\\r\\\\n    Label:\\\\r\\\\n        id: username_label\\\\r\\\\n        text: \\\\\\\"Username\\\\\\\"\\\\r\\\\n        color: (0,0,0,1)\\\\r\\\\n        font_size: 30\\\\r\\\\n        right: username_input.x - 60\\\\r\\\\n        center_y: root.top * 0.6\\\\r\\\\n    TextInput:\\\\r\\\\n        id: username_input\\\\r\\\\n        font_size: 20\\\\r\\\\n        center_x: root.width * 0.5\\\\r\\\\n        center_y: root.top * 0.6\\\\r\\\\n        height: 35\\\\r\\\\n        width: 300\\\\r\\\\n    Label:\\\\r\\\\n        id: password_label\\\\r\\\\n        text: \\\\\\\"Password\\\\\\\"\\\\r\\\\n        color: (0,0,0,1)\\\\r\\\\n        font_size: 30\\\\r\\\\n        right: password_input.x - 60\\\\r\\\\n        center_y: root.top * 0.5\\\\r\\\\n    TextInput:\\\\r\\\\n        id: password_input\\\\r\\\\n        font_size: 20\\\\r\\\\n        password: True\\\\r\\\\n        center_x: root.width * 0.5\\\\r\\\\n        center_y: root.top * 0.5\\\\r\\\\n        height: 35\\\\r\\\\n        width: 300\\\\r\\\\n    Button:\\\\r\\\\n        id: login_button\\\\r\\\\n        font_size: 20\\\\r\\\\n        center_x: root.width * 0.5\\\\r\\\\n        center_y: password_input.y - 100\\\\r\\\\n        text: \\\\\\\"login\\\\\\\"\\\\r\\\\n        size: (150,100)\\\\r\\\\n        on_press: root.login()\\\\r\\\\n    Label:\\\\r\\\\n        id: success\\\\r\\\\n        pos: (100,100)\\\\r\\\\n        color: (0,0,0,1)\\\\r\\\\n        text: \\\\\\\"fail\\\\\\\"\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"main.py\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"from kivy.app import App\\\\r\\\\nfrom kivy.uix.widget import Widget\\\\r\\\\n\\\\r\\\\nclass LoginWindow(Widget):\\\\r\\\\n    def login(self, *args):\\\\r\\\\n        username = self.ids.username_input\\\\r\\\\n        username_text = username.text\\\\r\\\\n        password = self.ids.password_input\\\\r\\\\n        password_text = password.text\\\\r\\\\n        if username_text == \\\\\\\"test\\\\\\\" and password_text == \\\\\\\"test\\\\\\\":\\\\r\\\\n            label = self.ids.success\\\\r\\\\n            label.text = \\\\\\\"Success\\\\\\\"\\\\r\\\\n\\\\r\\\\nclass LatihanApp(App):\\\\r\\\\n    def build(self):\\\\r\\\\n        return LoginWindow()\\\\r\\\\n\\\\r\\\\n\\\\r\\\\nif __name__ == '__main__':\\\\r\\\\n    LatihanApp().run()\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Sebelum menggunakan database, kita cek dulu apakah aplikasi kita berjalan atau tidak, username dan password sementara kita hard-coded di dalam file main.py terlebih dahulu</p>\\\"}, {\\\"type\\\": \\\"full_image\\\", \\\"value\\\": 26}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Success, sekarang tinggal integrasikan SQAlchemy dengan Kivy, pertama kita buat dulu models database kita, jalankan script ini sekali untuk membuat databasenya.</p>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"models.py\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"from sqlalchemy.ext.declarative import declarative_base\\\\r\\\\nfrom sqlalchemy import Column, String\\\\r\\\\nfrom sqlalchemy import create_engine\\\\r\\\\n\\\\r\\\\nBase = declarative_base()\\\\r\\\\n\\\\r\\\\nclass User(Base):\\\\r\\\\n    __tablename__ = 'users'\\\\r\\\\n\\\\r\\\\n    username = Column(String(20), nullable=False, primary_key=True)\\\\r\\\\n    password = Column(String(20), nullable=False)\\\\r\\\\n\\\\r\\\\n\\\\r\\\\nengine = create_engine('sqlite:///latihan.db')\\\\r\\\\nBase.metadata.create_all(engine)\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>tambah record dengan menggunakan Python shell atau dengan menggunakan script berikut</p>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"tambahrecord.py\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"from sqlalchemy import create_engine\\\\r\\\\nfrom sqlalchemy.orm import sessionmaker\\\\r\\\\nfrom models import User\\\\r\\\\n\\\\r\\\\nengine = create_engine('sqlite:///latihan.db')\\\\r\\\\nDBSession = sessionmaker()\\\\r\\\\nDBSession.configure(bind=engine)\\\\r\\\\nsession = DBSession()\\\\r\\\\n\\\\r\\\\nnew_user = User(username='python', password='is_fun')\\\\r\\\\nsession.add(new_user)\\\\r\\\\nsession.commit()\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Selanjutnya kita integrasikan SQLAlchemy ke main.py</p>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"main.py\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"from kivy.app import App\\\\r\\\\nfrom kivy.uix.widget import Widget\\\\r\\\\nfrom kivy.core.window import Window\\\\r\\\\n\\\\r\\\\nfrom sqlalchemy import create_engine\\\\r\\\\nfrom sqlalchemy.orm import sessionmaker\\\\r\\\\nfrom models import User\\\\r\\\\n\\\\r\\\\nengine = create_engine('sqlite:///latihan.db')\\\\r\\\\nDBSession = sessionmaker()\\\\r\\\\nDBSession.configure(bind=engine)\\\\r\\\\nsession = DBSession()\\\\r\\\\n#kita letakkan statements membuat session disini\\\\r\\\\n#supaya session selalu dibuat saat aplikasi di run\\\\r\\\\n\\\\r\\\\nclass LoginWindow(Widget):\\\\r\\\\n    def login(self, *args):\\\\r\\\\n        username_input = self.ids.username_input\\\\r\\\\n        username_text = username_input.text\\\\r\\\\n        password_input = self.ids.password_input\\\\r\\\\n        password_text = password_input.text\\\\r\\\\n\\\\r\\\\n        #lakukan query untuk mendapatkan objek/record yang memiliki\\\\r\\\\n        #username sesuai dengan input. Karena hasil query selalu berbentuk\\\\r\\\\n        #list maka kita harus iterasi\\\\r\\\\n        for a in session.query(User).filter(User.username == username_text):\\\\r\\\\n            if a.password != password_text:\\\\r\\\\n                return\\\\r\\\\n            label = self.ids.success\\\\r\\\\n            label.text = \\\\\\\"Success\\\\\\\"\\\\r\\\\n\\\\r\\\\nclass LatihanApp(App):\\\\r\\\\n    def build(self):\\\\r\\\\n        return LoginWindow()\\\\r\\\\n\\\\r\\\\n\\\\r\\\\nif __name__ == '__main__':\\\\r\\\\n    LatihanApp().run()\\\"}]\", \"live\": true, \"thumbnail_image\": 25, \"has_unpublished_changes\": false, \"related_post\": \"[]\", \"main_img_disc\": \"\", \"angular_url\": \"kivy-tutorial-4---database-support\", \"title_extended\": \"\", \"numchild\": 0, \"content_type\": 34, \"show_in_menus\": false, \"date\": \"2015-04-08\", \"path\": \"0001000100010008\", \"url_path\": \"/home/blog/kivy-tutorial-4---database-support/\", \"expired\": false, \"pk\": 13, \"categories\": \"[{\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Kivy\\\"}, {\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Python\\\"}]\", \"main_image\": 24, \"locked\": false, \"author\": \"Abirafdi Raditya Putra\", \"depth\": 4, \"first_published_at\": \"2015-08-14T04:05:14.619Z\", \"expire_at\": null}", "user": 1, "page": 13}, "model": "wagtailcore.pagerevision", "pk": 91}, {"fields": {"approved_go_live_at": null, "created_at": "2015-08-14T04:20:29.354Z", "submitted_for_moderation": false, "content_json": "{\"search_description\": \"\", \"owner\": 1, \"intro\": \"<p>Pada tutorial ini kita akan membuat form login sederhana menggunakan database yang cross-platform, berjalan di Windows, Android, OS X, dan iOS dengan code yang sama.</p>\", \"latest_revision_created_at\": \"2015-08-14T04:19:32.177Z\", \"main_background_image\": null, \"go_live_at\": null, \"title\": \"Kivy Tutorial 4 - Database Support\", \"seo_title\": \"\", \"slug\": \"kivy-tutorial-4---database-support\", \"content\": \"[{\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Requirements :</p><p></p><ul><li>- dasar-dasar\\\\u00a0<a href=\\\\\\\"http://www.pythonified.com/blog/kivy-tutorial-3-where-to-start/\\\\\\\">kivy</a></li><li>- dasar\\\\u00a0<a href=\\\\\\\"http://www.pythonified.com/blog/perkenalan-orm-dan-sqlalchemy/\\\\\\\">ORM</a>\\\\u00a0dan\\\\u00a0<a href=\\\\\\\"http://www.pythonified.com/blog/perkenalan-orm-dan-sqlalchemy/\\\\\\\">SQLAlchemy</a>.\\\\u00a0</li></ul><p></p><p><br/></p><p>Pada tutorial ini kita akan membuat form login sederhana menggunakan database yang cross-platform, berjalan di Windows, Android, OS X, dan iOS dengan code yang sama, salah satu pilihan agar database bisa berjalan di semua platform adalah menggunakan database yang bersifat file-based, yaitu SQLite. Tentunya SQLite memiliki beberapa kelemahan yaitu:<br/></p><p></p><ol><li>Melakukan migrasi sedikit lebih rumit karena SQLite tidak support seperti menambah dan menghapus kolom, rename kolom dan juga mengganti constraint kolom. Solusinya pada saat migrasi ialah membuat table baru dan pindahkan semua data ke table yang baru. Bagi kalian yang belum tau migrasi, di tutorial berikutnya saya akan coba menjelaskan apa itu migrasi dan memberikan contohnya menggunakan Alembic.</li><li>Tentunya SQLite tidak cocok untuk aplikasi dengan skala besar.</li></ol><p>\\\\u00a0\\\\u00a0</p><p></p><p>Pertama kita buat dulu layout login kita dengan menggunakan .kv. Jangan lupa nama file kv harus sama dengan nama app kita tetapi menggunakan lowercase-letters.</p>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"latihan.kv\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"#: kivy 1.9.0\\\\r\\\\n\\\\r\\\\n<LoginWindow>:\\\\r\\\\n    canvas.before:\\\\r\\\\n        Color:\\\\r\\\\n            rgba: (1,1,1,1)\\\\r\\\\n        Rectangle:\\\\r\\\\n            pos: self.pos\\\\r\\\\n            size: self.size\\\\r\\\\n    Label:\\\\r\\\\n        text: \\\\\\\"Login\\\\\\\"\\\\r\\\\n        color: (0,0,0,1)\\\\r\\\\n        font_size: 60\\\\r\\\\n        center_x: root.width * 0.5\\\\r\\\\n        center_y: root.top * 0.8\\\\r\\\\n    Label:\\\\r\\\\n        id: username_label\\\\r\\\\n        text: \\\\\\\"Username\\\\\\\"\\\\r\\\\n        color: (0,0,0,1)\\\\r\\\\n        font_size: 30\\\\r\\\\n        right: username_input.x - 60\\\\r\\\\n        center_y: root.top * 0.6\\\\r\\\\n    TextInput:\\\\r\\\\n        id: username_input\\\\r\\\\n        font_size: 20\\\\r\\\\n        center_x: root.width * 0.5\\\\r\\\\n        center_y: root.top * 0.6\\\\r\\\\n        height: 35\\\\r\\\\n        width: 300\\\\r\\\\n    Label:\\\\r\\\\n        id: password_label\\\\r\\\\n        text: \\\\\\\"Password\\\\\\\"\\\\r\\\\n        color: (0,0,0,1)\\\\r\\\\n        font_size: 30\\\\r\\\\n        right: password_input.x - 60\\\\r\\\\n        center_y: root.top * 0.5\\\\r\\\\n    TextInput:\\\\r\\\\n        id: password_input\\\\r\\\\n        font_size: 20\\\\r\\\\n        password: True\\\\r\\\\n        center_x: root.width * 0.5\\\\r\\\\n        center_y: root.top * 0.5\\\\r\\\\n        height: 35\\\\r\\\\n        width: 300\\\\r\\\\n    Button:\\\\r\\\\n        id: login_button\\\\r\\\\n        font_size: 20\\\\r\\\\n        center_x: root.width * 0.5\\\\r\\\\n        center_y: password_input.y - 100\\\\r\\\\n        text: \\\\\\\"login\\\\\\\"\\\\r\\\\n        size: (150,100)\\\\r\\\\n        on_press: root.login()\\\\r\\\\n    Label:\\\\r\\\\n        id: success\\\\r\\\\n        pos: (100,100)\\\\r\\\\n        color: (0,0,0,1)\\\\r\\\\n        text: \\\\\\\"fail\\\\\\\"\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"main.py\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"from kivy.app import App\\\\r\\\\nfrom kivy.uix.widget import Widget\\\\r\\\\n\\\\r\\\\nclass LoginWindow(Widget):\\\\r\\\\n    def login(self, *args):\\\\r\\\\n        username = self.ids.username_input\\\\r\\\\n        username_text = username.text\\\\r\\\\n        password = self.ids.password_input\\\\r\\\\n        password_text = password.text\\\\r\\\\n        if username_text == \\\\\\\"test\\\\\\\" and password_text == \\\\\\\"test\\\\\\\":\\\\r\\\\n            label = self.ids.success\\\\r\\\\n            label.text = \\\\\\\"Success\\\\\\\"\\\\r\\\\n\\\\r\\\\nclass LatihanApp(App):\\\\r\\\\n    def build(self):\\\\r\\\\n        return LoginWindow()\\\\r\\\\n\\\\r\\\\n\\\\r\\\\nif __name__ == '__main__':\\\\r\\\\n    LatihanApp().run()\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Sebelum menggunakan database, kita cek dulu apakah aplikasi kita berjalan atau tidak, username dan password sementara kita hard-coded di dalam file main.py terlebih dahulu</p>\\\"}, {\\\"type\\\": \\\"full_image\\\", \\\"value\\\": 26}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Success, sekarang tinggal integrasikan SQAlchemy dengan Kivy, pertama kita buat dulu models database kita, jalankan script ini sekali untuk membuat databasenya.</p>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"models.py\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"from sqlalchemy.ext.declarative import declarative_base\\\\r\\\\nfrom sqlalchemy import Column, String\\\\r\\\\nfrom sqlalchemy import create_engine\\\\r\\\\n\\\\r\\\\nBase = declarative_base()\\\\r\\\\n\\\\r\\\\nclass User(Base):\\\\r\\\\n    __tablename__ = 'users'\\\\r\\\\n\\\\r\\\\n    username = Column(String(20), nullable=False, primary_key=True)\\\\r\\\\n    password = Column(String(20), nullable=False)\\\\r\\\\n\\\\r\\\\n\\\\r\\\\nengine = create_engine('sqlite:///latihan.db')\\\\r\\\\nBase.metadata.create_all(engine)\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p><br/></p><p>tambah record dengan menggunakan Python shell atau dengan menggunakan script berikut</p>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"tambahrecord.py\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"from sqlalchemy import create_engine\\\\r\\\\nfrom sqlalchemy.orm import sessionmaker\\\\r\\\\nfrom models import User\\\\r\\\\n\\\\r\\\\nengine = create_engine('sqlite:///latihan.db')\\\\r\\\\nDBSession = sessionmaker()\\\\r\\\\nDBSession.configure(bind=engine)\\\\r\\\\nsession = DBSession()\\\\r\\\\n\\\\r\\\\nnew_user = User(username='python', password='is_fun')\\\\r\\\\nsession.add(new_user)\\\\r\\\\nsession.commit()\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p><br/></p><p>Selanjutnya kita integrasikan SQLAlchemy ke main.py</p>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"main.py\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"from kivy.app import App\\\\r\\\\nfrom kivy.uix.widget import Widget\\\\r\\\\nfrom kivy.core.window import Window\\\\r\\\\n\\\\r\\\\nfrom sqlalchemy import create_engine\\\\r\\\\nfrom sqlalchemy.orm import sessionmaker\\\\r\\\\nfrom models import User\\\\r\\\\n\\\\r\\\\nengine = create_engine('sqlite:///latihan.db')\\\\r\\\\nDBSession = sessionmaker()\\\\r\\\\nDBSession.configure(bind=engine)\\\\r\\\\nsession = DBSession()\\\\r\\\\n#kita letakkan statements membuat session disini\\\\r\\\\n#supaya session selalu dibuat saat aplikasi di run\\\\r\\\\n\\\\r\\\\nclass LoginWindow(Widget):\\\\r\\\\n    def login(self, *args):\\\\r\\\\n        username_input = self.ids.username_input\\\\r\\\\n        username_text = username_input.text\\\\r\\\\n        password_input = self.ids.password_input\\\\r\\\\n        password_text = password_input.text\\\\r\\\\n\\\\r\\\\n        #lakukan query untuk mendapatkan objek/record yang memiliki\\\\r\\\\n        #username sesuai dengan input. Karena hasil query selalu berbentuk\\\\r\\\\n        #list maka kita harus iterasi\\\\r\\\\n        for a in session.query(User).filter(User.username == username_text):\\\\r\\\\n            if a.password != password_text:\\\\r\\\\n                return\\\\r\\\\n            label = self.ids.success\\\\r\\\\n            label.text = \\\\\\\"Success\\\\\\\"\\\\r\\\\n\\\\r\\\\nclass LatihanApp(App):\\\\r\\\\n    def build(self):\\\\r\\\\n        return LoginWindow()\\\\r\\\\n\\\\r\\\\n\\\\r\\\\nif __name__ == '__main__':\\\\r\\\\n    LatihanApp().run()\\\"}]\", \"live\": true, \"thumbnail_image\": 25, \"has_unpublished_changes\": false, \"related_post\": \"[]\", \"main_img_disc\": \"\", \"angular_url\": \"kivy-tutorial-4---database-support\", \"title_extended\": \"\", \"numchild\": 0, \"content_type\": 34, \"show_in_menus\": false, \"date\": \"2015-04-08\", \"path\": \"0001000100010008\", \"url_path\": \"/home/blog/kivy-tutorial-4---database-support/\", \"expired\": false, \"pk\": 13, \"categories\": \"[{\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Kivy\\\"}, {\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Python\\\"}]\", \"main_image\": 24, \"locked\": false, \"author\": \"Abirafdi Raditya Putra\", \"depth\": 4, \"first_published_at\": \"2015-08-14T04:05:14.619Z\", \"expire_at\": null}", "user": 1, "page": 13}, "model": "wagtailcore.pagerevision", "pk": 92}, {"fields": {"approved_go_live_at": null, "created_at": "2015-08-14T04:20:59.792Z", "submitted_for_moderation": false, "content_json": "{\"search_description\": \"\", \"owner\": 1, \"intro\": \"<p>Pada tutorial ini kita akan membuat form login sederhana menggunakan database yang cross-platform, berjalan di Windows, Android, OS X, dan iOS dengan code yang sama.</p>\", \"latest_revision_created_at\": \"2015-08-14T04:20:29.354Z\", \"main_background_image\": null, \"go_live_at\": null, \"title\": \"Kivy Tutorial 4 - Database Support\", \"seo_title\": \"\", \"slug\": \"kivy-tutorial-4---database-support\", \"content\": \"[{\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Requirements :</p><p></p><ul><li>- dasar-dasar\\\\u00a0<a href=\\\\\\\"http://www.pythonified.com/blog/kivy-tutorial-3-where-to-start/\\\\\\\">kivy</a></li><li>- dasar\\\\u00a0<a href=\\\\\\\"http://www.pythonified.com/blog/perkenalan-orm-dan-sqlalchemy/\\\\\\\">ORM</a>\\\\u00a0dan\\\\u00a0<a href=\\\\\\\"http://www.pythonified.com/blog/perkenalan-orm-dan-sqlalchemy/\\\\\\\">SQLAlchemy</a>.\\\\u00a0</li></ul><p></p><p><br/></p><p>Pada tutorial ini kita akan membuat form login sederhana menggunakan database yang cross-platform, berjalan di Windows, Android, OS X, dan iOS dengan code yang sama, salah satu pilihan agar database bisa berjalan di semua platform adalah menggunakan database yang bersifat file-based, yaitu SQLite. Tentunya SQLite memiliki beberapa kelemahan yaitu:<br/></p><p></p><ol><li>Melakukan migrasi sedikit lebih rumit karena SQLite tidak support seperti menambah dan menghapus kolom, rename kolom dan juga mengganti constraint kolom. Solusinya pada saat migrasi ialah membuat table baru dan pindahkan semua data ke table yang baru. Bagi kalian yang belum tau migrasi, di tutorial berikutnya saya akan coba menjelaskan apa itu migrasi dan memberikan contohnya menggunakan Alembic.</li><li>Tentunya SQLite tidak cocok untuk aplikasi dengan skala besar.</li></ol><p>\\\\u00a0\\\\u00a0</p><p></p><p>Pertama kita buat dulu layout login kita dengan menggunakan .kv. Jangan lupa nama file kv harus sama dengan nama app kita tetapi menggunakan lowercase-letters.</p>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"latihan.kv\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"#: kivy 1.9.0\\\\r\\\\n\\\\r\\\\n<LoginWindow>:\\\\r\\\\n    canvas.before:\\\\r\\\\n        Color:\\\\r\\\\n            rgba: (1,1,1,1)\\\\r\\\\n        Rectangle:\\\\r\\\\n            pos: self.pos\\\\r\\\\n            size: self.size\\\\r\\\\n    Label:\\\\r\\\\n        text: \\\\\\\"Login\\\\\\\"\\\\r\\\\n        color: (0,0,0,1)\\\\r\\\\n        font_size: 60\\\\r\\\\n        center_x: root.width * 0.5\\\\r\\\\n        center_y: root.top * 0.8\\\\r\\\\n    Label:\\\\r\\\\n        id: username_label\\\\r\\\\n        text: \\\\\\\"Username\\\\\\\"\\\\r\\\\n        color: (0,0,0,1)\\\\r\\\\n        font_size: 30\\\\r\\\\n        right: username_input.x - 60\\\\r\\\\n        center_y: root.top * 0.6\\\\r\\\\n    TextInput:\\\\r\\\\n        id: username_input\\\\r\\\\n        font_size: 20\\\\r\\\\n        center_x: root.width * 0.5\\\\r\\\\n        center_y: root.top * 0.6\\\\r\\\\n        height: 35\\\\r\\\\n        width: 300\\\\r\\\\n    Label:\\\\r\\\\n        id: password_label\\\\r\\\\n        text: \\\\\\\"Password\\\\\\\"\\\\r\\\\n        color: (0,0,0,1)\\\\r\\\\n        font_size: 30\\\\r\\\\n        right: password_input.x - 60\\\\r\\\\n        center_y: root.top * 0.5\\\\r\\\\n    TextInput:\\\\r\\\\n        id: password_input\\\\r\\\\n        font_size: 20\\\\r\\\\n        password: True\\\\r\\\\n        center_x: root.width * 0.5\\\\r\\\\n        center_y: root.top * 0.5\\\\r\\\\n        height: 35\\\\r\\\\n        width: 300\\\\r\\\\n    Button:\\\\r\\\\n        id: login_button\\\\r\\\\n        font_size: 20\\\\r\\\\n        center_x: root.width * 0.5\\\\r\\\\n        center_y: password_input.y - 100\\\\r\\\\n        text: \\\\\\\"login\\\\\\\"\\\\r\\\\n        size: (150,100)\\\\r\\\\n        on_press: root.login()\\\\r\\\\n    Label:\\\\r\\\\n        id: success\\\\r\\\\n        pos: (100,100)\\\\r\\\\n        color: (0,0,0,1)\\\\r\\\\n        text: \\\\\\\"fail\\\\\\\"\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"main.py\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"from kivy.app import App\\\\r\\\\nfrom kivy.uix.widget import Widget\\\\r\\\\n\\\\r\\\\nclass LoginWindow(Widget):\\\\r\\\\n    def login(self, *args):\\\\r\\\\n        username = self.ids.username_input\\\\r\\\\n        username_text = username.text\\\\r\\\\n        password = self.ids.password_input\\\\r\\\\n        password_text = password.text\\\\r\\\\n        if username_text == \\\\\\\"test\\\\\\\" and password_text == \\\\\\\"test\\\\\\\":\\\\r\\\\n            label = self.ids.success\\\\r\\\\n            label.text = \\\\\\\"Success\\\\\\\"\\\\r\\\\n\\\\r\\\\nclass LatihanApp(App):\\\\r\\\\n    def build(self):\\\\r\\\\n        return LoginWindow()\\\\r\\\\n\\\\r\\\\n\\\\r\\\\nif __name__ == '__main__':\\\\r\\\\n    LatihanApp().run()\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Sebelum menggunakan database, kita cek dulu apakah aplikasi kita berjalan atau tidak, username dan password sementara kita hard-coded di dalam file main.py terlebih dahulu</p>\\\"}, {\\\"type\\\": \\\"full_image\\\", \\\"value\\\": 26}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Success, sekarang tinggal integrasikan SQAlchemy dengan Kivy, pertama kita buat dulu models database kita, jalankan script ini sekali untuk membuat databasenya.</p>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"models.py\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"from sqlalchemy.ext.declarative import declarative_base\\\\r\\\\nfrom sqlalchemy import Column, String\\\\r\\\\nfrom sqlalchemy import create_engine\\\\r\\\\n\\\\r\\\\nBase = declarative_base()\\\\r\\\\n\\\\r\\\\nclass User(Base):\\\\r\\\\n    __tablename__ = 'users'\\\\r\\\\n\\\\r\\\\n    username = Column(String(20), nullable=False, primary_key=True)\\\\r\\\\n    password = Column(String(20), nullable=False)\\\\r\\\\n\\\\r\\\\n\\\\r\\\\nengine = create_engine('sqlite:///latihan.db')\\\\r\\\\nBase.metadata.create_all(engine)\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p><br/></p><p>tambah record dengan menggunakan Python shell atau dengan menggunakan script berikut</p>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"tambahrecord.py\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"from sqlalchemy import create_engine\\\\r\\\\nfrom sqlalchemy.orm import sessionmaker\\\\r\\\\nfrom models import User\\\\r\\\\n\\\\r\\\\nengine = create_engine('sqlite:///latihan.db')\\\\r\\\\nDBSession = sessionmaker()\\\\r\\\\nDBSession.configure(bind=engine)\\\\r\\\\nsession = DBSession()\\\\r\\\\n\\\\r\\\\nnew_user = User(username='python', password='is_fun')\\\\r\\\\nsession.add(new_user)\\\\r\\\\nsession.commit()\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p><br/></p><p>Selanjutnya kita integrasikan SQLAlchemy ke main.py</p>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"main.py\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"from kivy.app import App\\\\r\\\\nfrom kivy.uix.widget import Widget\\\\r\\\\nfrom kivy.core.window import Window\\\\r\\\\n\\\\r\\\\nfrom sqlalchemy import create_engine\\\\r\\\\nfrom sqlalchemy.orm import sessionmaker\\\\r\\\\nfrom models import User\\\\r\\\\n\\\\r\\\\nengine = create_engine('sqlite:///latihan.db')\\\\r\\\\nDBSession = sessionmaker()\\\\r\\\\nDBSession.configure(bind=engine)\\\\r\\\\nsession = DBSession()\\\\r\\\\n# kita letakkan statements membuat session disini\\\\r\\\\n# supaya session selalu dibuat saat aplikasi di run\\\\r\\\\n\\\\r\\\\nclass LoginWindow(Widget):\\\\r\\\\n    def login(self, *args):\\\\r\\\\n        username_input = self.ids.username_input\\\\r\\\\n        username_text = username_input.text\\\\r\\\\n        password_input = self.ids.password_input\\\\r\\\\n        password_text = password_input.text\\\\r\\\\n\\\\r\\\\n        # lakukan query untuk mendapatkan objek/record yang memiliki\\\\r\\\\n        # username sesuai dengan input. Karena hasil query selalu berbentuk\\\\r\\\\n        # list maka kita harus iterasi\\\\r\\\\n        for a in session.query(User).filter(User.username == username_text):\\\\r\\\\n            if a.password != password_text:\\\\r\\\\n                return\\\\r\\\\n            label = self.ids.success\\\\r\\\\n            label.text = \\\\\\\"Success\\\\\\\"\\\\r\\\\n\\\\r\\\\nclass LatihanApp(App):\\\\r\\\\n    def build(self):\\\\r\\\\n        return LoginWindow()\\\\r\\\\n\\\\r\\\\n\\\\r\\\\nif __name__ == '__main__':\\\\r\\\\n    LatihanApp().run()\\\"}]\", \"live\": true, \"thumbnail_image\": 25, \"has_unpublished_changes\": false, \"related_post\": \"[]\", \"main_img_disc\": \"\", \"angular_url\": \"kivy-tutorial-4---database-support\", \"title_extended\": \"\", \"numchild\": 0, \"content_type\": 34, \"show_in_menus\": false, \"date\": \"2015-04-08\", \"path\": \"0001000100010008\", \"url_path\": \"/home/blog/kivy-tutorial-4---database-support/\", \"expired\": false, \"pk\": 13, \"categories\": \"[{\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Kivy\\\"}, {\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Python\\\"}]\", \"main_image\": 24, \"locked\": false, \"author\": \"Abirafdi Raditya Putra\", \"depth\": 4, \"first_published_at\": \"2015-08-14T04:05:14.619Z\", \"expire_at\": null}", "user": 1, "page": 13}, "model": "wagtailcore.pagerevision", "pk": 93}, {"fields": {"approved_go_live_at": null, "created_at": "2015-08-14T04:22:28.506Z", "submitted_for_moderation": false, "content_json": "{\"search_description\": \"\", \"owner\": 1, \"intro\": \"<p>Pada tutorial ini kita akan membuat form login sederhana menggunakan database yang cross-platform, berjalan di Windows, Android, OS X, dan iOS dengan code yang sama.</p>\", \"latest_revision_created_at\": \"2015-08-14T04:20:59.792Z\", \"main_background_image\": null, \"go_live_at\": null, \"title\": \"Kivy Tutorial 4 - Database Support\", \"seo_title\": \"\", \"slug\": \"kivy-tutorial-4---database-support\", \"content\": \"[{\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Requirements :</p><p></p><ul><li>- dasar-dasar\\\\u00a0<a href=\\\\\\\"http://www.pythonified.com/blog/kivy-tutorial-3-where-to-start/\\\\\\\">kivy</a></li><li>- dasar\\\\u00a0<a href=\\\\\\\"http://www.pythonified.com/blog/perkenalan-orm-dan-sqlalchemy/\\\\\\\">ORM</a>\\\\u00a0dan\\\\u00a0<a href=\\\\\\\"http://www.pythonified.com/blog/perkenalan-orm-dan-sqlalchemy/\\\\\\\">SQLAlchemy</a>.\\\\u00a0</li></ul><p></p><p><br/></p><p>Pada tutorial ini kita akan membuat form login sederhana menggunakan database yang cross-platform, berjalan di Windows, Android, OS X, dan iOS dengan code yang sama, salah satu pilihan agar database bisa berjalan di semua platform adalah menggunakan database yang bersifat file-based, yaitu SQLite. Tentunya SQLite memiliki beberapa kelemahan yaitu:<br/></p><p></p><ol><li>Melakukan migrasi sedikit lebih rumit karena SQLite tidak support seperti menambah dan menghapus kolom, rename kolom dan juga mengganti constraint kolom. Solusinya pada saat migrasi ialah membuat table baru dan pindahkan semua data ke table yang baru. Bagi kalian yang belum tau migrasi, di tutorial berikutnya saya akan coba menjelaskan apa itu migrasi dan memberikan contohnya menggunakan Alembic.</li><li>Tentunya SQLite tidak cocok untuk aplikasi dengan skala besar.</li></ol><p>\\\\u00a0\\\\u00a0</p><p></p><p>Pertama kita buat dulu layout login kita dengan menggunakan .kv. Jangan lupa nama file kv harus sama dengan nama app kita tetapi menggunakan lowercase-letters.</p>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"latihan.kv\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"#: kivy 1.9.0\\\\r\\\\n\\\\r\\\\n<LoginWindow>:\\\\r\\\\n    canvas.before:\\\\r\\\\n        Color:\\\\r\\\\n            rgba: (1,1,1,1)\\\\r\\\\n        Rectangle:\\\\r\\\\n            pos: self.pos\\\\r\\\\n            size: self.size\\\\r\\\\n    Label:\\\\r\\\\n        text: \\\\\\\"Login\\\\\\\"\\\\r\\\\n        color: (0,0,0,1)\\\\r\\\\n        font_size: 60\\\\r\\\\n        center_x: root.width * 0.5\\\\r\\\\n        center_y: root.top * 0.8\\\\r\\\\n    Label:\\\\r\\\\n        id: username_label\\\\r\\\\n        text: \\\\\\\"Username\\\\\\\"\\\\r\\\\n        color: (0,0,0,1)\\\\r\\\\n        font_size: 30\\\\r\\\\n        right: username_input.x - 60\\\\r\\\\n        center_y: root.top * 0.6\\\\r\\\\n    TextInput:\\\\r\\\\n        id: username_input\\\\r\\\\n        font_size: 20\\\\r\\\\n        center_x: root.width * 0.5\\\\r\\\\n        center_y: root.top * 0.6\\\\r\\\\n        height: 35\\\\r\\\\n        width: 300\\\\r\\\\n    Label:\\\\r\\\\n        id: password_label\\\\r\\\\n        text: \\\\\\\"Password\\\\\\\"\\\\r\\\\n        color: (0,0,0,1)\\\\r\\\\n        font_size: 30\\\\r\\\\n        right: password_input.x - 60\\\\r\\\\n        center_y: root.top * 0.5\\\\r\\\\n    TextInput:\\\\r\\\\n        id: password_input\\\\r\\\\n        font_size: 20\\\\r\\\\n        password: True\\\\r\\\\n        center_x: root.width * 0.5\\\\r\\\\n        center_y: root.top * 0.5\\\\r\\\\n        height: 35\\\\r\\\\n        width: 300\\\\r\\\\n    Button:\\\\r\\\\n        id: login_button\\\\r\\\\n        font_size: 20\\\\r\\\\n        center_x: root.width * 0.5\\\\r\\\\n        center_y: password_input.y - 100\\\\r\\\\n        text: \\\\\\\"login\\\\\\\"\\\\r\\\\n        size: (150,100)\\\\r\\\\n        on_press: root.login()\\\\r\\\\n    Label:\\\\r\\\\n        id: success\\\\r\\\\n        pos: (100,100)\\\\r\\\\n        color: (0,0,0,1)\\\\r\\\\n        text: \\\\\\\"fail\\\\\\\"\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"main.py\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"from kivy.app import App\\\\r\\\\nfrom kivy.uix.widget import Widget\\\\r\\\\n\\\\r\\\\nclass LoginWindow(Widget):\\\\r\\\\n    def login(self, *args):\\\\r\\\\n        username = self.ids.username_input\\\\r\\\\n        username_text = username.text\\\\r\\\\n        password = self.ids.password_input\\\\r\\\\n        password_text = password.text\\\\r\\\\n        if username_text == \\\\\\\"test\\\\\\\" and password_text == \\\\\\\"test\\\\\\\":\\\\r\\\\n            label = self.ids.success\\\\r\\\\n            label.text = \\\\\\\"Success\\\\\\\"\\\\r\\\\n\\\\r\\\\nclass LatihanApp(App):\\\\r\\\\n    def build(self):\\\\r\\\\n        return LoginWindow()\\\\r\\\\n\\\\r\\\\n\\\\r\\\\nif __name__ == '__main__':\\\\r\\\\n    LatihanApp().run()\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Sebelum menggunakan database, kita cek dulu apakah aplikasi kita berjalan atau tidak, username dan password sementara kita hard-coded di dalam file main.py terlebih dahulu</p>\\\"}, {\\\"type\\\": \\\"full_image\\\", \\\"value\\\": 26}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Success, sekarang tinggal integrasikan SQAlchemy dengan Kivy, pertama kita buat dulu models database kita, jalankan script ini sekali untuk membuat databasenya.</p>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"models.py\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"from sqlalchemy.ext.declarative import declarative_base\\\\r\\\\nfrom sqlalchemy import Column, String\\\\r\\\\nfrom sqlalchemy import create_engine\\\\r\\\\n\\\\r\\\\nBase = declarative_base()\\\\r\\\\n\\\\r\\\\nclass User(Base):\\\\r\\\\n    __tablename__ = 'users'\\\\r\\\\n\\\\r\\\\n    username = Column(String(20), nullable=False, primary_key=True)\\\\r\\\\n    password = Column(String(20), nullable=False)\\\\r\\\\n\\\\r\\\\n\\\\r\\\\nengine = create_engine('sqlite:///latihan.db')\\\\r\\\\nBase.metadata.create_all(engine)\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p><br/></p><p>tambah record dengan menggunakan Python shell atau dengan menggunakan script berikut</p>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"tambahrecord.py\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"from sqlalchemy import create_engine\\\\r\\\\nfrom sqlalchemy.orm import sessionmaker\\\\r\\\\nfrom models import User\\\\r\\\\n\\\\r\\\\nengine = create_engine('sqlite:///latihan.db')\\\\r\\\\nDBSession = sessionmaker()\\\\r\\\\nDBSession.configure(bind=engine)\\\\r\\\\nsession = DBSession()\\\\r\\\\n\\\\r\\\\nnew_user = User(username='python', password='is_fun')\\\\r\\\\nsession.add(new_user)\\\\r\\\\nsession.commit()\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p><br/></p><p>Selanjutnya kita integrasikan SQLAlchemy ke main.py</p>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"main.py\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"from kivy.app import App\\\\r\\\\nfrom kivy.uix.widget import Widget\\\\r\\\\nfrom kivy.core.window import Window\\\\r\\\\n\\\\r\\\\nfrom sqlalchemy import create_engine\\\\r\\\\nfrom sqlalchemy.orm import sessionmaker\\\\r\\\\nfrom models import User\\\\r\\\\n\\\\r\\\\nengine = create_engine('sqlite:///latihan.db')\\\\r\\\\nDBSession = sessionmaker()\\\\r\\\\nDBSession.configure(bind=engine)\\\\r\\\\nsession = DBSession()\\\\r\\\\n# kita letakkan statements membuat session disini\\\\r\\\\n# supaya session selalu dibuat saat aplikasi di run\\\\r\\\\n\\\\r\\\\nclass LoginWindow(Widget):\\\\r\\\\n    def login(self, *args):\\\\r\\\\n        username_input = self.ids.username_input\\\\r\\\\n        username_text = username_input.text\\\\r\\\\n        password_input = self.ids.password_input\\\\r\\\\n        password_text = password_input.text\\\\r\\\\n\\\\r\\\\n        # lakukan query untuk mendapatkan objek/record yang memiliki\\\\r\\\\n        # username sesuai dengan input. Karena hasil query selalu berbentuk\\\\r\\\\n        # list maka kita harus iterasi\\\\r\\\\n        for a in session.query(User).filter(User.username == username_text):\\\\r\\\\n            if a.password != password_text:\\\\r\\\\n                return\\\\r\\\\n            label = self.ids.success\\\\r\\\\n            label.text = \\\\\\\"Success\\\\\\\"\\\\r\\\\n\\\\r\\\\nclass LatihanApp(App):\\\\r\\\\n    def build(self):\\\\r\\\\n        return LoginWindow()\\\\r\\\\n\\\\r\\\\n\\\\r\\\\nif __name__ == '__main__':\\\\r\\\\n    LatihanApp().run()\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Setelah di-run</p>\\\"}, {\\\"type\\\": \\\"full_image\\\", \\\"value\\\": 27}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Label berubah menjadi success! Pada tutorial selanjutnya saya akan mencoba package aplikasi ini untuk Android dan Linux.</p>\\\"}]\", \"live\": true, \"thumbnail_image\": 25, \"has_unpublished_changes\": false, \"related_post\": \"[{\\\"type\\\": \\\"post\\\", \\\"value\\\": 8}, {\\\"type\\\": \\\"post\\\", \\\"value\\\": 10}, {\\\"type\\\": \\\"post\\\", \\\"value\\\": 11}]\", \"main_img_disc\": \"\", \"angular_url\": \"kivy-tutorial-4---database-support\", \"title_extended\": \"\", \"numchild\": 0, \"content_type\": 34, \"show_in_menus\": false, \"date\": \"2015-04-08\", \"path\": \"0001000100010008\", \"url_path\": \"/home/blog/kivy-tutorial-4---database-support/\", \"expired\": false, \"pk\": 13, \"categories\": \"[{\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Kivy\\\"}, {\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Python\\\"}]\", \"main_image\": 24, \"locked\": false, \"author\": \"Abirafdi Raditya Putra\", \"depth\": 4, \"first_published_at\": \"2015-08-14T04:05:14.619Z\", \"expire_at\": null}", "user": 1, "page": 13}, "model": "wagtailcore.pagerevision", "pk": 94}, {"fields": {"approved_go_live_at": null, "created_at": "2015-08-14T04:29:03.857Z", "submitted_for_moderation": false, "content_json": "{\"search_description\": \"\", \"owner\": 1, \"intro\": \"<p>Pada tutorial ini kita akan membuat form login sederhana menggunakan database yang cross-platform, berjalan di Windows, Android, OS X, dan iOS dengan code yang sama.</p>\", \"latest_revision_created_at\": \"2015-08-14T04:22:28.506Z\", \"main_background_image\": null, \"go_live_at\": null, \"title\": \"Kivy Tutorial 4 - Database Support\", \"seo_title\": \"\", \"slug\": \"kivy-tutorial-4---database-support\", \"content\": \"[{\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Requirements :</p><p></p><ul><li>- dasar-dasar\\\\u00a0<a href=\\\\\\\"http://www.pythonified.com/blog/kivy-tutorial-3-where-to-start/\\\\\\\">kivy</a></li><li>- dasar\\\\u00a0<a href=\\\\\\\"http://www.pythonified.com/blog/perkenalan-orm-dan-sqlalchemy/\\\\\\\">ORM</a>\\\\u00a0dan\\\\u00a0<a href=\\\\\\\"http://www.pythonified.com/blog/perkenalan-orm-dan-sqlalchemy/\\\\\\\">SQLAlchemy</a>.\\\\u00a0</li></ul><p></p><p><br/></p><p>Pada tutorial ini kita akan membuat form login sederhana menggunakan database yang cross-platform, berjalan di Windows, Android, OS X, dan iOS dengan code yang sama, salah satu pilihan agar database bisa berjalan di semua platform adalah menggunakan database yang bersifat file-based, yaitu SQLite. Tentunya SQLite memiliki beberapa kelemahan yaitu:<br/></p><p></p><ol><li>Melakukan migrasi sedikit lebih rumit karena SQLite tidak support seperti menambah dan menghapus kolom, rename kolom dan juga mengganti constraint kolom. Solusinya pada saat migrasi ialah membuat table baru dan pindahkan semua data ke table yang baru. Bagi kalian yang belum tau migrasi, di tutorial berikutnya saya akan coba menjelaskan apa itu migrasi dan memberikan contohnya menggunakan Alembic.</li><li>Tentunya SQLite tidak cocok untuk aplikasi dengan skala besar.</li></ol><p>\\\\u00a0\\\\u00a0</p><p></p><p>Pertama kita buat dulu layout login kita dengan menggunakan .kv. Jangan lupa nama file kv harus sama dengan nama app kita tetapi menggunakan lowercase-letters.</p>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"latihan.kv\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"#: kivy 1.9.0\\\\r\\\\n\\\\r\\\\n<LoginWindow>:\\\\r\\\\n    canvas.before:\\\\r\\\\n        Color:\\\\r\\\\n            rgba: (1,1,1,1)\\\\r\\\\n        Rectangle:\\\\r\\\\n            pos: self.pos\\\\r\\\\n            size: self.size\\\\r\\\\n    Label:\\\\r\\\\n        text: \\\\\\\"Login\\\\\\\"\\\\r\\\\n        color: (0,0,0,1)\\\\r\\\\n        font_size: 60\\\\r\\\\n        center_x: root.width * 0.5\\\\r\\\\n        center_y: root.top * 0.8\\\\r\\\\n    Label:\\\\r\\\\n        id: username_label\\\\r\\\\n        text: \\\\\\\"Username\\\\\\\"\\\\r\\\\n        color: (0,0,0,1)\\\\r\\\\n        font_size: 30\\\\r\\\\n        right: username_input.x - 60\\\\r\\\\n        center_y: root.top * 0.6\\\\r\\\\n    TextInput:\\\\r\\\\n        id: username_input\\\\r\\\\n        font_size: 20\\\\r\\\\n        center_x: root.width * 0.5\\\\r\\\\n        center_y: root.top * 0.6\\\\r\\\\n        height: 35\\\\r\\\\n        width: 300\\\\r\\\\n    Label:\\\\r\\\\n        id: password_label\\\\r\\\\n        text: \\\\\\\"Password\\\\\\\"\\\\r\\\\n        color: (0,0,0,1)\\\\r\\\\n        font_size: 30\\\\r\\\\n        right: password_input.x - 60\\\\r\\\\n        center_y: root.top * 0.5\\\\r\\\\n    TextInput:\\\\r\\\\n        id: password_input\\\\r\\\\n        font_size: 20\\\\r\\\\n        password: True\\\\r\\\\n        center_x: root.width * 0.5\\\\r\\\\n        center_y: root.top * 0.5\\\\r\\\\n        height: 35\\\\r\\\\n        width: 300\\\\r\\\\n    Button:\\\\r\\\\n        id: login_button\\\\r\\\\n        font_size: 20\\\\r\\\\n        center_x: root.width * 0.5\\\\r\\\\n        center_y: password_input.y - 100\\\\r\\\\n        text: \\\\\\\"login\\\\\\\"\\\\r\\\\n        size: (150,100)\\\\r\\\\n        on_press: root.login()\\\\r\\\\n    Label:\\\\r\\\\n        id: success\\\\r\\\\n        pos: (100,100)\\\\r\\\\n        color: (0,0,0,1)\\\\r\\\\n        text: \\\\\\\"fail\\\\\\\"\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"main.py\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"from kivy.app import App\\\\r\\\\nfrom kivy.uix.widget import Widget\\\\r\\\\n\\\\r\\\\nclass LoginWindow(Widget):\\\\r\\\\n    def login(self, *args):\\\\r\\\\n        username = self.ids.username_input\\\\r\\\\n        username_text = username.text\\\\r\\\\n        password = self.ids.password_input\\\\r\\\\n        password_text = password.text\\\\r\\\\n        if username_text == \\\\\\\"test\\\\\\\" and password_text == \\\\\\\"test\\\\\\\":\\\\r\\\\n            label = self.ids.success\\\\r\\\\n            label.text = \\\\\\\"Success\\\\\\\"\\\\r\\\\n\\\\r\\\\nclass LatihanApp(App):\\\\r\\\\n    def build(self):\\\\r\\\\n        return LoginWindow()\\\\r\\\\n\\\\r\\\\n\\\\r\\\\nif __name__ == '__main__':\\\\r\\\\n    LatihanApp().run()\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Sebelum menggunakan database, kita cek dulu apakah aplikasi kita berjalan atau tidak, username dan password sementara kita hard-coded di dalam file main.py terlebih dahulu</p>\\\"}, {\\\"type\\\": \\\"full_image\\\", \\\"value\\\": 26}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Success, sekarang tinggal integrasikan SQAlchemy dengan Kivy, pertama kita buat dulu models database kita, jalankan script ini sekali untuk membuat databasenya.</p>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"models.py\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"from sqlalchemy.ext.declarative import declarative_base\\\\r\\\\nfrom sqlalchemy import Column, String\\\\r\\\\nfrom sqlalchemy import create_engine\\\\r\\\\n\\\\r\\\\nBase = declarative_base()\\\\r\\\\n\\\\r\\\\nclass User(Base):\\\\r\\\\n    __tablename__ = 'users'\\\\r\\\\n\\\\r\\\\n    username = Column(String(20), nullable=False, primary_key=True)\\\\r\\\\n    password = Column(String(20), nullable=False)\\\\r\\\\n\\\\r\\\\n\\\\r\\\\nengine = create_engine('sqlite:///latihan.db')\\\\r\\\\nBase.metadata.create_all(engine)\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p><br/></p><p>tambah record dengan menggunakan Python shell atau dengan menggunakan script berikut</p>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"tambahrecord.py\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"from sqlalchemy import create_engine\\\\r\\\\nfrom sqlalchemy.orm import sessionmaker\\\\r\\\\nfrom models import User\\\\r\\\\n\\\\r\\\\nengine = create_engine('sqlite:///latihan.db')\\\\r\\\\nDBSession = sessionmaker()\\\\r\\\\nDBSession.configure(bind=engine)\\\\r\\\\nsession = DBSession()\\\\r\\\\n\\\\r\\\\nnew_user = User(username='python', password='is_fun')\\\\r\\\\nsession.add(new_user)\\\\r\\\\nsession.commit()\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p><br/></p><p>Selanjutnya kita integrasikan SQLAlchemy ke main.py</p>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"main.py\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"from kivy.app import App\\\\r\\\\nfrom kivy.uix.widget import Widget\\\\r\\\\nfrom kivy.core.window import Window\\\\r\\\\n\\\\r\\\\nfrom sqlalchemy import create_engine\\\\r\\\\nfrom sqlalchemy.orm import sessionmaker\\\\r\\\\nfrom models import User\\\\r\\\\n\\\\r\\\\nengine = create_engine('sqlite:///latihan.db')\\\\r\\\\nDBSession = sessionmaker()\\\\r\\\\nDBSession.configure(bind=engine)\\\\r\\\\nsession = DBSession()\\\\r\\\\n# kita letakkan statements membuat session disini\\\\r\\\\n# supaya session selalu dibuat saat aplikasi di run\\\\r\\\\n\\\\r\\\\nclass LoginWindow(Widget):\\\\r\\\\n    def login(self, *args):\\\\r\\\\n        username_input = self.ids.username_input\\\\r\\\\n        username_text = username_input.text\\\\r\\\\n        password_input = self.ids.password_input\\\\r\\\\n        password_text = password_input.text\\\\r\\\\n\\\\r\\\\n        # lakukan query untuk mendapatkan objek/record yang memiliki\\\\r\\\\n        # username sesuai dengan input. Karena hasil query selalu berbentuk\\\\r\\\\n        # list maka kita harus iterasi\\\\r\\\\n        for a in session.query(User).filter(User.username == username_text):\\\\r\\\\n            if a.password != password_text:\\\\r\\\\n                return\\\\r\\\\n            label = self.ids.success\\\\r\\\\n            label.text = \\\\\\\"Success\\\\\\\"\\\\r\\\\n\\\\r\\\\nclass LatihanApp(App):\\\\r\\\\n    def build(self):\\\\r\\\\n        return LoginWindow()\\\\r\\\\n\\\\r\\\\n\\\\r\\\\nif __name__ == '__main__':\\\\r\\\\n    LatihanApp().run()\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Setelah di-run</p>\\\"}, {\\\"type\\\": \\\"full_image\\\", \\\"value\\\": 27}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Label berubah menjadi success! Pada tutorial selanjutnya saya akan mencoba package aplikasi ini untuk Android dan Linux.</p>\\\"}]\", \"live\": true, \"thumbnail_image\": 25, \"has_unpublished_changes\": false, \"related_post\": \"[{\\\"type\\\": \\\"post\\\", \\\"value\\\": 8}, {\\\"type\\\": \\\"post\\\", \\\"value\\\": 10}, {\\\"type\\\": \\\"post\\\", \\\"value\\\": 11}]\", \"main_img_disc\": \"\", \"angular_url\": \"kivy-tutorial-4---database-support\", \"title_extended\": \"\", \"numchild\": 0, \"content_type\": 34, \"show_in_menus\": false, \"date\": \"2015-04-08\", \"path\": \"0001000100010008\", \"url_path\": \"/home/blog/kivy-tutorial-4---database-support/\", \"expired\": false, \"pk\": 13, \"categories\": \"[{\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Kivy\\\"}, {\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Python\\\"}]\", \"main_image\": 24, \"locked\": false, \"author\": \"Abirafdi Raditya Putra\", \"depth\": 4, \"first_published_at\": \"2015-08-14T04:05:14.619Z\", \"expire_at\": null}", "user": 1, "page": 13}, "model": "wagtailcore.pagerevision", "pk": 95}, {"fields": {"approved_go_live_at": null, "created_at": "2015-08-14T05:43:26.734Z", "submitted_for_moderation": false, "content_json": "{\"search_description\": \"\", \"owner\": 1, \"intro\": \"\", \"latest_revision_created_at\": null, \"main_background_image\": null, \"go_live_at\": null, \"title\": \"Kivy Tutorial 5 - Packaging untuk Android\", \"seo_title\": \"\", \"slug\": \"kivy-tutorial-5-packaging-untuk-android\", \"content\": \"[]\", \"live\": false, \"thumbnail_image\": null, \"has_unpublished_changes\": false, \"related_post\": \"[]\", \"main_img_disc\": \"\", \"angular_url\": \"kivy-tutorial-5---packaging-untuk-android\", \"title_extended\": \"\", \"numchild\": 0, \"content_type\": 34, \"show_in_menus\": false, \"date\": \"2015-04-10\", \"path\": \"0001000100010009\", \"url_path\": \"/home/blog/kivy-tutorial-5-packaging-untuk-android/\", \"expired\": false, \"pk\": 14, \"categories\": \"[{\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Kivy\\\"}]\", \"main_image\": null, \"locked\": false, \"author\": \"Abirafdi Raditya Putra\", \"depth\": 4, \"first_published_at\": null, \"expire_at\": null}", "user": 1, "page": 14}, "model": "wagtailcore.pagerevision", "pk": 96}, {"fields": {"approved_go_live_at": null, "created_at": "2015-08-14T05:47:52.748Z", "submitted_for_moderation": false, "content_json": "{\"search_description\": \"\", \"owner\": 1, \"intro\": \"<p>Langkah-langkah untuk menjalankan Kivy di Android</p>\", \"latest_revision_created_at\": \"2015-08-14T05:43:26.734Z\", \"main_background_image\": null, \"go_live_at\": null, \"title\": \"Kivy Tutorial 5 - Packaging untuk Android\", \"seo_title\": \"\", \"slug\": \"kivy-tutorial-5-packaging-untuk-android\", \"content\": \"[{\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Awalnya saya mengikuti instruksi dari Kivy, yaitu dengan menggunakan image Linux untuk virtualbox yang sudah ready untuk packaging, tapi kayanya sudah outdated karena menggunakan ubuntu 10.4, selain itu virtualbox punya bug yang belum di fix dari 2 tahun yang lalu, yaitu USB tidak \\\\u00a0 ter-detect di VM kalau hostnya menggunakan Windows, karena nanti untuk mendapatkan hasil debugging, VM harus connect ke Android kita menggunakan USB.<br/></p><p>\\\\u00a0 \\\\u00a0</p><ol><li>Pertama\\\\u00a0<a href=\\\\\\\"https://my.vmware.com/web/vmware/free#desktop_end_user_computing/vmware_player/7_0\\\\\\\">download</a>\\\\u00a0dan install VMware player free .</li><li><a href=\\\\\\\"http://www.osboxes.org/ubuntu/\\\\\\\">Download</a>\\\\u00a0image ubuntu 14.04 64 bit untuk VMware.</li><li>Buka VMware player, pilih Open a Virtual Machine dan gunakan image yang sudah di download tadi.</li><li>Sebelum di Run, klik kanan Ubuntu 14.04.2 (64bit) &gt;&gt; Settings</li><li>Pada tab hardware, ubah konfigurasi memory, 1GB juga sudah cukup.</li><li>Untuk konfigurasi processor, centang Virtualize intel VT-x/ AMD-V/RVI yang gunanya untuk meningkatkan performa VM.</li><li>Masih pada tab hardware, klik button Add lalu pilih network adapter, gunakan tipe NAT.</li><li>Pindah ke tab Options, lalu pilih shared folders, tambahkan folders yang anda ingin share.</li><li>Jalankan VM.</li><li>Accept jika diminta untuk meng-install vmware-tools.<br/></li><li>Repair vmware-tools dengan mengikuti langkah\\\\u00a0<a href=\\\\\\\"http://kb.vmware.com/selfservice/microsites/search.do?language=en_US&amp;cmd=displayKC&amp;externalId=1022525\\\\\\\">ini</a>. Lalu reboot VM.</li><li>Buka System settings Linux, pilih Software &amp; Updates, pada opsi download from, pilih Other dan pilih Select Best Server, setelah selesai, klik Choose server, close dan biarkan update berjalan.</li></ol><p>\\\\u00a0\\\\u00a0</p><p></p><p>Clean install Ubuntu sudah selesai, sekarang tinggal set-up environment untuk packaging.</p><p>Pertama install pip dengan cara, download<a href=\\\\\\\"https://bootstrap.pypa.io/get-pip.py\\\\\\\">\\\\u00a0</a><a href=\\\\\\\"https://bootstrap.pypa.io/get-pip.py\\\\\\\">get-pip.py</a></p>\\\"}]\", \"live\": false, \"thumbnail_image\": 28, \"has_unpublished_changes\": true, \"related_post\": \"[]\", \"main_img_disc\": \"\", \"angular_url\": \"kivy-tutorial-5---packaging-untuk-android\", \"title_extended\": \"\", \"numchild\": 0, \"content_type\": 34, \"show_in_menus\": false, \"date\": \"2015-04-10\", \"path\": \"0001000100010009\", \"url_path\": \"/home/blog/kivy-tutorial-5-packaging-untuk-android/\", \"expired\": false, \"pk\": 14, \"categories\": \"[{\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Kivy\\\"}, {\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Python\\\"}]\", \"main_image\": 28, \"locked\": false, \"author\": \"Abirafdi Raditya Putra\", \"depth\": 4, \"first_published_at\": null, \"expire_at\": null}", "user": 1, "page": 14}, "model": "wagtailcore.pagerevision", "pk": 97}, {"fields": {"approved_go_live_at": null, "created_at": "2015-08-14T05:48:08.232Z", "submitted_for_moderation": false, "content_json": "{\"search_description\": \"\", \"owner\": 1, \"intro\": \"<p>Langkah-langkah untuk menjalankan Kivy di Android</p>\", \"latest_revision_created_at\": \"2015-08-14T05:47:52.748Z\", \"main_background_image\": null, \"go_live_at\": null, \"title\": \"Kivy Tutorial 5 - Packaging untuk Android\", \"seo_title\": \"\", \"slug\": \"kivy-tutorial-5---packaging-untuk-android\", \"content\": \"[{\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Awalnya saya mengikuti instruksi dari Kivy, yaitu dengan menggunakan image Linux untuk virtualbox yang sudah ready untuk packaging, tapi kayanya sudah outdated karena menggunakan ubuntu 10.4, selain itu virtualbox punya bug yang belum di fix dari 2 tahun yang lalu, yaitu USB tidak \\\\u00a0 ter-detect di VM kalau hostnya menggunakan Windows, karena nanti untuk mendapatkan hasil debugging, VM harus connect ke Android kita menggunakan USB.<br/></p><p>\\\\u00a0 \\\\u00a0</p><ol><li>Pertama\\\\u00a0<a href=\\\\\\\"https://my.vmware.com/web/vmware/free#desktop_end_user_computing/vmware_player/7_0\\\\\\\">download</a>\\\\u00a0dan install VMware player free .</li><li><a href=\\\\\\\"http://www.osboxes.org/ubuntu/\\\\\\\">Download</a>\\\\u00a0image ubuntu 14.04 64 bit untuk VMware.</li><li>Buka VMware player, pilih Open a Virtual Machine dan gunakan image yang sudah di download tadi.</li><li>Sebelum di Run, klik kanan Ubuntu 14.04.2 (64bit) &gt;&gt; Settings</li><li>Pada tab hardware, ubah konfigurasi memory, 1GB juga sudah cukup.</li><li>Untuk konfigurasi processor, centang Virtualize intel VT-x/ AMD-V/RVI yang gunanya untuk meningkatkan performa VM.</li><li>Masih pada tab hardware, klik button Add lalu pilih network adapter, gunakan tipe NAT.</li><li>Pindah ke tab Options, lalu pilih shared folders, tambahkan folders yang anda ingin share.</li><li>Jalankan VM.</li><li>Accept jika diminta untuk meng-install vmware-tools.<br/></li><li>Repair vmware-tools dengan mengikuti langkah\\\\u00a0<a href=\\\\\\\"http://kb.vmware.com/selfservice/microsites/search.do?language=en_US&amp;cmd=displayKC&amp;externalId=1022525\\\\\\\">ini</a>. Lalu reboot VM.</li><li>Buka System settings Linux, pilih Software &amp; Updates, pada opsi download from, pilih Other dan pilih Select Best Server, setelah selesai, klik Choose server, close dan biarkan update berjalan.</li></ol><p>\\\\u00a0\\\\u00a0</p><p></p><p>Clean install Ubuntu sudah selesai, sekarang tinggal set-up environment untuk packaging.</p><p>Pertama install pip dengan cara, download<a href=\\\\\\\"https://bootstrap.pypa.io/get-pip.py\\\\\\\">\\\\u00a0</a><a href=\\\\\\\"https://bootstrap.pypa.io/get-pip.py\\\\\\\">get-pip.py</a></p>\\\"}]\", \"live\": true, \"thumbnail_image\": 28, \"has_unpublished_changes\": false, \"related_post\": \"[]\", \"main_img_disc\": \"\", \"angular_url\": \"kivy-tutorial-5---packaging-untuk-android\", \"title_extended\": \"\", \"numchild\": 0, \"content_type\": 34, \"show_in_menus\": false, \"date\": \"2015-04-10\", \"path\": \"0001000100010009\", \"url_path\": \"/home/blog/kivy-tutorial-5-packaging-untuk-android/\", \"expired\": false, \"pk\": 14, \"categories\": \"[{\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Kivy\\\"}, {\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Python\\\"}]\", \"main_image\": 28, \"locked\": false, \"author\": \"Abirafdi Raditya Putra\", \"depth\": 4, \"first_published_at\": \"2015-08-14T05:47:52.758Z\", \"expire_at\": null}", "user": 1, "page": 14}, "model": "wagtailcore.pagerevision", "pk": 98}, {"fields": {"approved_go_live_at": null, "created_at": "2015-08-14T05:48:52.717Z", "submitted_for_moderation": false, "content_json": "{\"search_description\": \"\", \"owner\": 1, \"intro\": \"<p>Langkah-langkah untuk menjalankan Kivy di Android</p>\", \"latest_revision_created_at\": \"2015-08-14T05:48:08.232Z\", \"main_background_image\": null, \"go_live_at\": null, \"title\": \"Kivy Tutorial 5 - Packaging untuk Android\", \"seo_title\": \"\", \"slug\": \"kivy-tutorial-5---packaging-untuk-android\", \"content\": \"[{\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Awalnya saya mengikuti instruksi dari Kivy, yaitu dengan menggunakan image Linux untuk virtualbox yang sudah ready untuk packaging, tapi sepertinya sudah outdated karena menggunakan ubuntu 10.4, selain itu virtualbox punya bug yang belum di fix dari 2 tahun yang lalu, yaitu USB tidak \\\\u00a0 ter-detect di VM kalau hostnya menggunakan Windows, karena nanti untuk mendapatkan hasil debugging, VM harus connect ke Android kita menggunakan USB.<br/></p><p>\\\\u00a0 \\\\u00a0</p><ol><li>Pertama\\\\u00a0<a href=\\\\\\\"https://my.vmware.com/web/vmware/free#desktop_end_user_computing/vmware_player/7_0\\\\\\\">download</a>\\\\u00a0dan install VMware player free .</li><li><a href=\\\\\\\"http://www.osboxes.org/ubuntu/\\\\\\\">Download</a>\\\\u00a0image ubuntu 14.04 64 bit untuk VMware.</li><li>Buka VMware player, pilih Open a Virtual Machine dan gunakan image yang sudah di download tadi.</li><li>Sebelum di Run, klik kanan Ubuntu 14.04.2 (64bit) &gt;&gt; Settings</li><li>Pada tab hardware, ubah konfigurasi memory, 1GB juga sudah cukup.</li><li>Untuk konfigurasi processor, centang Virtualize intel VT-x/ AMD-V/RVI yang gunanya untuk meningkatkan performa VM.</li><li>Masih pada tab hardware, klik button Add lalu pilih network adapter, gunakan tipe NAT.</li><li>Pindah ke tab Options, lalu pilih shared folders, tambahkan folders yang anda ingin share.</li><li>Jalankan VM.</li><li>Accept jika diminta untuk meng-install vmware-tools.<br/></li><li>Repair vmware-tools dengan mengikuti langkah\\\\u00a0<a href=\\\\\\\"http://kb.vmware.com/selfservice/microsites/search.do?language=en_US&amp;cmd=displayKC&amp;externalId=1022525\\\\\\\">ini</a>. Lalu reboot VM.</li><li>Buka System settings Linux, pilih Software &amp; Updates, pada opsi download from, pilih Other dan pilih Select Best Server, setelah selesai, klik Choose server, close dan biarkan update berjalan.</li></ol><p>\\\\u00a0\\\\u00a0</p><p></p><p>Clean install Ubuntu sudah selesai, sekarang tinggal set-up environment untuk packaging.</p><p>Pertama install pip dengan cara, download<a href=\\\\\\\"https://bootstrap.pypa.io/get-pip.py\\\\\\\">\\\\u00a0</a><a href=\\\\\\\"https://bootstrap.pypa.io/get-pip.py\\\\\\\">get-pip.py</a></p>\\\"}]\", \"live\": true, \"thumbnail_image\": 28, \"has_unpublished_changes\": false, \"related_post\": \"[]\", \"main_img_disc\": \"\", \"angular_url\": \"kivy-tutorial-5---packaging-untuk-android\", \"title_extended\": \"\", \"numchild\": 0, \"content_type\": 34, \"show_in_menus\": false, \"date\": \"2015-04-10\", \"path\": \"0001000100010009\", \"url_path\": \"/home/blog/kivy-tutorial-5---packaging-untuk-android/\", \"expired\": false, \"pk\": 14, \"categories\": \"[{\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Kivy\\\"}, {\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Python\\\"}]\", \"main_image\": 28, \"locked\": false, \"author\": \"Abirafdi Raditya Putra\", \"depth\": 4, \"first_published_at\": \"2015-08-14T05:47:52.758Z\", \"expire_at\": null}", "user": 1, "page": 14}, "model": "wagtailcore.pagerevision", "pk": 99}, {"fields": {"approved_go_live_at": null, "created_at": "2015-08-14T05:49:14.228Z", "submitted_for_moderation": false, "content_json": "{\"search_description\": \"\", \"owner\": 1, \"intro\": \"<p>Langkah-langkah untuk menjalankan Kivy di Android</p>\", \"latest_revision_created_at\": \"2015-08-14T05:48:52.717Z\", \"main_background_image\": null, \"go_live_at\": null, \"title\": \"Kivy Tutorial 5 - Packaging untuk Android\", \"seo_title\": \"\", \"slug\": \"kivy-tutorial-5---packaging-untuk-android\", \"content\": \"[{\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Awalnya saya mengikuti instruksi dari Kivy, yaitu dengan menggunakan image Linux untuk virtualbox yang sudah ready untuk packaging, tapi sepertinya sudah outdated karena masih menggunakan ubuntu 10.4, selain itu virtualbox punya bug yang belum di fix dari 2 tahun yang lalu, yaitu USB tidak mau ter-detect di VM kalau hostnya menggunakan Windows, karena nanti untuk mendapatkan hasil debugging, VM harus connect ke Android kita menggunakan USB.<br/></p><p>\\\\u00a0 \\\\u00a0</p><ol><li>Pertama\\\\u00a0<a href=\\\\\\\"https://my.vmware.com/web/vmware/free#desktop_end_user_computing/vmware_player/7_0\\\\\\\">download</a>\\\\u00a0dan install VMware player free .</li><li><a href=\\\\\\\"http://www.osboxes.org/ubuntu/\\\\\\\">Download</a>\\\\u00a0image ubuntu 14.04 64 bit untuk VMware.</li><li>Buka VMware player, pilih Open a Virtual Machine dan gunakan image yang sudah di download tadi.</li><li>Sebelum di Run, klik kanan Ubuntu 14.04.2 (64bit) &gt;&gt; Settings</li><li>Pada tab hardware, ubah konfigurasi memory, 1GB juga sudah cukup.</li><li>Untuk konfigurasi processor, centang Virtualize intel VT-x/ AMD-V/RVI yang gunanya untuk meningkatkan performa VM.</li><li>Masih pada tab hardware, klik button Add lalu pilih network adapter, gunakan tipe NAT.</li><li>Pindah ke tab Options, lalu pilih shared folders, tambahkan folders yang anda ingin share.</li><li>Jalankan VM.</li><li>Accept jika diminta untuk meng-install vmware-tools.<br/></li><li>Repair vmware-tools dengan mengikuti langkah\\\\u00a0<a href=\\\\\\\"http://kb.vmware.com/selfservice/microsites/search.do?language=en_US&amp;cmd=displayKC&amp;externalId=1022525\\\\\\\">ini</a>. Lalu reboot VM.</li><li>Buka System settings Linux, pilih Software &amp; Updates, pada opsi download from, pilih Other dan pilih Select Best Server, setelah selesai, klik Choose server, close dan biarkan update berjalan.</li></ol><p>\\\\u00a0\\\\u00a0</p><p></p><p>Clean install Ubuntu sudah selesai, sekarang tinggal set-up environment untuk packaging.</p><p>Pertama install pip dengan cara, download<a href=\\\\\\\"https://bootstrap.pypa.io/get-pip.py\\\\\\\">\\\\u00a0</a><a href=\\\\\\\"https://bootstrap.pypa.io/get-pip.py\\\\\\\">get-pip.py</a></p>\\\"}]\", \"live\": true, \"thumbnail_image\": 28, \"has_unpublished_changes\": false, \"related_post\": \"[]\", \"main_img_disc\": \"\", \"angular_url\": \"kivy-tutorial-5---packaging-untuk-android\", \"title_extended\": \"\", \"numchild\": 0, \"content_type\": 34, \"show_in_menus\": false, \"date\": \"2015-04-10\", \"path\": \"0001000100010009\", \"url_path\": \"/home/blog/kivy-tutorial-5---packaging-untuk-android/\", \"expired\": false, \"pk\": 14, \"categories\": \"[{\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Kivy\\\"}, {\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Python\\\"}]\", \"main_image\": 28, \"locked\": false, \"author\": \"Abirafdi Raditya Putra\", \"depth\": 4, \"first_published_at\": \"2015-08-14T05:47:52.758Z\", \"expire_at\": null}", "user": 1, "page": 14}, "model": "wagtailcore.pagerevision", "pk": 100}, {"fields": {"approved_go_live_at": null, "created_at": "2015-08-14T05:55:44.590Z", "submitted_for_moderation": false, "content_json": "{\"search_description\": \"\", \"owner\": 1, \"intro\": \"<p>Langkah-langkah untuk menjalankan Kivy di Android</p>\", \"latest_revision_created_at\": \"2015-08-14T05:49:14.228Z\", \"main_background_image\": null, \"go_live_at\": null, \"title\": \"Kivy Tutorial 5 - Packaging untuk Android\", \"seo_title\": \"\", \"slug\": \"kivy-tutorial-5---packaging-untuk-android\", \"content\": \"[{\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Awalnya saya mengikuti instruksi dari Kivy, yaitu dengan menggunakan image Linux untuk virtualbox yang sudah ready untuk packaging, tapi sepertinya sudah outdated karena masih menggunakan ubuntu 10.4, selain itu virtualbox punya bug yang belum di fix dari 2 tahun yang lalu, yaitu USB tidak mau ter-detect di VM kalau hostnya menggunakan Windows, karena nanti untuk mendapatkan hasil debugging, VM harus connect ke Android kita menggunakan USB.<br/></p><p>\\\\u00a0 \\\\u00a0</p><ol><li>Pertama\\\\u00a0<a href=\\\\\\\"https://my.vmware.com/web/vmware/free#desktop_end_user_computing/vmware_player/7_0\\\\\\\">download</a>\\\\u00a0dan install VMware player free .</li><li><a href=\\\\\\\"http://www.osboxes.org/ubuntu/\\\\\\\">Download</a>\\\\u00a0image ubuntu 14.04 64 bit untuk VMware.</li><li>Buka VMware player, pilih Open a Virtual Machine dan gunakan image yang sudah di download tadi.</li><li>Sebelum di Run, klik kanan Ubuntu 14.04.2 (64bit) &gt;&gt; Settings</li><li>Pada tab hardware, ubah konfigurasi memory, 1GB juga sudah cukup.</li><li>Untuk konfigurasi processor, centang Virtualize intel VT-x/ AMD-V/RVI yang gunanya untuk meningkatkan performa VM.</li><li>Masih pada tab hardware, klik button Add lalu pilih network adapter, gunakan tipe NAT.</li><li>Pindah ke tab Options, lalu pilih shared folders, tambahkan folders yang anda ingin share.</li><li>Jalankan VM.</li><li>Accept jika diminta untuk meng-install vmware-tools.<br/></li><li>Repair vmware-tools dengan mengikuti langkah\\\\u00a0<a href=\\\\\\\"http://kb.vmware.com/selfservice/microsites/search.do?language=en_US&amp;cmd=displayKC&amp;externalId=1022525\\\\\\\">ini</a>. Lalu reboot VM.</li><li>Buka System settings Linux, pilih Software &amp; Updates, pada opsi download from, pilih Other dan pilih Select Best Server, setelah selesai, klik Choose server, close dan biarkan update berjalan.</li></ol><p>\\\\u00a0\\\\u00a0</p><p></p><p>Clean install Ubuntu sudah selesai, sekarang tinggal set-up environment untuk packaging.</p><p>Pertama install pip dengan cara, download<a href=\\\\\\\"https://bootstrap.pypa.io/get-pip.py\\\\\\\">\\\\u00a0</a><a href=\\\\\\\"https://bootstrap.pypa.io/get-pip.py\\\\\\\">get-pip.py</a>\\\\u00a0lalu jalankan get-pip.py di terminal</p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"sudo python get-pip.py\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>lalu untuk setup environment, jalankan perintah-perintah berikut</p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"sudo get-pip.py\\\\r\\\\nsudo dpkg --add-architecture i386\\\\r\\\\nsudo apt-get update\\\\r\\\\nsudo apt-get install build-essential ccache git python2.7-dev openjdk-7-jdk unzip zlib1g-dev zlib1g:i386 lib32z1 lib32ncurses5 lib32bz2-1.0 lib32stdc++6 cython\\\\r\\\\nsudo pip install cython==0.20.1 virtualenv buildozer\\\\r\\\\nsudo apt-get install open-vm-tools android-tools-adb\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p><br/></p><p>command-command diatas berguna untuk meng-install dependencies yang dibutuhkan untuk packaging. Setelah semua selesai di install, copy project dari OS host anda ke shared folders. Lalu di VM copy project anda ke directory, misal buat folder baru di home dan letakkan folder project anda disitu. Selanjutnya kita install software agar dapat membuka terminal dari current directory dengan klik kanan supaya kita tidak perlu capek-capek cd-cd terus<br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"sudo apt-get install nautilus-open-terminal\\\\r\\\\nsudo killall nautilus && nautilus\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p><br/></p><p>Sekarang buka folder project anda di VM, klik kanan di area kosong, lalu pilih Open in Terminal. Lalu jalankan perintah berikut<br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"buildozer init\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p><br/></p><p>Buka file buildozer.spec dan ubah variabel-variabel berikut.<br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"title = <NamaAplikasi>\\\\r\\\\n\\\\r\\\\npackage.name = <NamaPackageTanpaSpasi>\\\\r\\\\n\\\\r\\\\nsource.include_exts = <tambahkan db supaya file database ikut terkompilasi>\\\\r\\\\n\\\\r\\\\ncomment 2 line berikut\\\\r\\\\n# version.regex = .....\\\\r\\\\n# version.filename = .....\\\\r\\\\n\\\\r\\\\nuncomment version\\\\r\\\\nversion = <contoh, 1.0>\\\\r\\\\n\\\\r\\\\nrequirements = <karena kita menggunakan sqlite dan sqlalchemy, maka tambahkan\\\\r\\\\n                menjadi kivy,sqlalchemy,sqlite3>\\\\r\\\\n\\\\r\\\\norientation = all\\\\r\\\\n\\\\r\\\\nfullscreen = 0\\\\r\\\\n\\\\r\\\\nlog_level = 2\\\"}]\", \"live\": true, \"thumbnail_image\": 28, \"has_unpublished_changes\": false, \"related_post\": \"[]\", \"main_img_disc\": \"\", \"angular_url\": \"kivy-tutorial-5---packaging-untuk-android\", \"title_extended\": \"\", \"numchild\": 0, \"content_type\": 34, \"show_in_menus\": false, \"date\": \"2015-04-10\", \"path\": \"0001000100010009\", \"url_path\": \"/home/blog/kivy-tutorial-5---packaging-untuk-android/\", \"expired\": false, \"pk\": 14, \"categories\": \"[{\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Kivy\\\"}, {\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Python\\\"}]\", \"main_image\": 28, \"locked\": false, \"author\": \"Abirafdi Raditya Putra\", \"depth\": 4, \"first_published_at\": \"2015-08-14T05:47:52.758Z\", \"expire_at\": null}", "user": 1, "page": 14}, "model": "wagtailcore.pagerevision", "pk": 101}, {"fields": {"approved_go_live_at": null, "created_at": "2015-08-14T05:56:48.235Z", "submitted_for_moderation": false, "content_json": "{\"search_description\": \"\", \"owner\": 1, \"intro\": \"<p>Langkah-langkah untuk menjalankan Kivy di Android</p>\", \"latest_revision_created_at\": \"2015-08-14T05:55:44.590Z\", \"main_background_image\": null, \"go_live_at\": null, \"title\": \"Kivy Tutorial 5 - Packaging untuk Android\", \"seo_title\": \"\", \"slug\": \"kivy-tutorial-5---packaging-untuk-android\", \"content\": \"[{\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Awalnya saya mengikuti instruksi dari Kivy, yaitu dengan menggunakan image Linux untuk virtualbox yang sudah ready untuk packaging, tapi sepertinya sudah outdated karena masih menggunakan ubuntu 10.4, selain itu virtualbox punya bug yang belum di fix dari 2 tahun yang lalu, yaitu USB tidak mau ter-detect di VM kalau hostnya menggunakan Windows, karena nanti untuk mendapatkan hasil debugging, VM harus connect ke Android kita menggunakan USB.<br/></p><p>\\\\u00a0 \\\\u00a0</p><ol><li>Pertama\\\\u00a0<a href=\\\\\\\"https://my.vmware.com/web/vmware/free#desktop_end_user_computing/vmware_player/7_0\\\\\\\">download</a>\\\\u00a0dan install VMware player free .</li><li><a href=\\\\\\\"http://www.osboxes.org/ubuntu/\\\\\\\">Download</a>\\\\u00a0image ubuntu 14.04 64 bit untuk VMware.</li><li>Buka VMware player, pilih Open a Virtual Machine dan gunakan image yang sudah di download tadi.</li><li>Sebelum di Run, klik kanan Ubuntu 14.04.2 (64bit) &gt;&gt; Settings</li><li>Pada tab hardware, ubah konfigurasi memory, 1GB juga sudah cukup.</li><li>Untuk konfigurasi processor, centang Virtualize intel VT-x/ AMD-V/RVI yang gunanya untuk meningkatkan performa VM.</li><li>Masih pada tab hardware, klik button Add lalu pilih network adapter, gunakan tipe NAT.</li><li>Pindah ke tab Options, lalu pilih shared folders, tambahkan folders yang anda ingin share.</li><li>Jalankan VM.</li><li>Accept jika diminta untuk meng-install vmware-tools.<br/></li><li>Repair vmware-tools dengan mengikuti langkah\\\\u00a0<a href=\\\\\\\"http://kb.vmware.com/selfservice/microsites/search.do?language=en_US&amp;cmd=displayKC&amp;externalId=1022525\\\\\\\">ini</a>. Lalu reboot VM.</li><li>Buka System settings Linux, pilih Software &amp; Updates, pada opsi download from, pilih Other dan pilih Select Best Server, setelah selesai, klik Choose server, close dan biarkan update berjalan.</li></ol><p>\\\\u00a0\\\\u00a0</p><p></p><p>Clean install Ubuntu sudah selesai, sekarang tinggal set-up environment untuk packaging.</p><p>Pertama install pip dengan cara, download<a href=\\\\\\\"https://bootstrap.pypa.io/get-pip.py\\\\\\\">\\\\u00a0</a><a href=\\\\\\\"https://bootstrap.pypa.io/get-pip.py\\\\\\\">get-pip.py</a>\\\\u00a0lalu jalankan get-pip.py di terminal</p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"sudo python get-pip.py\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>lalu untuk setup environment, jalankan perintah-perintah berikut</p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"sudo get-pip.py\\\\r\\\\nsudo dpkg --add-architecture i386\\\\r\\\\nsudo apt-get update\\\\r\\\\nsudo apt-get install build-essential ccache git python2.7-dev openjdk-7-jdk unzip zlib1g-dev zlib1g:i386 lib32z1 lib32ncurses5 lib32bz2-1.0 lib32stdc++6 cython\\\\r\\\\nsudo pip install cython==0.20.1 virtualenv buildozer\\\\r\\\\nsudo apt-get install open-vm-tools android-tools-adb\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>command-command diatas berguna untuk meng-install dependencies yang dibutuhkan untuk packaging. Setelah semua selesai di install, copy project dari OS host anda ke shared folders. Lalu di VM copy project anda ke directory, misal buat folder baru di home dan letakkan folder project anda disitu. Selanjutnya kita install software agar dapat membuka terminal dari current directory dengan klik kanan supaya kita tidak perlu capek-capek cd-cd terus<br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"sudo apt-get install nautilus-open-terminal\\\\r\\\\nsudo killall nautilus && nautilus\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p><br/></p><p>Sekarang buka folder project anda di VM, klik kanan di area kosong, lalu pilih Open in Terminal. Lalu jalankan perintah berikut<br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"buildozer init\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p><br/></p><p>Buka file buildozer.spec dan ubah variabel-variabel berikut.<br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"title = <NamaAplikasi>\\\\r\\\\n\\\\r\\\\npackage.name = <NamaPackageTanpaSpasi>\\\\r\\\\n\\\\r\\\\nsource.include_exts = <tambahkan db supaya file database ikut terkompilasi>\\\\r\\\\n\\\\r\\\\ncomment 2 line berikut\\\\r\\\\n# version.regex = .....\\\\r\\\\n# version.filename = .....\\\\r\\\\n\\\\r\\\\nuncomment version\\\\r\\\\nversion = <contoh, 1.0>\\\\r\\\\n\\\\r\\\\nrequirements = <karena kita menggunakan sqlite dan sqlalchemy, maka tambahkan\\\\r\\\\n                menjadi kivy,sqlalchemy,sqlite3>\\\\r\\\\n\\\\r\\\\norientation = all\\\\r\\\\n\\\\r\\\\nfullscreen = 0\\\\r\\\\n\\\\r\\\\nlog_level = 2\\\"}]\", \"live\": true, \"thumbnail_image\": 28, \"has_unpublished_changes\": false, \"related_post\": \"[]\", \"main_img_disc\": \"\", \"angular_url\": \"kivy-tutorial-5---packaging-untuk-android\", \"title_extended\": \"\", \"numchild\": 0, \"content_type\": 34, \"show_in_menus\": false, \"date\": \"2015-04-10\", \"path\": \"0001000100010009\", \"url_path\": \"/home/blog/kivy-tutorial-5---packaging-untuk-android/\", \"expired\": false, \"pk\": 14, \"categories\": \"[{\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Kivy\\\"}, {\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Python\\\"}]\", \"main_image\": 28, \"locked\": false, \"author\": \"Abirafdi Raditya Putra\", \"depth\": 4, \"first_published_at\": \"2015-08-14T05:47:52.758Z\", \"expire_at\": null}", "user": 1, "page": 14}, "model": "wagtailcore.pagerevision", "pk": 102}, {"fields": {"approved_go_live_at": null, "created_at": "2015-08-14T06:14:35.156Z", "submitted_for_moderation": false, "content_json": "{\"search_description\": \"\", \"owner\": 1, \"intro\": \"<p>Langkah-langkah untuk menjalankan Kivy di Android</p>\", \"latest_revision_created_at\": \"2015-08-14T05:56:48.235Z\", \"main_background_image\": null, \"go_live_at\": null, \"title\": \"Kivy Tutorial 5 - Packaging untuk Android\", \"seo_title\": \"\", \"slug\": \"kivy-tutorial-5---packaging-untuk-android\", \"content\": \"[{\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Awalnya saya mengikuti instruksi dari Kivy, yaitu dengan menggunakan image Linux untuk virtualbox yang sudah ready untuk packaging, tapi sepertinya sudah outdated karena masih menggunakan ubuntu 10.4, selain itu virtualbox punya bug yang belum di fix dari 2 tahun yang lalu, yaitu USB tidak mau ter-detect di VM kalau hostnya menggunakan Windows, karena nanti untuk mendapatkan hasil debugging, VM harus connect ke Android kita menggunakan USB.<br/></p><p>\\\\u00a0 \\\\u00a0</p><ol><li>Pertama\\\\u00a0<a href=\\\\\\\"https://my.vmware.com/web/vmware/free#desktop_end_user_computing/vmware_player/7_0\\\\\\\">download</a>\\\\u00a0dan install VMware player free .</li><li><a href=\\\\\\\"http://www.osboxes.org/ubuntu/\\\\\\\">Download</a>\\\\u00a0image ubuntu 14.04 64 bit untuk VMware.</li><li>Buka VMware player, pilih Open a Virtual Machine dan gunakan image yang sudah di download tadi.</li><li>Sebelum di Run, klik kanan Ubuntu 14.04.2 (64bit) &gt;&gt; Settings</li><li>Pada tab hardware, ubah konfigurasi memory, 1GB juga sudah cukup.</li><li>Untuk konfigurasi processor, centang Virtualize intel VT-x/ AMD-V/RVI yang gunanya untuk meningkatkan performa VM.</li><li>Masih pada tab hardware, klik button Add lalu pilih network adapter, gunakan tipe NAT.</li><li>Pindah ke tab Options, lalu pilih shared folders, tambahkan folders yang anda ingin share.</li><li>Jalankan VM.</li><li>Accept jika diminta untuk meng-install vmware-tools.<br/></li><li>Repair vmware-tools dengan mengikuti langkah\\\\u00a0<a href=\\\\\\\"http://kb.vmware.com/selfservice/microsites/search.do?language=en_US&amp;cmd=displayKC&amp;externalId=1022525\\\\\\\">ini</a>. Lalu reboot VM.</li><li>Buka System settings Linux, pilih Software &amp; Updates, pada opsi download from, pilih Other dan pilih Select Best Server, setelah selesai, klik Choose server, close dan biarkan update berjalan.</li></ol><p>\\\\u00a0\\\\u00a0</p><p></p><p>Clean install Ubuntu sudah selesai, sekarang tinggal set-up environment untuk packaging.</p><p>Pertama install pip dengan cara, download<a href=\\\\\\\"https://bootstrap.pypa.io/get-pip.py\\\\\\\">\\\\u00a0</a><a href=\\\\\\\"https://bootstrap.pypa.io/get-pip.py\\\\\\\">get-pip.py</a>\\\\u00a0lalu jalankan get-pip.py di terminal</p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"sudo python get-pip.py\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>lalu untuk setup environment, jalankan perintah-perintah berikut</p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"sudo get-pip.py\\\\r\\\\nsudo dpkg --add-architecture i386\\\\r\\\\nsudo apt-get update\\\\r\\\\nsudo apt-get install build-essential ccache git python2.7-dev openjdk-7-jdk unzip zlib1g-dev zlib1g:i386 lib32z1 lib32ncurses5 lib32bz2-1.0 lib32stdc++6 cython\\\\r\\\\nsudo pip install cython==0.20.1 virtualenv buildozer\\\\r\\\\nsudo apt-get install open-vm-tools android-tools-adb\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>command-command diatas berguna untuk meng-install dependencies yang dibutuhkan untuk packaging. Setelah semua selesai di install, copy project dari OS host anda ke shared folders. Lalu di VM copy project anda ke directory, misal buat folder baru di home dan letakkan folder project anda disitu. Selanjutnya kita install software agar dapat membuka terminal dari current directory dengan klik kanan supaya kita tidak perlu capek-capek cd-cd terus<br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"sudo apt-get install nautilus-open-terminal\\\\r\\\\nsudo killall nautilus && nautilus\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p><br/></p><p>Sekarang buka folder project anda di VM, klik kanan di area kosong, lalu pilih Open in Terminal. Lalu jalankan perintah berikut<br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"buildozer init\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p><br/></p><p>Buka file buildozer.spec dan ubah variabel-variabel berikut.<br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"title = <NamaAplikasi>\\\\r\\\\n\\\\r\\\\npackage.name = <NamaPackageTanpaSpasi>\\\\r\\\\n\\\\r\\\\nsource.include_exts = <tambahkan db supaya file database ikut terkompilasi>\\\\r\\\\n\\\\r\\\\ncomment 2 line berikut\\\\r\\\\n# version.regex = .....\\\\r\\\\n# version.filename = .....\\\\r\\\\n\\\\r\\\\nuncomment version\\\\r\\\\nversion = <contoh, 1.0>\\\\r\\\\n\\\\r\\\\nrequirements = <karena kita menggunakan sqlite dan sqlalchemy, maka tambahkan\\\\r\\\\n                menjadi kivy,sqlalchemy,sqlite3>\\\\r\\\\n\\\\r\\\\norientation = all\\\\r\\\\n\\\\r\\\\nfullscreen = 0\\\\r\\\\n\\\\r\\\\nlog_level = 2\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Aplikasi kita siap untuk di compile, buka Open in Terminal lalu jalankan</p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"buildozer android debug\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Proses kompilasi memang agak lama untuk pertama kali compile, karena dibutuhkan lagi beberapa dependecies yang otomatis akan didownload. Setelah sudah ter-compile, maka akan ada folder bin yang di dalamnya berisi apk kita. Kita bisa gunakan buildozer untuk melihat hasil debug aplikasi kita. Pertama jangan lupa centang opsi enable usb debugging, pada developer options di settings android kalian. Lalu colok android kalian ke usb dan jalankan perintah berikut</p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"buildozer android deploy run logcat\\\"}, {\\\"type\\\": \\\"raw_html\\\", \\\"value\\\": \\\"<p><iframe width=\\\\\\\"700\\\\\\\" height=\\\\\\\"390\\\\\\\" src=\\\\\\\"http://gfycat.com/ifr/AnchoredFamiliarBettong\\\\\\\" style=\\\\\\\"\\\\\\\"></iframe></p>\\\"}]\", \"live\": true, \"thumbnail_image\": 28, \"has_unpublished_changes\": false, \"related_post\": \"[]\", \"main_img_disc\": \"\", \"angular_url\": \"kivy-tutorial-5---packaging-untuk-android\", \"title_extended\": \"\", \"numchild\": 0, \"content_type\": 34, \"show_in_menus\": false, \"date\": \"2015-04-10\", \"path\": \"0001000100010009\", \"url_path\": \"/home/blog/kivy-tutorial-5---packaging-untuk-android/\", \"expired\": false, \"pk\": 14, \"categories\": \"[{\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Kivy\\\"}, {\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Python\\\"}]\", \"main_image\": 28, \"locked\": false, \"author\": \"Abirafdi Raditya Putra\", \"depth\": 4, \"first_published_at\": \"2015-08-14T05:47:52.758Z\", \"expire_at\": null}", "user": 1, "page": 14}, "model": "wagtailcore.pagerevision", "pk": 103}, {"fields": {"approved_go_live_at": null, "created_at": "2015-08-14T06:17:59.065Z", "submitted_for_moderation": false, "content_json": "{\"search_description\": \"\", \"owner\": 1, \"intro\": \"<p>Langkah-langkah untuk menjalankan Kivy di Android</p>\", \"latest_revision_created_at\": \"2015-08-14T06:14:35.156Z\", \"main_background_image\": null, \"go_live_at\": null, \"title\": \"Kivy Tutorial 5 - Packaging untuk Android\", \"seo_title\": \"\", \"slug\": \"kivy-tutorial-5---packaging-untuk-android\", \"content\": \"[{\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Awalnya saya mengikuti instruksi dari Kivy, yaitu dengan menggunakan image Linux untuk virtualbox yang sudah ready untuk packaging, tapi sepertinya sudah outdated karena masih menggunakan ubuntu 10.4, selain itu virtualbox punya bug yang belum di fix dari 2 tahun yang lalu, yaitu USB tidak mau ter-detect di VM kalau hostnya menggunakan Windows, karena nanti untuk mendapatkan hasil debugging, VM harus connect ke Android kita menggunakan USB.<br/></p><p>\\\\u00a0 \\\\u00a0</p><ol><li>Pertama\\\\u00a0<a href=\\\\\\\"https://my.vmware.com/web/vmware/free#desktop_end_user_computing/vmware_player/7_0\\\\\\\">download</a>\\\\u00a0dan install VMware player free .</li><li><a href=\\\\\\\"http://www.osboxes.org/ubuntu/\\\\\\\">Download</a>\\\\u00a0image ubuntu 14.04 64 bit untuk VMware.</li><li>Buka VMware player, pilih Open a Virtual Machine dan gunakan image yang sudah di download tadi.</li><li>Sebelum di Run, klik kanan Ubuntu 14.04.2 (64bit) &gt;&gt; Settings</li><li>Pada tab hardware, ubah konfigurasi memory, 1GB juga sudah cukup.</li><li>Untuk konfigurasi processor, centang Virtualize intel VT-x/ AMD-V/RVI yang gunanya untuk meningkatkan performa VM.</li><li>Masih pada tab hardware, klik button Add lalu pilih network adapter, gunakan tipe NAT.</li><li>Pindah ke tab Options, lalu pilih shared folders, tambahkan folders yang anda ingin share.</li><li>Jalankan VM.</li><li>Accept jika diminta untuk meng-install vmware-tools.<br/></li><li>Repair vmware-tools dengan mengikuti langkah\\\\u00a0<a href=\\\\\\\"http://kb.vmware.com/selfservice/microsites/search.do?language=en_US&amp;cmd=displayKC&amp;externalId=1022525\\\\\\\">ini</a>. Lalu reboot VM.</li><li>Buka System settings Linux, pilih Software &amp; Updates, pada opsi download from, pilih Other dan pilih Select Best Server, setelah selesai, klik Choose server, close dan biarkan update berjalan.</li></ol><p>\\\\u00a0\\\\u00a0</p><p></p><p>Clean install Ubuntu sudah selesai, sekarang tinggal set-up environment untuk packaging.</p><p>Pertama install pip dengan cara, download<a href=\\\\\\\"https://bootstrap.pypa.io/get-pip.py\\\\\\\">\\\\u00a0</a><a href=\\\\\\\"https://bootstrap.pypa.io/get-pip.py\\\\\\\">get-pip.py</a>\\\\u00a0lalu jalankan get-pip.py di terminal</p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"sudo python get-pip.py\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>lalu untuk setup environment, jalankan perintah-perintah berikut</p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"sudo get-pip.py\\\\r\\\\nsudo dpkg --add-architecture i386\\\\r\\\\nsudo apt-get update\\\\r\\\\nsudo apt-get install build-essential ccache git python2.7-dev openjdk-7-jdk unzip zlib1g-dev zlib1g:i386 lib32z1 lib32ncurses5 lib32bz2-1.0 lib32stdc++6 cython\\\\r\\\\nsudo pip install cython==0.20.1 virtualenv buildozer\\\\r\\\\nsudo apt-get install open-vm-tools android-tools-adb\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>command-command diatas berguna untuk meng-install dependencies yang dibutuhkan untuk packaging. Setelah semua selesai di install, copy project dari OS host anda ke shared folders. Lalu di VM copy project anda ke directory, misal buat folder baru di home dan letakkan folder project anda disitu. Selanjutnya kita install software agar dapat membuka terminal dari current directory dengan klik kanan supaya kita tidak perlu capek-capek cd-cd terus<br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"sudo apt-get install nautilus-open-terminal\\\\r\\\\nsudo killall nautilus && nautilus\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p><br/></p><p>Sekarang buka folder project anda di VM, klik kanan di area kosong, lalu pilih Open in Terminal. Lalu jalankan perintah berikut<br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"buildozer init\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p><br/></p><p>Buka file buildozer.spec dan ubah variabel-variabel berikut.<br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"title = <NamaAplikasi>\\\\r\\\\n\\\\r\\\\npackage.name = <NamaPackageTanpaSpasi>\\\\r\\\\n\\\\r\\\\nsource.include_exts = <tambahkan db supaya file database ikut terkompilasi>\\\\r\\\\n\\\\r\\\\ncomment 2 line berikut\\\\r\\\\n# version.regex = .....\\\\r\\\\n# version.filename = .....\\\\r\\\\n\\\\r\\\\nuncomment version\\\\r\\\\nversion = <contoh, 1.0>\\\\r\\\\n\\\\r\\\\nrequirements = <karena kita menggunakan sqlite dan sqlalchemy, maka tambahkan\\\\r\\\\n                menjadi kivy,sqlalchemy,sqlite3>\\\\r\\\\n\\\\r\\\\norientation = all\\\\r\\\\n\\\\r\\\\nfullscreen = 0\\\\r\\\\n\\\\r\\\\nlog_level = 2\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Aplikasi kita siap untuk di compile, buka Open in Terminal lalu jalankan</p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"buildozer android debug\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Proses kompilasi memang agak lama untuk pertama kali compile, karena dibutuhkan lagi beberapa dependecies yang otomatis akan didownload. Setelah sudah ter-compile, maka akan ada folder bin yang di dalamnya berisi apk kita. Kita bisa gunakan buildozer untuk melihat hasil debug aplikasi kita. Pertama jangan lupa centang opsi enable usb debugging, pada developer options di settings android kalian. Lalu colok android kalian ke usb dan jalankan perintah berikut</p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"buildozer android deploy run logcat\\\"}, {\\\"type\\\": \\\"raw_html\\\", \\\"value\\\": \\\"<iframe width=\\\\\\\"700\\\\\\\" height=\\\\\\\"390\\\\\\\" src=\\\\\\\"http://gfycat.com/ifr/AnchoredFamiliarBettong\\\\\\\" style=\\\\\\\"margin-left: auto;margin-right: auto;\\\\\\\"></iframe>\\\\\\\\\\\"}]\", \"live\": true, \"thumbnail_image\": 28, \"has_unpublished_changes\": false, \"related_post\": \"[]\", \"main_img_disc\": \"\", \"angular_url\": \"kivy-tutorial-5---packaging-untuk-android\", \"title_extended\": \"\", \"numchild\": 0, \"content_type\": 34, \"show_in_menus\": false, \"date\": \"2015-04-10\", \"path\": \"0001000100010009\", \"url_path\": \"/home/blog/kivy-tutorial-5---packaging-untuk-android/\", \"expired\": false, \"pk\": 14, \"categories\": \"[{\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Kivy\\\"}, {\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Python\\\"}]\", \"main_image\": 28, \"locked\": false, \"author\": \"Abirafdi Raditya Putra\", \"depth\": 4, \"first_published_at\": \"2015-08-14T05:47:52.758Z\", \"expire_at\": null}", "user": 1, "page": 14}, "model": "wagtailcore.pagerevision", "pk": 104}, {"fields": {"approved_go_live_at": null, "created_at": "2015-08-14T06:18:35.790Z", "submitted_for_moderation": false, "content_json": "{\"search_description\": \"\", \"owner\": 1, \"intro\": \"<p>Langkah-langkah untuk menjalankan Kivy di Android</p>\", \"latest_revision_created_at\": \"2015-08-14T06:17:59.065Z\", \"main_background_image\": null, \"go_live_at\": null, \"title\": \"Kivy Tutorial 5 - Packaging untuk Android\", \"seo_title\": \"\", \"slug\": \"kivy-tutorial-5---packaging-untuk-android\", \"content\": \"[{\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Awalnya saya mengikuti instruksi dari Kivy, yaitu dengan menggunakan image Linux untuk virtualbox yang sudah ready untuk packaging, tapi sepertinya sudah outdated karena masih menggunakan ubuntu 10.4, selain itu virtualbox punya bug yang belum di fix dari 2 tahun yang lalu, yaitu USB tidak mau ter-detect di VM kalau hostnya menggunakan Windows, karena nanti untuk mendapatkan hasil debugging, VM harus connect ke Android kita menggunakan USB.<br/></p><p>\\\\u00a0 \\\\u00a0</p><ol><li>Pertama\\\\u00a0<a href=\\\\\\\"https://my.vmware.com/web/vmware/free#desktop_end_user_computing/vmware_player/7_0\\\\\\\">download</a>\\\\u00a0dan install VMware player free .</li><li><a href=\\\\\\\"http://www.osboxes.org/ubuntu/\\\\\\\">Download</a>\\\\u00a0image ubuntu 14.04 64 bit untuk VMware.</li><li>Buka VMware player, pilih Open a Virtual Machine dan gunakan image yang sudah di download tadi.</li><li>Sebelum di Run, klik kanan Ubuntu 14.04.2 (64bit) &gt;&gt; Settings</li><li>Pada tab hardware, ubah konfigurasi memory, 1GB juga sudah cukup.</li><li>Untuk konfigurasi processor, centang Virtualize intel VT-x/ AMD-V/RVI yang gunanya untuk meningkatkan performa VM.</li><li>Masih pada tab hardware, klik button Add lalu pilih network adapter, gunakan tipe NAT.</li><li>Pindah ke tab Options, lalu pilih shared folders, tambahkan folders yang anda ingin share.</li><li>Jalankan VM.</li><li>Accept jika diminta untuk meng-install vmware-tools.<br/></li><li>Repair vmware-tools dengan mengikuti langkah\\\\u00a0<a href=\\\\\\\"http://kb.vmware.com/selfservice/microsites/search.do?language=en_US&amp;cmd=displayKC&amp;externalId=1022525\\\\\\\">ini</a>. Lalu reboot VM.</li><li>Buka System settings Linux, pilih Software &amp; Updates, pada opsi download from, pilih Other dan pilih Select Best Server, setelah selesai, klik Choose server, close dan biarkan update berjalan.</li></ol><p>\\\\u00a0\\\\u00a0</p><p></p><p>Clean install Ubuntu sudah selesai, sekarang tinggal set-up environment untuk packaging.</p><p>Pertama install pip dengan cara, download<a href=\\\\\\\"https://bootstrap.pypa.io/get-pip.py\\\\\\\">\\\\u00a0</a><a href=\\\\\\\"https://bootstrap.pypa.io/get-pip.py\\\\\\\">get-pip.py</a>\\\\u00a0lalu jalankan get-pip.py di terminal</p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"sudo python get-pip.py\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>lalu untuk setup environment, jalankan perintah-perintah berikut</p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"sudo get-pip.py\\\\r\\\\nsudo dpkg --add-architecture i386\\\\r\\\\nsudo apt-get update\\\\r\\\\nsudo apt-get install build-essential ccache git python2.7-dev openjdk-7-jdk unzip zlib1g-dev zlib1g:i386 lib32z1 lib32ncurses5 lib32bz2-1.0 lib32stdc++6 cython\\\\r\\\\nsudo pip install cython==0.20.1 virtualenv buildozer\\\\r\\\\nsudo apt-get install open-vm-tools android-tools-adb\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>command-command diatas berguna untuk meng-install dependencies yang dibutuhkan untuk packaging. Setelah semua selesai di install, copy project dari OS host anda ke shared folders. Lalu di VM copy project anda ke directory, misal buat folder baru di home dan letakkan folder project anda disitu. Selanjutnya kita install software agar dapat membuka terminal dari current directory dengan klik kanan supaya kita tidak perlu capek-capek cd-cd terus<br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"sudo apt-get install nautilus-open-terminal\\\\r\\\\nsudo killall nautilus && nautilus\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p><br/></p><p>Sekarang buka folder project anda di VM, klik kanan di area kosong, lalu pilih Open in Terminal. Lalu jalankan perintah berikut<br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"buildozer init\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p><br/></p><p>Buka file buildozer.spec dan ubah variabel-variabel berikut.<br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"title = <NamaAplikasi>\\\\r\\\\n\\\\r\\\\npackage.name = <NamaPackageTanpaSpasi>\\\\r\\\\n\\\\r\\\\nsource.include_exts = <tambahkan db supaya file database ikut terkompilasi>\\\\r\\\\n\\\\r\\\\ncomment 2 line berikut\\\\r\\\\n# version.regex = .....\\\\r\\\\n# version.filename = .....\\\\r\\\\n\\\\r\\\\nuncomment version\\\\r\\\\nversion = <contoh, 1.0>\\\\r\\\\n\\\\r\\\\nrequirements = <karena kita menggunakan sqlite dan sqlalchemy, maka tambahkan\\\\r\\\\n                menjadi kivy,sqlalchemy,sqlite3>\\\\r\\\\n\\\\r\\\\norientation = all\\\\r\\\\n\\\\r\\\\nfullscreen = 0\\\\r\\\\n\\\\r\\\\nlog_level = 2\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Aplikasi kita siap untuk di compile, buka Open in Terminal lalu jalankan</p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"buildozer android debug\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Proses kompilasi memang agak lama untuk pertama kali compile, karena dibutuhkan lagi beberapa dependecies yang otomatis akan didownload. Setelah sudah ter-compile, maka akan ada folder bin yang di dalamnya berisi apk kita. Kita bisa gunakan buildozer untuk melihat hasil debug aplikasi kita. Pertama jangan lupa centang opsi enable usb debugging, pada developer options di settings android kalian. Lalu colok android kalian ke usb dan jalankan perintah berikut</p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"buildozer android deploy run logcat\\\"}, {\\\"type\\\": \\\"raw_html\\\", \\\"value\\\": \\\"<iframe width=\\\\\\\"700\\\\\\\" height=\\\\\\\"390\\\\\\\" src=\\\\\\\"http://gfycat.com/ifr/AnchoredFamiliarBettong\\\\\\\" style=\\\\\\\"display: block;margin-left: auto;margin-right: auto;\\\\\\\"></iframe>\\\\\\\\\\\"}]\", \"live\": true, \"thumbnail_image\": 28, \"has_unpublished_changes\": false, \"related_post\": \"[]\", \"main_img_disc\": \"\", \"angular_url\": \"kivy-tutorial-5---packaging-untuk-android\", \"title_extended\": \"\", \"numchild\": 0, \"content_type\": 34, \"show_in_menus\": false, \"date\": \"2015-04-10\", \"path\": \"0001000100010009\", \"url_path\": \"/home/blog/kivy-tutorial-5---packaging-untuk-android/\", \"expired\": false, \"pk\": 14, \"categories\": \"[{\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Kivy\\\"}, {\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Python\\\"}]\", \"main_image\": 28, \"locked\": false, \"author\": \"Abirafdi Raditya Putra\", \"depth\": 4, \"first_published_at\": \"2015-08-14T05:47:52.758Z\", \"expire_at\": null}", "user": 1, "page": 14}, "model": "wagtailcore.pagerevision", "pk": 105}, {"fields": {"approved_go_live_at": null, "created_at": "2015-08-14T06:19:03.015Z", "submitted_for_moderation": false, "content_json": "{\"search_description\": \"\", \"owner\": 1, \"intro\": \"<p>Langkah-langkah untuk menjalankan Kivy di Android</p>\", \"latest_revision_created_at\": \"2015-08-14T06:18:35.790Z\", \"main_background_image\": null, \"go_live_at\": null, \"title\": \"Kivy Tutorial 5 - Packaging untuk Android\", \"seo_title\": \"\", \"slug\": \"kivy-tutorial-5---packaging-untuk-android\", \"content\": \"[{\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Awalnya saya mengikuti instruksi dari Kivy, yaitu dengan menggunakan image Linux untuk virtualbox yang sudah ready untuk packaging, tapi sepertinya sudah outdated karena masih menggunakan ubuntu 10.4, selain itu virtualbox punya bug yang belum di fix dari 2 tahun yang lalu, yaitu USB tidak mau ter-detect di VM kalau hostnya menggunakan Windows, karena nanti untuk mendapatkan hasil debugging, VM harus connect ke Android kita menggunakan USB.<br/></p><p>\\\\u00a0 \\\\u00a0</p><ol><li>Pertama\\\\u00a0<a href=\\\\\\\"https://my.vmware.com/web/vmware/free#desktop_end_user_computing/vmware_player/7_0\\\\\\\">download</a>\\\\u00a0dan install VMware player free .</li><li><a href=\\\\\\\"http://www.osboxes.org/ubuntu/\\\\\\\">Download</a>\\\\u00a0image ubuntu 14.04 64 bit untuk VMware.</li><li>Buka VMware player, pilih Open a Virtual Machine dan gunakan image yang sudah di download tadi.</li><li>Sebelum di Run, klik kanan Ubuntu 14.04.2 (64bit) &gt;&gt; Settings</li><li>Pada tab hardware, ubah konfigurasi memory, 1GB juga sudah cukup.</li><li>Untuk konfigurasi processor, centang Virtualize intel VT-x/ AMD-V/RVI yang gunanya untuk meningkatkan performa VM.</li><li>Masih pada tab hardware, klik button Add lalu pilih network adapter, gunakan tipe NAT.</li><li>Pindah ke tab Options, lalu pilih shared folders, tambahkan folders yang anda ingin share.</li><li>Jalankan VM.</li><li>Accept jika diminta untuk meng-install vmware-tools.<br/></li><li>Repair vmware-tools dengan mengikuti langkah\\\\u00a0<a href=\\\\\\\"http://kb.vmware.com/selfservice/microsites/search.do?language=en_US&amp;cmd=displayKC&amp;externalId=1022525\\\\\\\">ini</a>. Lalu reboot VM.</li><li>Buka System settings Linux, pilih Software &amp; Updates, pada opsi download from, pilih Other dan pilih Select Best Server, setelah selesai, klik Choose server, close dan biarkan update berjalan.</li></ol><p>\\\\u00a0\\\\u00a0</p><p></p><p>Clean install Ubuntu sudah selesai, sekarang tinggal set-up environment untuk packaging.</p><p>Pertama install pip dengan cara, download<a href=\\\\\\\"https://bootstrap.pypa.io/get-pip.py\\\\\\\">\\\\u00a0</a><a href=\\\\\\\"https://bootstrap.pypa.io/get-pip.py\\\\\\\">get-pip.py</a>\\\\u00a0lalu jalankan get-pip.py di terminal</p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"sudo python get-pip.py\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>lalu untuk setup environment, jalankan perintah-perintah berikut</p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"sudo get-pip.py\\\\r\\\\nsudo dpkg --add-architecture i386\\\\r\\\\nsudo apt-get update\\\\r\\\\nsudo apt-get install build-essential ccache git python2.7-dev openjdk-7-jdk unzip zlib1g-dev zlib1g:i386 lib32z1 lib32ncurses5 lib32bz2-1.0 lib32stdc++6 cython\\\\r\\\\nsudo pip install cython==0.20.1 virtualenv buildozer\\\\r\\\\nsudo apt-get install open-vm-tools android-tools-adb\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>command-command diatas berguna untuk meng-install dependencies yang dibutuhkan untuk packaging. Setelah semua selesai di install, copy project dari OS host anda ke shared folders. Lalu di VM copy project anda ke directory, misal buat folder baru di home dan letakkan folder project anda disitu. Selanjutnya kita install software agar dapat membuka terminal dari current directory dengan klik kanan supaya kita tidak perlu capek-capek cd-cd terus<br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"sudo apt-get install nautilus-open-terminal\\\\r\\\\nsudo killall nautilus && nautilus\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p><br/></p><p>Sekarang buka folder project anda di VM, klik kanan di area kosong, lalu pilih Open in Terminal. Lalu jalankan perintah berikut<br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"buildozer init\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p><br/></p><p>Buka file buildozer.spec dan ubah variabel-variabel berikut.<br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"title = <NamaAplikasi>\\\\r\\\\n\\\\r\\\\npackage.name = <NamaPackageTanpaSpasi>\\\\r\\\\n\\\\r\\\\nsource.include_exts = <tambahkan db supaya file database ikut terkompilasi>\\\\r\\\\n\\\\r\\\\ncomment 2 line berikut\\\\r\\\\n# version.regex = .....\\\\r\\\\n# version.filename = .....\\\\r\\\\n\\\\r\\\\nuncomment version\\\\r\\\\nversion = <contoh, 1.0>\\\\r\\\\n\\\\r\\\\nrequirements = <karena kita menggunakan sqlite dan sqlalchemy, maka tambahkan\\\\r\\\\n                menjadi kivy,sqlalchemy,sqlite3>\\\\r\\\\n\\\\r\\\\norientation = all\\\\r\\\\n\\\\r\\\\nfullscreen = 0\\\\r\\\\n\\\\r\\\\nlog_level = 2\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Aplikasi kita siap untuk di compile, buka Open in Terminal lalu jalankan</p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"buildozer android debug\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Proses kompilasi memang agak lama untuk pertama kali compile, karena dibutuhkan lagi beberapa dependecies yang otomatis akan didownload. Setelah sudah ter-compile, maka akan ada folder bin yang di dalamnya berisi apk kita. Kita bisa gunakan buildozer untuk melihat hasil debug aplikasi kita. Pertama jangan lupa centang opsi enable usb debugging, pada developer options di settings android kalian. Lalu colok android kalian ke usb dan jalankan perintah berikut</p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"buildozer android deploy run logcat\\\"}, {\\\"type\\\": \\\"raw_html\\\", \\\"value\\\": \\\"<iframe width=\\\\\\\"680\\\\\\\" height=\\\\\\\"385\\\\\\\" src=\\\\\\\"http://gfycat.com/ifr/AnchoredFamiliarBettong\\\\\\\" style=\\\\\\\"display: block;margin-left: auto;margin-right: auto;\\\\\\\"></iframe>\\\\\\\\\\\"}]\", \"live\": true, \"thumbnail_image\": 28, \"has_unpublished_changes\": false, \"related_post\": \"[]\", \"main_img_disc\": \"\", \"angular_url\": \"kivy-tutorial-5---packaging-untuk-android\", \"title_extended\": \"\", \"numchild\": 0, \"content_type\": 34, \"show_in_menus\": false, \"date\": \"2015-04-10\", \"path\": \"0001000100010009\", \"url_path\": \"/home/blog/kivy-tutorial-5---packaging-untuk-android/\", \"expired\": false, \"pk\": 14, \"categories\": \"[{\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Kivy\\\"}, {\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Python\\\"}]\", \"main_image\": 28, \"locked\": false, \"author\": \"Abirafdi Raditya Putra\", \"depth\": 4, \"first_published_at\": \"2015-08-14T05:47:52.758Z\", \"expire_at\": null}", "user": 1, "page": 14}, "model": "wagtailcore.pagerevision", "pk": 106}, {"fields": {"approved_go_live_at": null, "created_at": "2015-08-14T06:19:37.195Z", "submitted_for_moderation": false, "content_json": "{\"search_description\": \"\", \"owner\": 1, \"intro\": \"<p>Langkah-langkah untuk menjalankan Kivy di Android</p>\", \"latest_revision_created_at\": \"2015-08-14T06:19:03.015Z\", \"main_background_image\": null, \"go_live_at\": null, \"title\": \"Kivy Tutorial 5 - Packaging untuk Android\", \"seo_title\": \"\", \"slug\": \"kivy-tutorial-5---packaging-untuk-android\", \"content\": \"[{\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Awalnya saya mengikuti instruksi dari Kivy, yaitu dengan menggunakan image Linux untuk virtualbox yang sudah ready untuk packaging, tapi sepertinya sudah outdated karena masih menggunakan ubuntu 10.4, selain itu virtualbox punya bug yang belum di fix dari 2 tahun yang lalu, yaitu USB tidak mau ter-detect di VM kalau hostnya menggunakan Windows, karena nanti untuk mendapatkan hasil debugging, VM harus connect ke Android kita menggunakan USB.<br/></p><p>\\\\u00a0 \\\\u00a0</p><ol><li>Pertama\\\\u00a0<a href=\\\\\\\"https://my.vmware.com/web/vmware/free#desktop_end_user_computing/vmware_player/7_0\\\\\\\">download</a>\\\\u00a0dan install VMware player free .</li><li><a href=\\\\\\\"http://www.osboxes.org/ubuntu/\\\\\\\">Download</a>\\\\u00a0image ubuntu 14.04 64 bit untuk VMware.</li><li>Buka VMware player, pilih Open a Virtual Machine dan gunakan image yang sudah di download tadi.</li><li>Sebelum di Run, klik kanan Ubuntu 14.04.2 (64bit) &gt;&gt; Settings</li><li>Pada tab hardware, ubah konfigurasi memory, 1GB juga sudah cukup.</li><li>Untuk konfigurasi processor, centang Virtualize intel VT-x/ AMD-V/RVI yang gunanya untuk meningkatkan performa VM.</li><li>Masih pada tab hardware, klik button Add lalu pilih network adapter, gunakan tipe NAT.</li><li>Pindah ke tab Options, lalu pilih shared folders, tambahkan folders yang anda ingin share.</li><li>Jalankan VM.</li><li>Accept jika diminta untuk meng-install vmware-tools.<br/></li><li>Repair vmware-tools dengan mengikuti langkah\\\\u00a0<a href=\\\\\\\"http://kb.vmware.com/selfservice/microsites/search.do?language=en_US&amp;cmd=displayKC&amp;externalId=1022525\\\\\\\">ini</a>. Lalu reboot VM.</li><li>Buka System settings Linux, pilih Software &amp; Updates, pada opsi download from, pilih Other dan pilih Select Best Server, setelah selesai, klik Choose server, close dan biarkan update berjalan.</li></ol><p>\\\\u00a0\\\\u00a0</p><p></p><p>Clean install Ubuntu sudah selesai, sekarang tinggal set-up environment untuk packaging.</p><p>Pertama install pip dengan cara, download<a href=\\\\\\\"https://bootstrap.pypa.io/get-pip.py\\\\\\\">\\\\u00a0</a><a href=\\\\\\\"https://bootstrap.pypa.io/get-pip.py\\\\\\\">get-pip.py</a>\\\\u00a0lalu jalankan get-pip.py di terminal</p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"sudo python get-pip.py\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>lalu untuk setup environment, jalankan perintah-perintah berikut</p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"sudo get-pip.py\\\\r\\\\nsudo dpkg --add-architecture i386\\\\r\\\\nsudo apt-get update\\\\r\\\\nsudo apt-get install build-essential ccache git python2.7-dev openjdk-7-jdk unzip zlib1g-dev zlib1g:i386 lib32z1 lib32ncurses5 lib32bz2-1.0 lib32stdc++6 cython\\\\r\\\\nsudo pip install cython==0.20.1 virtualenv buildozer\\\\r\\\\nsudo apt-get install open-vm-tools android-tools-adb\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>command-command diatas berguna untuk meng-install dependencies yang dibutuhkan untuk packaging. Setelah semua selesai di install, copy project dari OS host anda ke shared folders. Lalu di VM copy project anda ke directory, misal buat folder baru di home dan letakkan folder project anda disitu. Selanjutnya kita install software agar dapat membuka terminal dari current directory dengan klik kanan supaya kita tidak perlu capek-capek cd-cd terus<br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"sudo apt-get install nautilus-open-terminal\\\\r\\\\nsudo killall nautilus && nautilus\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p><br/></p><p>Sekarang buka folder project anda di VM, klik kanan di area kosong, lalu pilih Open in Terminal. Lalu jalankan perintah berikut<br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"buildozer init\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p><br/></p><p>Buka file buildozer.spec dan ubah variabel-variabel berikut.<br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"title = <NamaAplikasi>\\\\r\\\\n\\\\r\\\\npackage.name = <NamaPackageTanpaSpasi>\\\\r\\\\n\\\\r\\\\nsource.include_exts = <tambahkan db supaya file database ikut terkompilasi>\\\\r\\\\n\\\\r\\\\ncomment 2 line berikut\\\\r\\\\n# version.regex = .....\\\\r\\\\n# version.filename = .....\\\\r\\\\n\\\\r\\\\nuncomment version\\\\r\\\\nversion = <contoh, 1.0>\\\\r\\\\n\\\\r\\\\nrequirements = <karena kita menggunakan sqlite dan sqlalchemy, maka tambahkan\\\\r\\\\n                menjadi kivy,sqlalchemy,sqlite3>\\\\r\\\\n\\\\r\\\\norientation = all\\\\r\\\\n\\\\r\\\\nfullscreen = 0\\\\r\\\\n\\\\r\\\\nlog_level = 2\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Aplikasi kita siap untuk di compile, buka Open in Terminal lalu jalankan</p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"buildozer android debug\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Proses kompilasi memang agak lama untuk pertama kali compile, karena dibutuhkan lagi beberapa dependecies yang otomatis akan didownload. Setelah sudah ter-compile, maka akan ada folder bin yang di dalamnya berisi apk kita. Kita bisa gunakan buildozer untuk melihat hasil debug aplikasi kita. Pertama jangan lupa centang opsi enable usb debugging, pada developer options di settings android kalian. Lalu colok android kalian ke usb dan jalankan perintah berikut</p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"buildozer android deploy run logcat\\\"}, {\\\"type\\\": \\\"raw_html\\\", \\\"value\\\": \\\"<iframe width=\\\\\\\"680\\\\\\\" height=\\\\\\\"385\\\\\\\" src=\\\\\\\"http://gfycat.com/ifr/AnchoredFamiliarBettong\\\\\\\" style=\\\\\\\"display: block;margin-left: auto;margin-right: auto;\\\\\\\"></iframe>\\\\\\\\\\\"}]\", \"live\": true, \"thumbnail_image\": 28, \"has_unpublished_changes\": false, \"related_post\": \"[{\\\"type\\\": \\\"post\\\", \\\"value\\\": 8}]\", \"main_img_disc\": \"\", \"angular_url\": \"kivy-tutorial-5---packaging-untuk-android\", \"title_extended\": \"\", \"numchild\": 0, \"content_type\": 34, \"show_in_menus\": false, \"date\": \"2015-04-10\", \"path\": \"0001000100010009\", \"url_path\": \"/home/blog/kivy-tutorial-5---packaging-untuk-android/\", \"expired\": false, \"pk\": 14, \"categories\": \"[{\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Kivy\\\"}, {\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Python\\\"}]\", \"main_image\": 28, \"locked\": false, \"author\": \"Abirafdi Raditya Putra\", \"depth\": 4, \"first_published_at\": \"2015-08-14T05:47:52.758Z\", \"expire_at\": null}", "user": 1, "page": 14}, "model": "wagtailcore.pagerevision", "pk": 107}, {"fields": {"approved_go_live_at": null, "created_at": "2015-08-14T06:23:41.922Z", "submitted_for_moderation": false, "content_json": "{\"search_description\": \"\", \"owner\": 1, \"intro\": \"<p>Presentasi yang saya buat untuk perkenalan Django</p>\", \"latest_revision_created_at\": null, \"main_background_image\": null, \"go_live_at\": null, \"title\": \"Perkenalan Django\", \"seo_title\": \"\", \"slug\": \"perkenalan-django\", \"content\": \"[{\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Berikut merupakan perkenalan Django yang sudah saya buat sebelumnya untuk sebuah presentasi. Yang dijelaskan pada presentasi ini:</p><ul><li>Membuat website yang sudah memiliki database dan operasi CRUD sederhana menggunakan forms.</li><li>Contoh tampilan admin</li><li>Contoh penambahan aplikasi yang dibuat orang lain</li></ul>\\\"}, {\\\"type\\\": \\\"raw_html\\\", \\\"value\\\": \\\"<iframe width=\\\\\\\"722px\\\\\\\" height=\\\\\\\"565px\\\\\\\" src=\\\\\\\"https://onedrive.live.com/embed?cid=E617AD6493683DF0&amp;resid=E617AD6493683DF0%21126&amp;authkey=AFanKedjAk1CJ3c&amp;em=2&amp;wdAr=1.3333333333333333\\\\\\\"></iframe>\\\"}]\", \"live\": true, \"thumbnail_image\": null, \"has_unpublished_changes\": false, \"related_post\": \"[]\", \"main_img_disc\": \"logo from www.djangoproject.com\", \"angular_url\": \"perkenalan-django\", \"title_extended\": \"\", \"numchild\": 0, \"content_type\": 34, \"show_in_menus\": false, \"date\": \"2015-06-30\", \"path\": \"000100010001000A\", \"url_path\": \"/home/blog/perkenalan-django/\", \"expired\": false, \"pk\": 15, \"categories\": \"[{\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Django\\\"}, {\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Python\\\"}]\", \"main_image\": 29, \"locked\": false, \"author\": \"Abirafdi Raditya Putra\", \"depth\": 4, \"first_published_at\": null, \"expire_at\": null}", "user": 1, "page": 15}, "model": "wagtailcore.pagerevision", "pk": 108}, {"fields": {"approved_go_live_at": null, "created_at": "2015-08-14T06:24:47.401Z", "submitted_for_moderation": false, "content_json": "{\"search_description\": \"\", \"owner\": 1, \"intro\": \"<p>Presentasi yang saya buat untuk perkenalan Django</p>\", \"latest_revision_created_at\": \"2015-08-14T06:23:41.922Z\", \"main_background_image\": null, \"go_live_at\": null, \"title\": \"Perkenalan Django\", \"seo_title\": \"\", \"slug\": \"perkenalan-django\", \"content\": \"[{\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Berikut merupakan perkenalan Django yang sudah saya buat sebelumnya untuk sebuah presentasi. Yang dijelaskan pada presentasi ini:</p><ul><li>Membuat website yang sudah memiliki database dan operasi CRUD sederhana menggunakan forms.</li><li>Contoh tampilan admin</li><li>Contoh penambahan aplikasi yang dibuat orang lain</li></ul>\\\"}, {\\\"type\\\": \\\"raw_html\\\", \\\"value\\\": \\\"<iframe width=\\\\\\\"722px\\\\\\\" height=\\\\\\\"565px\\\\\\\" src=\\\\\\\"https://onedrive.live.com/embed?cid=E617AD6493683DF0&amp;resid=E617AD6493683DF0%21126&amp;authkey=AFanKedjAk1CJ3c&amp;em=2&amp;wdAr=1.3333333333333333\\\\\\\"></iframe>\\\"}]\", \"live\": true, \"thumbnail_image\": 29, \"has_unpublished_changes\": false, \"related_post\": \"[]\", \"main_img_disc\": \"logo from www.djangoproject.com\", \"angular_url\": \"perkenalan-django\", \"title_extended\": \"\", \"numchild\": 0, \"content_type\": 34, \"show_in_menus\": false, \"date\": \"2015-06-30\", \"path\": \"000100010001000A\", \"url_path\": \"/home/blog/perkenalan-django/\", \"expired\": false, \"pk\": 15, \"categories\": \"[{\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Django\\\"}, {\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Python\\\"}]\", \"main_image\": 29, \"locked\": false, \"author\": \"Abirafdi Raditya Putra\", \"depth\": 4, \"first_published_at\": \"2015-08-14T06:23:41.929Z\", \"expire_at\": null}", "user": 1, "page": 15}, "model": "wagtailcore.pagerevision", "pk": 109}, {"fields": {"approved_go_live_at": null, "created_at": "2015-08-14T06:33:38.431Z", "submitted_for_moderation": false, "content_json": "{\"search_description\": \"\", \"owner\": 1, \"intro\": \"<p>Presentasi yang saya buat untuk perkenalan Django</p>\", \"latest_revision_created_at\": \"2015-08-14T06:24:47.401Z\", \"main_background_image\": null, \"go_live_at\": null, \"title\": \"Perkenalan Django\", \"seo_title\": \"\", \"slug\": \"perkenalan-django\", \"content\": \"[{\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Berikut merupakan perkenalan Django yang sudah saya buat sebelumnya untuk sebuah presentasi. Yang dijelaskan pada presentasi ini:</p><ul><li>Membuat website yang sudah memiliki database dan operasi CRUD sederhana menggunakan forms.</li><li>Contoh tampilan admin</li><li>Contoh penambahan aplikasi yang dibuat orang lain</li></ul>\\\"}, {\\\"type\\\": \\\"raw_html\\\", \\\"value\\\": \\\"<iframe width=\\\\\\\"722px\\\\\\\" height=\\\\\\\"565px\\\\\\\" src=\\\\\\\"https://onedrive.live.com/embed?cid=E617AD6493683DF0&amp;resid=E617AD6493683DF0%21126&amp;authkey=AFanKedjAk1CJ3c&amp;em=2&amp;wdAr=1.3333333333333333\\\\\\\"></iframe>\\\"}]\", \"live\": true, \"thumbnail_image\": 29, \"has_unpublished_changes\": false, \"related_post\": \"[]\", \"main_img_disc\": \"logo from www.djangoproject.com\", \"angular_url\": \"perkenalan-django\", \"title_extended\": \"\", \"numchild\": 0, \"content_type\": 34, \"show_in_menus\": false, \"date\": \"2015-06-30\", \"path\": \"000100010001000A\", \"url_path\": \"/home/blog/perkenalan-django/\", \"expired\": false, \"pk\": 15, \"categories\": \"[{\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Django\\\"}, {\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Python\\\"}]\", \"main_image\": 29, \"locked\": false, \"author\": \"Abirafdi Raditya Putra\", \"depth\": 4, \"first_published_at\": \"2015-08-14T06:23:41.929Z\", \"expire_at\": null}", "user": 1, "page": 15}, "model": "wagtailcore.pagerevision", "pk": 110}, {"fields": {"approved_go_live_at": null, "created_at": "2015-08-14T06:34:56.078Z", "submitted_for_moderation": false, "content_json": "{\"search_description\": \"\", \"owner\": 1, \"intro\": \"<p>Version Control System adalah sebuah software manajemen perubahan (revisi/versioning) pada source code, program komputer, website, maupun dokumen dan file-file lainnya. Setiap revisi akan dicatat di sebuah<em>repository\\u00a0</em>secara detail, yaitu mencakup\\u00a0waktu revisinya, siapa yang melakukan revisinya, dan file yang diubah itu sendiri</p>\", \"latest_revision_created_at\": null, \"main_background_image\": null, \"go_live_at\": null, \"title\": \"Version Control System Menggunakan GitHub\", \"seo_title\": \"\", \"slug\": \"version-control-system-menggunakan-github\", \"content\": \"[]\", \"live\": true, \"thumbnail_image\": 30, \"has_unpublished_changes\": false, \"related_post\": \"[]\", \"main_img_disc\": \"\", \"angular_url\": \"version-control-system-menggunakan-github\", \"title_extended\": \"\", \"numchild\": 0, \"content_type\": 34, \"show_in_menus\": false, \"date\": \"2015-06-30\", \"path\": \"000100010001000B\", \"url_path\": \"/home/blog/version-control-system-menggunakan-github/\", \"expired\": false, \"pk\": 16, \"categories\": \"[{\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Software\\\"}]\", \"main_image\": 30, \"locked\": false, \"author\": \"Abirafdi Raditya Putra\", \"depth\": 4, \"first_published_at\": null, \"expire_at\": null}", "user": 1, "page": 16}, "model": "wagtailcore.pagerevision", "pk": 111}, {"fields": {"approved_go_live_at": null, "created_at": "2015-08-14T06:35:28.855Z", "submitted_for_moderation": false, "content_json": "{\"search_description\": \"\", \"owner\": 1, \"intro\": \"<p>Para gamer dan pengguna PC tentunya sudah akrab dengan API directX atau Open GL, keduanya kerap dipakai pengembang game sebagai landasan mereka membuat karya yang ciamik. Mantle merupakan pendatang baru dari AMD yang diharapkan dapat meningkatkan performa graphics.</p>\", \"latest_revision_created_at\": \"2015-08-12T23:56:16.312Z\", \"main_background_image\": null, \"go_live_at\": null, \"title\": \"Mantle Graphics API Terbaru Dari AMD\", \"seo_title\": \"\", \"slug\": \"mantle-graphics-api-terbaru-dari-amd\", \"content\": \"[{\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Para gamer dan pengguna PC tentunya sudah akrab dengan API directX atau Open GL, keduanya kerap dipakai pengembang game sebagai landasan mereka membuat karya yang ciamik.\\\\u00a0Mantle sama dengan directX dan Open GL. Hanya saja API ini dikembangkan oleh AMD dan dipercaya akan menjadi sebuah standart baru dari industri game. Berbeda dengan directX atau Open GL, Mantle memungkinkan pengembang game untuk membuat suatu 'bahasa' yang bisa langsung dimengerti oleh mesin, dalam hal ini adalah kartu grafis Radeon. Sekadar catatan, selama ini kebanyakan game menggunakan directX sebagai 'penterjemah bahasa' untuk berbagai kartu grafis. Alhasil, komunikasi antara game dengan mesin yang bertugas mengolah data akan semakin lancar. Ujung-ujungnya adalah, performa grafis yang meningkat, dan kebebasan developer untuk membuat animasi baru dengan memaksimalkan semua fitur pada sebuah kartu grafis.\\\\u00a0</p><p>Mantle, diklaim AMD akan menjadi standart baru di dunia game, dan sepertinya benar demikian, mengingat Xbox One dan PS4 sama-sama mengusung chip dari 'kubu merah'. Hal itu tentu saja membuat para developer dapat lebih mudah membuat game yang sama untuk konsol dan PC, terlebih lagi kedua platform ini bisa menggunakan API yang sama.\\\\u00a0Dengan seluruh konsep yang ditawarkan, kelahiran Mantle sudah pasti disambut baik oleh sejumlah pembuat game, salah satu DICE yang sukses membuat seri Battlefield.\\\\u00a0</p><p></p><p></p><p>Battlefield 4 akan diluncurkan akhir 2013 ini adalah game pertama yang menggunakan teknologi Mantle. Bukan hanya pada versi PC, versi konsolnya pun bakal kebagian fitur tersebut.\\\\u00a0Jadi sudah terbayang bukan, seperti apa jadinya jika ada satu game yang mampu memaksimalkan seluruh kekuatan dan fitur pada kartu grafis PC?\\\\u00a0Saat dirilis nanti Mantle hanya bisa dipakai pada jajaran kartu grafis Hawaii, belum bisa dipastikan apakah aplikasi ini juga akan kompatibel dengan seri Radeon terdahulu. Begitu juga soal kemungkinan bisa dipakai pada GPU lain.\\\\u00a0</p>\\\"}]\", \"live\": true, \"thumbnail_image\": 12, \"has_unpublished_changes\": false, \"related_post\": \"[]\", \"main_img_disc\": \"AMD public domain\", \"angular_url\": \"mantle-graphics-api-terbaru-dari-amd\", \"title_extended\": \"\", \"numchild\": 0, \"content_type\": 34, \"show_in_menus\": false, \"date\": \"2013-12-07\", \"path\": \"0001000100010002\", \"url_path\": \"/home/blog/mantle-graphics-api-terbaru-dari-amd/\", \"expired\": false, \"pk\": 7, \"categories\": \"[{\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Technology\\\"}]\", \"main_image\": 11, \"locked\": false, \"author\": \"Abirafdi Raditya Putra\", \"depth\": 4, \"first_published_at\": \"2015-08-12T23:52:15.433Z\", \"expire_at\": null}", "user": 1, "page": 7}, "model": "wagtailcore.pagerevision", "pk": 112}, {"fields": {"approved_go_live_at": null, "created_at": "2015-08-15T00:14:01.431Z", "submitted_for_moderation": false, "content_json": "{\"search_description\": \"\", \"owner\": 1, \"intro\": \"<p>Version Control System adalah sebuah software manajemen perubahan (revisi/versioning) pada source code, program komputer, website, maupun dokumen dan file-file lainnya. Setiap revisi akan dicatat di sebuah<em>repository\\u00a0</em>secara detail, yaitu mencakup\\u00a0waktu revisinya, siapa yang melakukan revisinya, dan file yang diubah itu sendiri</p>\", \"latest_revision_created_at\": \"2015-08-14T06:34:56.078Z\", \"main_background_image\": null, \"go_live_at\": null, \"title\": \"Version Control System Menggunakan GitHub\", \"seo_title\": \"\", \"slug\": \"version-control-system-menggunakan-github\", \"content\": \"[{\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Version Control System adalah sebuah software manajemen perubahan (revisi/versioning) pada source code, program komputer, website, maupun dokumen dan file-file lainnya. Setiap revisi akan dicatat di sebuah<em>repository\\\\u00a0</em>secara detail, yaitu mencakup\\\\u00a0waktu revisinya, siapa yang melakukan revisinya, dan file yang diubah itu sendiri.\\\\u00a0VCS memungkinkan kita kembali ke revisi atau versi sebelumnya dan juga memungkinkan dua developer atau lebih bekerja pada\\\\u00a0<em>file\\\\u00a0</em>atau project\\\\u00a0yang sama, yang nantinya hasil pekerjaan dua developer tersebut akan digabung (merge) secara otomatis oleh VCS.\\\\u00a0</p><p>\\\\u00a0\\\\u00a0</p><p></p><h4>Keuntungan menggunakan VCS</h4><ul><li>Perubahan pada source code terdokumentasi secara detail dan rapih.</li><li>Peningkatan produktivitas karena memungkinkan dua atau lebih developer bekerja pada project dan juga file yang sama. (conflict bisa saja terjadi i.e. dua developer mengubah line yang sama pada suatu file, conflict ini nantinya harus diselesaikan secara manual pada saat penggabungan/merge)</li><li>Kemudahan kembali ke versi sebelumnya.</li><li>Peningkatan portabilitas source code kita. Source code kita dengan mudah kita dapatkan dimana saja dengan menggunakan VCS yang sudah memiliki remote repository (i.e. repository yang berada di cloud), kita juga bisa memilih revisi/branch mana yang kita ingin dapatkan.\\\\u00a0</li></ul><p><br/></p><h4>Workflow</h4>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"salah satu pattern version control. image credit @ronaldwidha\\\"}, {\\\"type\\\": \\\"full_image\\\", \\\"value\\\": 31}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<ol><li>Project dimulai, source code utama diwarnai biru tua. Source code utama biasanya disebut Trunk atau Master. Master merupakan versi paling stabil dari project kita.</li><li>Kemudian developer lain ingin menambah fitur lain, seperti menambahkan fitur search pada suatu website, namun karena takut akan menimbulkan bugs pada branch Master (terkadang suatu program memiliki dua atau lebih versi yang selalu dikerjakan, masing-masing versi ini disebut branch, e.g Windows 7 ultimate edition merupakan branch dari Windows 7 Master, branch akan hilang jika dimerge dengan branch lainnya) maka developer ini akan membuat branch baru dengan nama Search, sang developer me-<em>clone</em>\\\\u00a0(meng-copy source code branch Master) branch Master lalu menambahkan fitur search, sehingga proses development branch Master masih bisa terus dilakukan oleh developer yang lain. Jika penambahan fitur search sudah melewati tahap testing dan Q&amp;A, maka branch Search akan dimerge dengan branch Master.</li><li>Begitu seterusnya pada penambahan fitur-fitur yang lain.\\\\u00a0</li><li>Misalkan ada permintaan untuk membuat program yang mirip dengan branch Master, maka para developer tinggal membuat branch baru dengan me-clone branch Master, seperti yang bisa dilihat pada garis biru muda diatas. \\\\u00a0</li></ol><p>\\\\u00a0\\\\u00a0</p><h4>Contoh Menggunakan GitHub</h4><p>GitHub merupakan salah satu VCS yang paling banyak digunakan, bahkan Linux menggunakan GitHub sebagai VCS-nya. Namun sebenarnya GitHub bukanlah sebuah VCS, tetapi merupakan\\\\u00a0<em>hub\\\\u00a0</em>(tempat berkumpul/konsolidasi dari berbagai project yang menggunakan Git) dari\\\\u00a0<em>Git</em>. Nah Git inilah yang merupakan VCS-nya, GitHub memfasilitasi Git agar lebih mudah digunakan dan juga penambahan fitur-fitur lainnya. Sebelum kita mulai, Git bertipe decentrallized atau distributed, setiap developer memiliki local repository yang berada pada PC-nya, setiap revisi akan dicatat terlebih dahulu di repository local tersebut, developer tersebut bebas menentukan apakah data repository local diupload ke repository remote (GitHub) atau tidak, tidak ada yang bertindak sebagai server utama repository, semua data repository ada pada seluruh client. Walaupun kesannya GitHub memiliki server utama (i.e. repository yang berada di GitHub), tetapi sebenarnya sama saja dengan repository local pada PC kita, hanya saja berada di cloud (<em>remote</em>).\\\\u00a0</p><p>1. Install\\\\u00a0<a href=\\\\\\\"https://windows.github.com/\\\\\\\">GitHub for Windows</a></p><p>2. Buat Account\\\\u00a0<a href=\\\\\\\"https://github.com/\\\\\\\">GitHub</a></p><p>3. Buat repository baru di GitHub, bisa dilakukan melalui GitHub for Windows atau di websitenya.</p><p>4. Buat folder baru di PC anda, buatlah file .txt yang berisi</p>\\\"}, {\\\"type\\\": \\\"full_image\\\", \\\"value\\\": 32}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>5. Commit adalah command untuk memerintahkan Git untuk memeriksa apakah ada file yang berubah atau tidak, jika ada maka akan terbuat revisi baru dan dicatat ke repository local kita, dalam kata lain Commit adalah untuk membuat revisi baru.</p><p>6. Selanjutnya buka Git Shell lalu navigasi ke folder yang anda buat.</p><p>7. Git mengharuskan kita mengubah folder yang kita ingin integrasikan VCS menjadi kompatibel dengan Git, yaitu dengan mengetikkan command\\\\u00a0<em>git init</em>.</p>\\\"}, {\\\"type\\\": \\\"full_image\\\", \\\"value\\\": 33}]\", \"live\": true, \"thumbnail_image\": 30, \"has_unpublished_changes\": false, \"related_post\": \"[]\", \"main_img_disc\": \"\", \"angular_url\": \"version-control-system-menggunakan-github\", \"title_extended\": \"\", \"numchild\": 0, \"content_type\": 34, \"show_in_menus\": false, \"date\": \"2015-06-30\", \"path\": \"000100010001000B\", \"url_path\": \"/home/blog/version-control-system-menggunakan-github/\", \"expired\": false, \"pk\": 16, \"categories\": \"[{\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Software\\\"}]\", \"main_image\": 30, \"locked\": false, \"author\": \"Abirafdi Raditya Putra\", \"depth\": 4, \"first_published_at\": \"2015-08-14T06:34:56.123Z\", \"expire_at\": null}", "user": 1, "page": 16}, "model": "wagtailcore.pagerevision", "pk": 113}, {"fields": {"approved_go_live_at": null, "created_at": "2015-08-15T00:19:53.865Z", "submitted_for_moderation": false, "content_json": "{\"search_description\": \"\", \"owner\": 1, \"intro\": \"<p>Version Control System adalah sebuah software manajemen perubahan (revisi/versioning) pada source code, program komputer, website, maupun dokumen dan file-file lainnya. Setiap revisi akan dicatat di sebuah<em>repository\\u00a0</em>secara detail, yaitu mencakup\\u00a0waktu revisinya, siapa yang melakukan revisinya, dan file yang diubah itu sendiri</p>\", \"latest_revision_created_at\": \"2015-08-15T00:14:01.431Z\", \"main_background_image\": null, \"go_live_at\": null, \"title\": \"Version Control System Menggunakan GitHub\", \"seo_title\": \"\", \"slug\": \"version-control-system-menggunakan-github\", \"content\": \"[{\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Version Control System adalah sebuah software manajemen perubahan (revisi/versioning) pada source code, program komputer, website, maupun dokumen dan file-file lainnya. Setiap revisi akan dicatat di sebuah<em>repository\\\\u00a0</em>secara detail, yaitu mencakup\\\\u00a0waktu revisinya, siapa yang melakukan revisinya, dan file yang diubah itu sendiri.\\\\u00a0VCS memungkinkan kita kembali ke revisi atau versi sebelumnya dan juga memungkinkan dua developer atau lebih bekerja pada\\\\u00a0<em>file\\\\u00a0</em>atau project\\\\u00a0yang sama, yang nantinya hasil pekerjaan dua developer tersebut akan digabung (merge) secara otomatis oleh VCS.\\\\u00a0</p><p>\\\\u00a0\\\\u00a0</p><p></p><h4>Keuntungan menggunakan VCS</h4><ul><li>Perubahan pada source code terdokumentasi secara detail dan rapih.</li><li>Peningkatan produktivitas karena memungkinkan dua atau lebih developer bekerja pada project dan juga file yang sama. (conflict bisa saja terjadi i.e. dua developer mengubah line yang sama pada suatu file, conflict ini nantinya harus diselesaikan secara manual pada saat penggabungan/merge)</li><li>Kemudahan kembali ke versi sebelumnya.</li><li>Peningkatan portabilitas source code kita. Source code kita dengan mudah kita dapatkan dimana saja dengan menggunakan VCS yang sudah memiliki remote repository (i.e. repository yang berada di cloud), kita juga bisa memilih revisi/branch mana yang kita ingin dapatkan.\\\\u00a0</li></ul><p><br/></p><h4>Workflow</h4>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"salah satu pattern version control. image credit @ronaldwidha\\\"}, {\\\"type\\\": \\\"full_image\\\", \\\"value\\\": 31}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<ol><li>Project dimulai, source code utama diwarnai biru tua. Source code utama biasanya disebut Trunk atau Master. Master merupakan versi paling stabil dari project kita.</li><li>Kemudian developer lain ingin menambah fitur lain, seperti menambahkan fitur search pada suatu website, namun karena takut akan menimbulkan bugs pada branch Master (terkadang suatu program memiliki dua atau lebih versi yang selalu dikerjakan, masing-masing versi ini disebut branch, e.g Windows 7 ultimate edition merupakan branch dari Windows 7 Master, branch akan hilang jika dimerge dengan branch lainnya) maka developer ini akan membuat branch baru dengan nama Search, sang developer me-<em>clone</em>\\\\u00a0(meng-copy source code branch Master) branch Master lalu menambahkan fitur search, sehingga proses development branch Master masih bisa terus dilakukan oleh developer yang lain. Jika penambahan fitur search sudah melewati tahap testing dan Q&amp;A, maka branch Search akan dimerge dengan branch Master.</li><li>Begitu seterusnya pada penambahan fitur-fitur yang lain.\\\\u00a0</li><li>Misalkan ada permintaan untuk membuat program yang mirip dengan branch Master, maka para developer tinggal membuat branch baru dengan me-clone branch Master, seperti yang bisa dilihat pada garis biru muda diatas. \\\\u00a0</li></ol><p>\\\\u00a0\\\\u00a0</p><h4>Contoh Menggunakan GitHub</h4><p>GitHub merupakan salah satu VCS yang paling banyak digunakan, bahkan Linux menggunakan GitHub sebagai VCS-nya. Namun sebenarnya GitHub bukanlah sebuah VCS, tetapi merupakan\\\\u00a0<em>hub\\\\u00a0</em>(tempat berkumpul/konsolidasi dari berbagai project yang menggunakan Git) dari\\\\u00a0<em>Git</em>. Nah Git inilah yang merupakan VCS-nya, GitHub memfasilitasi Git agar lebih mudah digunakan dan juga penambahan fitur-fitur lainnya. Sebelum kita mulai, Git bertipe decentrallized atau distributed, setiap developer memiliki local repository yang berada pada PC-nya, setiap revisi akan dicatat terlebih dahulu di repository local tersebut, developer tersebut bebas menentukan apakah data repository local diupload ke repository remote (GitHub) atau tidak, tidak ada yang bertindak sebagai server utama repository, semua data repository ada pada seluruh client. Walaupun kesannya GitHub memiliki server utama (i.e. repository yang berada di GitHub), tetapi sebenarnya sama saja dengan repository local pada PC kita, hanya saja berada di cloud (<em>remote</em>).\\\\u00a0</p><p>1. Install\\\\u00a0<a href=\\\\\\\"https://windows.github.com/\\\\\\\">GitHub for Windows</a></p><p>2. Buat Account\\\\u00a0<a href=\\\\\\\"https://github.com/\\\\\\\">GitHub</a></p><p>3. Buat repository baru di GitHub, bisa dilakukan melalui GitHub for Windows atau di websitenya.</p><p>4. Buat folder baru di PC anda, buatlah file .txt yang berisi</p>\\\"}, {\\\"type\\\": \\\"full_image\\\", \\\"value\\\": 32}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>5. Commit adalah command untuk memerintahkan Git untuk memeriksa apakah ada file yang berubah atau tidak, jika ada maka akan terbuat revisi baru dan dicatat ke repository local kita, dalam kata lain Commit adalah untuk membuat revisi baru.</p><p>6. Selanjutnya buka Git Shell lalu navigasi ke folder yang anda buat.</p><p>7. Git mengharuskan kita mengubah folder yang kita ingin integrasikan VCS menjadi kompatibel dengan Git, yaitu dengan mengetikkan command\\\\u00a0<em>git init</em>.</p>\\\"}, {\\\"type\\\": \\\"full_image\\\", \\\"value\\\": 33}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>8. Maka folder test sudah menjadi folder\\\\u00a0<em>Git</em>. Namun kita masih perlu menambah file mana saja yang ingin diperiksa/monitor pada saat commit, maka kita ketikkan command\\\\u00a0<em>git add test.txt</em>.</p>\\\"}, {\\\"type\\\": \\\"full_image\\\", \\\"value\\\": 34}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>9. Kode +1 ~0 -0 adalah perbandingan isi dari folder Git kita dengan repository local, sedangkan kode itu sendiri artinya, +1 bahwa ada 1 file baru yang muncul pada folder Git kita(test.txt). ~0 bahwa tidak ada file yang dimodifikasi, dan -0 tidak ada file yang didelete. Warna merah menandakan untuk file yang belum di<em>add</em>\\\\u00a0atau di\\\\u00a0<em>track</em>\\\\u00a0oleh Git, sedangkan Hijau sudah, oleh karena itu sebelum test.txt di\\\\u00a0<em>add</em>\\\\u00a0kode \\\\u00a0berwarna merah. Coba kalian buat file txt baru lalu jalankan perintah\\\\u00a0<em>git status</em>, maka akan ada 2 kode yang sama namun warna yang berbeda. Kode ini membandingkan status folder Git kita terhadap repository local kita, +1 ~0 -0 menandakan bahwa sekarang memiliki 1 file baru dibandingkan dengan repository local kita (repository kita masih kosong, karena kita belum pernah commit). Untuk melihat lebih detailnya kita bisa gunakan command\\\\u00a0<em>git status</em></p>\\\"}, {\\\"type\\\": \\\"full_image\\\", \\\"value\\\": 35}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>10. Terlihat Changes to be commited ialah test.txt, cocok dengan kode +1 ~0 -0 yang tadi, selanjutnya kita commit\\\\u00a0dengan menggunakan command\\\\u00a0<em>git commit -m \\\\\\\"&lt;pesan commit&gt;\\\\\\\"</em></p>\\\"}, {\\\"type\\\": \\\"full_image\\\", \\\"value\\\": 36}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>11. Setelah melakukan commit maka kode akan hilang, artinya folder kita sekarang sama dengan repository local kita. Selanjutnya kita upload atau\\\\u00a0<em>push</em>\\\\u00a0repository local kita ke remote repository. Command\\\\u00a0<em>git remote add origin https://github.com/&lt;username&gt;/repository_name.git</em>\\\\u00a0berguna untuk menyimpan url repository kita yang dinamakan origin, jadi nantinya kita tidak perlu repot menulis ulang url setiap\\\\u00a0<em>push</em>. Lalu kita gunakan command\\\\u00a0<em>git push origin master,\\\\u00a0</em>yang artinya kita me-upload repository local kita ke branch master origin.</p>\\\"}, {\\\"type\\\": \\\"full_image\\\", \\\"value\\\": 37}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>12. Cek apakah repository remote (GitHub) sudah sama dengan repository local kita.</p>\\\"}, {\\\"type\\\": \\\"full_image\\\", \\\"value\\\": 38}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>13. Repository remote sudah sama dengan repository local. So far kita sudah berhasil commit ke repository local dan me-uploadnya ke repository remote. Selanjutnya kita coba untuk mengambil repository remote. Anggap saja kita berada pada PC yang lain, buat folder baru dan lakukan\\\\u00a0<em>git init</em>\\\\u00a0untuk mengubahnya menjadi folder Git. Karena kita sekarang berada pada folder Git yang masih baru, maka kita harus menambahkan origin lagi. Setelah itu, command untuk meng-copy/mengambil isi dari repository remote adalah\\\\u00a0<em>git pull origin master,\\\\u00a0</em>yang artinya ambil atau tarik branch master di origin. Setelah itu cek apakah ada file test.txt</p>\\\"}, {\\\"type\\\": \\\"full_image\\\", \\\"value\\\": 39}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>14. Yup, file test.txt berhasil kita dapatkan. Sebagai gambaran, kita memiliki 3 repository, PC developer A, PC developer B, dan repository di GitHub, semuanya memiliki file dan isi yang sama. Contoh dalam pembuatan web, ganti saja peran PC developer B menjadi hostingan, sehingga proses development hanya terjadi di PC kita atau bahkan di device manapun (kita tinggal pull saja repository remote), peran hostingan hanya untuk menarik atau\\\\u00a0<em>pull</em>\\\\u00a0perubahan yang sudah kita\\\\u00a0<em>push</em>\\\\u00a0ke remote repository/GitHub, kita tidak perlu mengupload manual file yang kita ubah, cukup dengan 2 command semua file yang anda ubah akan otomatis terupload, dan dilengkapi dengan fitur VCS, seperti rollback ke revisi sebelumnya, atau merge dengan hasil kerja dari developer lain.</p>\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<h3>Kesimpulan</h3><p>Penggunaan VCS bagi saya merupakan hal yang mutlak untuk project skala menengah-besar, keuntungan yang didapatkan dengan menggunakan VCS jauh lebih banyak dibandingkan dengan usaha yang dibutuhkan untuk menerapkan dan mempelajarinya. All-in-all menurut saya mempelajari VCS adalah kewajiban bagi setiap mahasiswa yang ingin terjun ke dunia pemograman.</p>\\\"}]\", \"live\": true, \"thumbnail_image\": 30, \"has_unpublished_changes\": false, \"related_post\": \"[]\", \"main_img_disc\": \"\", \"angular_url\": \"version-control-system-menggunakan-github\", \"title_extended\": \"\", \"numchild\": 0, \"content_type\": 34, \"show_in_menus\": false, \"date\": \"2015-06-30\", \"path\": \"000100010001000B\", \"url_path\": \"/home/blog/version-control-system-menggunakan-github/\", \"expired\": false, \"pk\": 16, \"categories\": \"[{\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Software\\\"}]\", \"main_image\": 30, \"locked\": false, \"author\": \"Abirafdi Raditya Putra\", \"depth\": 4, \"first_published_at\": \"2015-08-14T06:34:56.123Z\", \"expire_at\": null}", "user": 1, "page": 16}, "model": "wagtailcore.pagerevision", "pk": 114}, {"fields": {"approved_go_live_at": null, "created_at": "2015-08-15T00:20:59.703Z", "submitted_for_moderation": false, "content_json": "{\"search_description\": \"\", \"owner\": 1, \"intro\": \"<p>Version Control System adalah sebuah software manajemen perubahan (revisi/versioning) pada source code, program komputer, website, maupun dokumen dan file-file lainnya. Setiap revisi akan dicatat di sebuah<em>repository\\u00a0</em>secara detail, yaitu mencakup\\u00a0waktu revisinya, siapa yang melakukan revisinya, dan file yang diubah itu sendiri</p>\", \"latest_revision_created_at\": \"2015-08-15T00:19:53.865Z\", \"main_background_image\": null, \"go_live_at\": null, \"title\": \"Version Control System Menggunakan GitHub\", \"seo_title\": \"\", \"slug\": \"version-control-system-menggunakan-github\", \"content\": \"[{\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Version Control System adalah sebuah software manajemen perubahan (revisi/versioning) pada source code, program komputer, website, maupun dokumen dan file-file lainnya. Setiap revisi akan dicatat di sebuah<em>repository\\\\u00a0</em>secara detail, yaitu mencakup\\\\u00a0waktu revisinya, siapa yang melakukan revisinya, dan file yang diubah itu sendiri.\\\\u00a0VCS memungkinkan kita kembali ke revisi atau versi sebelumnya dan juga memungkinkan dua developer atau lebih bekerja pada\\\\u00a0<em>file\\\\u00a0</em>atau project\\\\u00a0yang sama, yang nantinya hasil pekerjaan dua developer tersebut akan digabung (merge) secara otomatis oleh VCS.\\\\u00a0</p><p>\\\\u00a0\\\\u00a0</p><p></p><h4>Keuntungan menggunakan VCS</h4><ul><li>Perubahan pada source code terdokumentasi secara detail dan rapih.</li><li>Peningkatan produktivitas karena memungkinkan dua atau lebih developer bekerja pada project dan juga file yang sama. (conflict bisa saja terjadi i.e. dua developer mengubah line yang sama pada suatu file, conflict ini nantinya harus diselesaikan secara manual pada saat penggabungan/merge)</li><li>Kemudahan kembali ke versi sebelumnya.</li><li>Peningkatan portabilitas source code kita. Source code kita dengan mudah kita dapatkan dimana saja dengan menggunakan VCS yang sudah memiliki remote repository (i.e. repository yang berada di cloud), kita juga bisa memilih revisi/branch mana yang kita ingin dapatkan.\\\\u00a0</li></ul><p><br/></p><h4>Workflow</h4>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"salah satu pattern version control. image credit @ronaldwidha\\\"}, {\\\"type\\\": \\\"full_image\\\", \\\"value\\\": 31}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<ol><li>Project dimulai, source code utama diwarnai biru tua. Source code utama biasanya disebut Trunk atau Master. Master merupakan versi paling stabil dari project kita.</li><li>Kemudian developer lain ingin menambah fitur lain, seperti menambahkan fitur search pada suatu website, namun karena takut akan menimbulkan bugs pada branch Master (terkadang suatu program memiliki dua atau lebih versi yang selalu dikerjakan, masing-masing versi ini disebut branch, e.g Windows 7 ultimate edition merupakan branch dari Windows 7 Master, branch akan hilang jika dimerge dengan branch lainnya) maka developer ini akan membuat branch baru dengan nama Search, sang developer me-<em>clone</em>\\\\u00a0(meng-copy source code branch Master) branch Master lalu menambahkan fitur search, sehingga proses development branch Master masih bisa terus dilakukan oleh developer yang lain. Jika penambahan fitur search sudah melewati tahap testing dan Q&amp;A, maka branch Search akan dimerge dengan branch Master.</li><li>Begitu seterusnya pada penambahan fitur-fitur yang lain.\\\\u00a0</li><li>Misalkan ada permintaan untuk membuat program yang mirip dengan branch Master, maka para developer tinggal membuat branch baru dengan me-clone branch Master, seperti yang bisa dilihat pada garis biru muda diatas. \\\\u00a0</li></ol><p>\\\\u00a0\\\\u00a0</p><h4>Contoh Menggunakan GitHub</h4><p>GitHub merupakan salah satu VCS yang paling banyak digunakan, bahkan Linux menggunakan GitHub sebagai VCS-nya. Namun sebenarnya GitHub bukanlah sebuah VCS, tetapi merupakan\\\\u00a0<em>hub\\\\u00a0</em>(tempat berkumpul/konsolidasi dari berbagai project yang menggunakan Git) dari\\\\u00a0<em>Git</em>. Nah Git inilah yang merupakan VCS-nya, GitHub memfasilitasi Git agar lebih mudah digunakan dan juga penambahan fitur-fitur lainnya. Sebelum kita mulai, Git bertipe decentrallized atau distributed, setiap developer memiliki local repository yang berada pada PC-nya, setiap revisi akan dicatat terlebih dahulu di repository local tersebut, developer tersebut bebas menentukan apakah data repository local diupload ke repository remote (GitHub) atau tidak, tidak ada yang bertindak sebagai server utama repository, semua data repository ada pada seluruh client. Walaupun kesannya GitHub memiliki server utama (i.e. repository yang berada di GitHub), tetapi sebenarnya sama saja dengan repository local pada PC kita, hanya saja berada di cloud (<em>remote</em>).\\\\u00a0</p><p>1. Install\\\\u00a0<a href=\\\\\\\"https://windows.github.com/\\\\\\\">GitHub for Windows</a></p><p>2. Buat Account\\\\u00a0<a href=\\\\\\\"https://github.com/\\\\\\\">GitHub</a></p><p>3. Buat repository baru di GitHub, bisa dilakukan melalui GitHub for Windows atau di websitenya.</p><p>4. Buat folder baru di PC anda, buatlah file .txt yang berisi</p>\\\"}, {\\\"type\\\": \\\"full_image\\\", \\\"value\\\": 32}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>5. Commit adalah command untuk memerintahkan Git untuk memeriksa apakah ada file yang berubah atau tidak, jika ada maka akan terbuat revisi baru dan dicatat ke repository local kita, dalam kata lain Commit adalah untuk membuat revisi baru.</p><p>6. Selanjutnya buka Git Shell lalu navigasi ke folder yang anda buat.</p><p>7. Git mengharuskan kita mengubah folder yang kita ingin integrasikan VCS menjadi kompatibel dengan Git, yaitu dengan mengetikkan command\\\\u00a0<em>git init</em>.</p>\\\"}, {\\\"type\\\": \\\"full_image\\\", \\\"value\\\": 33}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>8. Maka folder test sudah menjadi folder\\\\u00a0<em>Git</em>. Namun kita masih perlu menambah file mana saja yang ingin diperiksa/monitor pada saat commit, maka kita ketikkan command\\\\u00a0<em>git add test.txt</em>.</p>\\\"}, {\\\"type\\\": \\\"full_image\\\", \\\"value\\\": 34}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Kode +1 ~0 -0 adalah perbandingan isi dari folder Git kita dengan repository local, sedangkan kode itu sendiri artinya, +1 bahwa ada 1 file baru yang muncul pada folder Git kita(test.txt). ~0 bahwa tidak ada file yang dimodifikasi, dan -0 tidak ada file yang didelete. Warna merah menandakan untuk file yang belum di<em>add</em>\\\\u00a0atau di\\\\u00a0<em>track</em>\\\\u00a0oleh Git, sedangkan Hijau sudah, oleh karena itu sebelum test.txt di\\\\u00a0<em>add</em>\\\\u00a0kode \\\\u00a0berwarna merah. Coba kalian buat file txt baru lalu jalankan perintah\\\\u00a0<em>git status</em>, maka akan ada 2 kode yang sama namun warna yang berbeda. Kode ini membandingkan status folder Git kita terhadap repository local kita, +1 ~0 -0 menandakan bahwa sekarang memiliki 1 file baru dibandingkan dengan repository local kita (repository kita masih kosong, karena kita belum pernah commit). Untuk melihat lebih detailnya kita bisa gunakan command\\\\u00a0<em>git status</em></p>\\\"}, {\\\"type\\\": \\\"full_image\\\", \\\"value\\\": 35}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>10. Terlihat Changes to be commited ialah test.txt, cocok dengan kode +1 ~0 -0 yang tadi, selanjutnya kita commit\\\\u00a0dengan menggunakan command\\\\u00a0<em>git commit -m \\\\\\\"&lt;pesan commit&gt;\\\\\\\"</em></p>\\\"}, {\\\"type\\\": \\\"full_image\\\", \\\"value\\\": 36}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>11. Setelah melakukan commit maka kode akan hilang, artinya folder kita sekarang sama dengan repository local kita. Selanjutnya kita upload atau\\\\u00a0<em>push</em>\\\\u00a0repository local kita ke remote repository. Command\\\\u00a0<em>git remote add origin https://github.com/&lt;username&gt;/repository_name.git</em>\\\\u00a0berguna untuk menyimpan url repository kita yang dinamakan origin, jadi nantinya kita tidak perlu repot menulis ulang url setiap\\\\u00a0<em>push</em>. Lalu kita gunakan command\\\\u00a0<em>git push origin master,\\\\u00a0</em>yang artinya kita me-upload repository local kita ke branch master origin.</p>\\\"}, {\\\"type\\\": \\\"full_image\\\", \\\"value\\\": 37}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>12. Cek apakah repository remote (GitHub) sudah sama dengan repository local kita.</p>\\\"}, {\\\"type\\\": \\\"full_image\\\", \\\"value\\\": 38}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>13. Repository remote sudah sama dengan repository local. So far kita sudah berhasil commit ke repository local dan me-uploadnya ke repository remote. Selanjutnya kita coba untuk mengambil repository remote. Anggap saja kita berada pada PC yang lain, buat folder baru dan lakukan\\\\u00a0<em>git init</em>\\\\u00a0untuk mengubahnya menjadi folder Git. Karena kita sekarang berada pada folder Git yang masih baru, maka kita harus menambahkan origin lagi. Setelah itu, command untuk meng-copy/mengambil isi dari repository remote adalah\\\\u00a0<em>git pull origin master,\\\\u00a0</em>yang artinya ambil atau tarik branch master di origin. Setelah itu cek apakah ada file test.txt</p>\\\"}, {\\\"type\\\": \\\"full_image\\\", \\\"value\\\": 39}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>14. Yup, file test.txt berhasil kita dapatkan. Sebagai gambaran, kita memiliki 3 repository, PC developer A, PC developer B, dan repository di GitHub, semuanya memiliki file dan isi yang sama. Contoh dalam pembuatan web, ganti saja peran PC developer B menjadi hostingan, sehingga proses development hanya terjadi di PC kita atau bahkan di device manapun (kita tinggal pull saja repository remote), peran hostingan hanya untuk menarik atau\\\\u00a0<em>pull</em>\\\\u00a0perubahan yang sudah kita\\\\u00a0<em>push</em>\\\\u00a0ke remote repository/GitHub, kita tidak perlu mengupload manual file yang kita ubah, cukup dengan 2 command semua file yang anda ubah akan otomatis terupload, dan dilengkapi dengan fitur VCS, seperti rollback ke revisi sebelumnya, atau merge dengan hasil kerja dari developer lain.</p>\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<h3>Kesimpulan</h3><p>Penggunaan VCS bagi saya merupakan hal yang mutlak untuk project skala menengah-besar, keuntungan yang didapatkan dengan menggunakan VCS jauh lebih banyak dibandingkan dengan usaha yang dibutuhkan untuk menerapkan dan mempelajarinya. All-in-all menurut saya mempelajari VCS adalah kewajiban bagi setiap mahasiswa yang ingin terjun ke dunia pemograman.</p>\\\"}]\", \"live\": true, \"thumbnail_image\": 30, \"has_unpublished_changes\": false, \"related_post\": \"[]\", \"main_img_disc\": \"\", \"angular_url\": \"version-control-system-menggunakan-github\", \"title_extended\": \"\", \"numchild\": 0, \"content_type\": 34, \"show_in_menus\": false, \"date\": \"2015-06-30\", \"path\": \"000100010001000B\", \"url_path\": \"/home/blog/version-control-system-menggunakan-github/\", \"expired\": false, \"pk\": 16, \"categories\": \"[{\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Software\\\"}]\", \"main_image\": 30, \"locked\": false, \"author\": \"Abirafdi Raditya Putra\", \"depth\": 4, \"first_published_at\": \"2015-08-14T06:34:56.123Z\", \"expire_at\": null}", "user": 1, "page": 16}, "model": "wagtailcore.pagerevision", "pk": 115}, {"fields": {"approved_go_live_at": null, "created_at": "2015-08-15T00:22:56.290Z", "submitted_for_moderation": false, "content_json": "{\"search_description\": \"\", \"owner\": 1, \"intro\": \"<p>Version Control System adalah sebuah software manajemen perubahan (revisi/versioning) pada source code, program komputer, website, maupun dokumen dan file-file lainnya. Setiap revisi akan dicatat di sebuah<em>repository\\u00a0</em>secara detail, yaitu mencakup\\u00a0waktu revisinya, siapa yang melakukan revisinya, dan file yang diubah itu sendiri</p>\", \"latest_revision_created_at\": \"2015-08-15T00:20:59.703Z\", \"main_background_image\": null, \"go_live_at\": null, \"title\": \"Version Control System Menggunakan GitHub\", \"seo_title\": \"\", \"slug\": \"version-control-system-menggunakan-github\", \"content\": \"[{\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Version Control System adalah sebuah software manajemen perubahan (revisi/versioning) pada source code, program komputer, website, maupun dokumen dan file-file lainnya. Setiap revisi akan dicatat di sebuah<em>repository\\\\u00a0</em>secara detail, yaitu mencakup\\\\u00a0waktu revisinya, siapa yang melakukan revisinya, dan file yang diubah itu sendiri.\\\\u00a0VCS memungkinkan kita kembali ke revisi atau versi sebelumnya dan juga memungkinkan dua developer atau lebih bekerja pada\\\\u00a0<em>file\\\\u00a0</em>atau project\\\\u00a0yang sama, yang nantinya hasil pekerjaan dua developer tersebut akan digabung (merge) secara otomatis oleh VCS.\\\\u00a0</p><p>\\\\u00a0\\\\u00a0</p><p></p><h4>Keuntungan menggunakan VCS</h4><ul><li>Perubahan pada source code terdokumentasi secara detail dan rapih.</li><li>Peningkatan produktivitas karena memungkinkan dua atau lebih developer bekerja pada project dan juga file yang sama. (conflict bisa saja terjadi i.e. dua developer mengubah line yang sama pada suatu file, conflict ini nantinya harus diselesaikan secara manual pada saat penggabungan/merge)</li><li>Kemudahan kembali ke versi sebelumnya.</li><li>Peningkatan portabilitas source code kita. Source code kita dengan mudah kita dapatkan dimana saja dengan menggunakan VCS yang sudah memiliki remote repository (i.e. repository yang berada di cloud), kita juga bisa memilih revisi/branch mana yang kita ingin dapatkan.\\\\u00a0</li></ul><p><br/></p><h4>Workflow</h4>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"salah satu pattern version control. image credit @ronaldwidha\\\"}, {\\\"type\\\": \\\"full_image\\\", \\\"value\\\": 31}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<ol><li>Project dimulai, source code utama diwarnai biru tua. Source code utama biasanya disebut Trunk atau Master. Master merupakan versi paling stabil dari project kita.</li><li>Kemudian developer lain ingin menambah fitur lain, seperti menambahkan fitur search pada suatu website, namun karena takut akan menimbulkan bugs pada branch Master (terkadang suatu program memiliki dua atau lebih versi yang selalu dikerjakan, masing-masing versi ini disebut branch, e.g Windows 7 ultimate edition merupakan branch dari Windows 7 Master, branch akan hilang jika dimerge dengan branch lainnya) maka developer ini akan membuat branch baru dengan nama Search, sang developer me-<em>clone</em>\\\\u00a0(meng-copy source code branch Master) branch Master lalu menambahkan fitur search, sehingga proses development branch Master masih bisa terus dilakukan oleh developer yang lain. Jika penambahan fitur search sudah melewati tahap testing dan Q&amp;A, maka branch Search akan dimerge dengan branch Master.</li><li>Begitu seterusnya pada penambahan fitur-fitur yang lain.\\\\u00a0</li><li>Misalkan ada permintaan untuk membuat program yang mirip dengan branch Master, maka para developer tinggal membuat branch baru dengan me-clone branch Master, seperti yang bisa dilihat pada garis biru muda diatas. \\\\u00a0</li></ol><p>\\\\u00a0\\\\u00a0</p><h4>Contoh Menggunakan GitHub</h4><p>GitHub merupakan salah satu VCS yang paling banyak digunakan, bahkan Linux menggunakan GitHub sebagai VCS-nya. Namun sebenarnya GitHub bukanlah sebuah VCS, tetapi merupakan\\\\u00a0<em>hub\\\\u00a0</em>(tempat berkumpul/konsolidasi dari berbagai project yang menggunakan Git) dari\\\\u00a0<em>Git</em>. Nah Git inilah yang merupakan VCS-nya, GitHub memfasilitasi Git agar lebih mudah digunakan dan juga penambahan fitur-fitur lainnya. Sebelum kita mulai, Git bertipe decentrallized atau distributed, setiap developer memiliki local repository yang berada pada PC-nya, setiap revisi akan dicatat terlebih dahulu di repository local tersebut, developer tersebut bebas menentukan apakah data repository local diupload ke repository remote (GitHub) atau tidak, tidak ada yang bertindak sebagai server utama repository, semua data repository ada pada seluruh client. Walaupun kesannya GitHub memiliki server utama (i.e. repository yang berada di GitHub), tetapi sebenarnya sama saja dengan repository local pada PC kita, hanya saja berada di cloud (<em>remote</em>).\\\\u00a0</p><p>1. Install\\\\u00a0<a href=\\\\\\\"https://windows.github.com/\\\\\\\">GitHub for Windows</a></p><p>2. Buat Account\\\\u00a0<a href=\\\\\\\"https://github.com/\\\\\\\">GitHub</a></p><p>3. Buat repository baru di GitHub, bisa dilakukan melalui GitHub for Windows atau di websitenya.</p><p>4. Buat folder baru di PC anda, buatlah file .txt yang berisi</p>\\\"}, {\\\"type\\\": \\\"full_image\\\", \\\"value\\\": 32}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>5. Commit adalah command untuk memerintahkan Git untuk memeriksa apakah ada file yang berubah atau tidak, jika ada maka akan terbuat revisi baru dan dicatat ke repository local kita, dalam kata lain Commit adalah untuk membuat revisi baru.</p><p>6. Selanjutnya buka Git Shell lalu navigasi ke folder yang anda buat.</p><p>7. Git mengharuskan kita mengubah folder yang kita ingin integrasikan VCS menjadi kompatibel dengan Git, yaitu dengan mengetikkan command\\\\u00a0<em>git init</em>.</p>\\\"}, {\\\"type\\\": \\\"full_image\\\", \\\"value\\\": 33}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>8. Maka folder test sudah menjadi folder\\\\u00a0<em>Git</em>. Namun kita masih perlu menambah file mana saja yang ingin diperiksa/monitor pada saat commit, maka kita ketikkan command\\\\u00a0<em>git add test.txt</em>.</p>\\\"}, {\\\"type\\\": \\\"full_image\\\", \\\"value\\\": 34}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Kode +1 ~0 -0 adalah perbandingan isi dari folder Git kita dengan repository local, sedangkan kode itu sendiri artinya, +1 bahwa ada 1 file baru yang muncul pada folder Git kita(test.txt). ~0 bahwa tidak ada file yang dimodifikasi, dan -0 tidak ada file yang didelete. Warna merah menandakan untuk file yang belum di<em>add</em>\\\\u00a0atau di\\\\u00a0<em>track</em>\\\\u00a0oleh Git, sedangkan Hijau sudah, oleh karena itu sebelum test.txt di\\\\u00a0<em>add</em>\\\\u00a0kode \\\\u00a0berwarna merah. Coba kalian buat file txt baru lalu jalankan perintah\\\\u00a0<em>git status</em>, maka akan ada 2 kode yang sama namun warna yang berbeda. Kode ini membandingkan status folder Git kita terhadap repository local kita, +1 ~0 -0 menandakan bahwa sekarang memiliki 1 file baru dibandingkan dengan repository local kita (repository kita masih kosong, karena kita belum pernah commit). Untuk melihat lebih detailnya kita bisa gunakan command\\\\u00a0<em>git status</em></p>\\\"}, {\\\"type\\\": \\\"full_image\\\", \\\"value\\\": 35}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>10. Terlihat Changes to be commited ialah test.txt, cocok dengan kode +1 ~0 -0 yang tadi, selanjutnya kita commit\\\\u00a0dengan menggunakan command\\\\u00a0<em>git commit -m \\\\\\\"&lt;pesan commit&gt;\\\\\\\"</em></p>\\\"}, {\\\"type\\\": \\\"full_image\\\", \\\"value\\\": null}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>11. Setelah melakukan commit maka kode akan hilang, artinya folder kita sekarang sama dengan repository local kita. Selanjutnya kita upload atau\\\\u00a0<em>push</em>\\\\u00a0repository local kita ke remote repository. Command\\\\u00a0<em>git remote add origin https://github.com/&lt;username&gt;/repository_name.git</em>\\\\u00a0berguna untuk menyimpan url repository kita yang dinamakan origin, jadi nantinya kita tidak perlu repot menulis ulang url setiap\\\\u00a0<em>push</em>. Lalu kita gunakan command\\\\u00a0<em>git push origin master,\\\\u00a0</em>yang artinya kita me-upload repository local kita ke branch master origin.</p>\\\"}, {\\\"type\\\": \\\"full_image\\\", \\\"value\\\": null}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>12. Cek apakah repository remote (GitHub) sudah sama dengan repository local kita.</p>\\\"}, {\\\"type\\\": \\\"full_image\\\", \\\"value\\\": null}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>13. Repository remote sudah sama dengan repository local. So far kita sudah berhasil commit ke repository local dan me-uploadnya ke repository remote. Selanjutnya kita coba untuk mengambil repository remote. Anggap saja kita berada pada PC yang lain, buat folder baru dan lakukan\\\\u00a0<em>git init</em>\\\\u00a0untuk mengubahnya menjadi folder Git. Karena kita sekarang berada pada folder Git yang masih baru, maka kita harus menambahkan origin lagi. Setelah itu, command untuk meng-copy/mengambil isi dari repository remote adalah\\\\u00a0<em>git pull origin master,\\\\u00a0</em>yang artinya ambil atau tarik branch master di origin. Setelah itu cek apakah ada file test.txt</p>\\\"}, {\\\"type\\\": \\\"full_image\\\", \\\"value\\\": null}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>14. Yup, file test.txt berhasil kita dapatkan. Sebagai gambaran, kita memiliki 3 repository, PC developer A, PC developer B, dan repository di GitHub, semuanya memiliki file dan isi yang sama. Contoh dalam pembuatan web, ganti saja peran PC developer B menjadi hostingan, sehingga proses development hanya terjadi di PC kita atau bahkan di device manapun (kita tinggal pull saja repository remote), peran hostingan hanya untuk menarik atau\\\\u00a0<em>pull</em>\\\\u00a0perubahan yang sudah kita\\\\u00a0<em>push</em>\\\\u00a0ke remote repository/GitHub, kita tidak perlu mengupload manual file yang kita ubah, cukup dengan 2 command semua file yang anda ubah akan otomatis terupload, dan dilengkapi dengan fitur VCS, seperti rollback ke revisi sebelumnya, atau merge dengan hasil kerja dari developer lain.</p>\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<h3>Kesimpulan</h3><p>Penggunaan VCS bagi saya merupakan hal yang mutlak untuk project skala menengah-besar, keuntungan yang didapatkan dengan menggunakan VCS jauh lebih banyak dibandingkan dengan usaha yang dibutuhkan untuk menerapkan dan mempelajarinya. All-in-all menurut saya mempelajari VCS adalah kewajiban bagi setiap mahasiswa yang ingin terjun ke dunia pemograman.</p>\\\"}]\", \"live\": true, \"thumbnail_image\": 30, \"has_unpublished_changes\": false, \"related_post\": \"[]\", \"main_img_disc\": \"\", \"angular_url\": \"version-control-system-menggunakan-github\", \"title_extended\": \"\", \"numchild\": 0, \"content_type\": 34, \"show_in_menus\": false, \"date\": \"2015-06-30\", \"path\": \"000100010001000B\", \"url_path\": \"/home/blog/version-control-system-menggunakan-github/\", \"expired\": false, \"pk\": 16, \"categories\": \"[{\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Software\\\"}]\", \"main_image\": 30, \"locked\": false, \"author\": \"Abirafdi Raditya Putra\", \"depth\": 4, \"first_published_at\": \"2015-08-14T06:34:56.123Z\", \"expire_at\": null}", "user": 1, "page": 16}, "model": "wagtailcore.pagerevision", "pk": 116}, {"fields": {"approved_go_live_at": null, "created_at": "2015-08-15T00:23:34.917Z", "submitted_for_moderation": false, "content_json": "{\"search_description\": \"\", \"owner\": 1, \"intro\": \"<p>Version Control System adalah sebuah software manajemen perubahan (revisi/versioning) pada source code, program komputer, website, maupun dokumen dan file-file lainnya. Setiap revisi akan dicatat di sebuah<em>repository\\u00a0</em>secara detail, yaitu mencakup\\u00a0waktu revisinya, siapa yang melakukan revisinya, dan file yang diubah itu sendiri</p>\", \"latest_revision_created_at\": \"2015-08-15T00:22:56.290Z\", \"main_background_image\": null, \"go_live_at\": null, \"title\": \"Version Control System Menggunakan GitHub\", \"seo_title\": \"\", \"slug\": \"version-control-system-menggunakan-github\", \"content\": \"[{\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Version Control System adalah sebuah software manajemen perubahan (revisi/versioning) pada source code, program komputer, website, maupun dokumen dan file-file lainnya. Setiap revisi akan dicatat di sebuah<em>repository\\\\u00a0</em>secara detail, yaitu mencakup\\\\u00a0waktu revisinya, siapa yang melakukan revisinya, dan file yang diubah itu sendiri.\\\\u00a0VCS memungkinkan kita kembali ke revisi atau versi sebelumnya dan juga memungkinkan dua developer atau lebih bekerja pada\\\\u00a0<em>file\\\\u00a0</em>atau project\\\\u00a0yang sama, yang nantinya hasil pekerjaan dua developer tersebut akan digabung (merge) secara otomatis oleh VCS.\\\\u00a0</p><p>\\\\u00a0\\\\u00a0</p><p></p><h4>Keuntungan menggunakan VCS</h4><ul><li>Perubahan pada source code terdokumentasi secara detail dan rapih.</li><li>Peningkatan produktivitas karena memungkinkan dua atau lebih developer bekerja pada project dan juga file yang sama. (conflict bisa saja terjadi i.e. dua developer mengubah line yang sama pada suatu file, conflict ini nantinya harus diselesaikan secara manual pada saat penggabungan/merge)</li><li>Kemudahan kembali ke versi sebelumnya.</li><li>Peningkatan portabilitas source code kita. Source code kita dengan mudah kita dapatkan dimana saja dengan menggunakan VCS yang sudah memiliki remote repository (i.e. repository yang berada di cloud), kita juga bisa memilih revisi/branch mana yang kita ingin dapatkan.\\\\u00a0</li></ul><p><br/></p><h4>Workflow</h4>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"salah satu pattern version control. image credit @ronaldwidha\\\"}, {\\\"type\\\": \\\"full_image\\\", \\\"value\\\": 31}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<ol><li>Project dimulai, source code utama diwarnai biru tua. Source code utama biasanya disebut Trunk atau Master. Master merupakan versi paling stabil dari project kita.</li><li>Kemudian developer lain ingin menambah fitur lain, seperti menambahkan fitur search pada suatu website, namun karena takut akan menimbulkan bugs pada branch Master (terkadang suatu program memiliki dua atau lebih versi yang selalu dikerjakan, masing-masing versi ini disebut branch, e.g Windows 7 ultimate edition merupakan branch dari Windows 7 Master, branch akan hilang jika dimerge dengan branch lainnya) maka developer ini akan membuat branch baru dengan nama Search, sang developer me-<em>clone</em>\\\\u00a0(meng-copy source code branch Master) branch Master lalu menambahkan fitur search, sehingga proses development branch Master masih bisa terus dilakukan oleh developer yang lain. Jika penambahan fitur search sudah melewati tahap testing dan Q&amp;A, maka branch Search akan dimerge dengan branch Master.</li><li>Begitu seterusnya pada penambahan fitur-fitur yang lain.\\\\u00a0</li><li>Misalkan ada permintaan untuk membuat program yang mirip dengan branch Master, maka para developer tinggal membuat branch baru dengan me-clone branch Master, seperti yang bisa dilihat pada garis biru muda diatas. \\\\u00a0</li></ol><p>\\\\u00a0\\\\u00a0</p><h4>Contoh Menggunakan GitHub</h4><p>GitHub merupakan salah satu VCS yang paling banyak digunakan, bahkan Linux menggunakan GitHub sebagai VCS-nya. Namun sebenarnya GitHub bukanlah sebuah VCS, tetapi merupakan\\\\u00a0<em>hub\\\\u00a0</em>(tempat berkumpul/konsolidasi dari berbagai project yang menggunakan Git) dari\\\\u00a0<em>Git</em>. Nah Git inilah yang merupakan VCS-nya, GitHub memfasilitasi Git agar lebih mudah digunakan dan juga penambahan fitur-fitur lainnya. Sebelum kita mulai, Git bertipe decentrallized atau distributed, setiap developer memiliki local repository yang berada pada PC-nya, setiap revisi akan dicatat terlebih dahulu di repository local tersebut, developer tersebut bebas menentukan apakah data repository local diupload ke repository remote (GitHub) atau tidak, tidak ada yang bertindak sebagai server utama repository, semua data repository ada pada seluruh client. Walaupun kesannya GitHub memiliki server utama (i.e. repository yang berada di GitHub), tetapi sebenarnya sama saja dengan repository local pada PC kita, hanya saja berada di cloud (<em>remote</em>).\\\\u00a0</p><p>1. Install\\\\u00a0<a href=\\\\\\\"https://windows.github.com/\\\\\\\">GitHub for Windows</a></p><p>2. Buat Account\\\\u00a0<a href=\\\\\\\"https://github.com/\\\\\\\">GitHub</a></p><p>3. Buat repository baru di GitHub, bisa dilakukan melalui GitHub for Windows atau di websitenya.</p><p>4. Buat folder baru di PC anda, buatlah file .txt yang berisi</p>\\\"}, {\\\"type\\\": \\\"full_image\\\", \\\"value\\\": 32}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>5. Commit adalah command untuk memerintahkan Git untuk memeriksa apakah ada file yang berubah atau tidak, jika ada maka akan terbuat revisi baru dan dicatat ke repository local kita, dalam kata lain Commit adalah untuk membuat revisi baru.</p><p>6. Selanjutnya buka Git Shell lalu navigasi ke folder yang anda buat.</p><p>7. Git mengharuskan kita mengubah folder yang kita ingin integrasikan VCS menjadi kompatibel dengan Git, yaitu dengan mengetikkan command\\\\u00a0<em>git init</em>.</p>\\\"}, {\\\"type\\\": \\\"full_image\\\", \\\"value\\\": 33}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>8. Maka folder test sudah menjadi folder\\\\u00a0<em>Git</em>. Namun kita masih perlu menambah file mana saja yang ingin diperiksa/monitor pada saat commit, maka kita ketikkan command\\\\u00a0<em>git add test.txt</em>.</p>\\\"}, {\\\"type\\\": \\\"full_image\\\", \\\"value\\\": 34}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>9.\\\\u00a0Kode +1 ~0 -0 adalah perbandingan isi dari folder Git kita dengan repository local, sedangkan kode itu sendiri artinya, +1 bahwa ada 1 file baru yang muncul pada folder Git kita(test.txt). ~0 bahwa tidak ada file yang dimodifikasi, dan -0 tidak ada file yang didelete. Warna merah menandakan untuk file yang belum di<em>add</em>\\\\u00a0atau di\\\\u00a0<em>track</em>\\\\u00a0oleh Git, sedangkan Hijau sudah, oleh karena itu sebelum test.txt di\\\\u00a0<em>add</em>\\\\u00a0kode \\\\u00a0berwarna merah. Coba kalian buat file txt baru lalu jalankan perintah\\\\u00a0<em>git status</em>, maka akan ada 2 kode yang sama namun warna yang berbeda. Kode ini membandingkan status folder Git kita terhadap repository local kita, +1 ~0 -0 menandakan bahwa sekarang memiliki 1 file baru dibandingkan dengan repository local kita (repository kita masih kosong, karena kita belum pernah commit). Untuk melihat lebih detailnya kita bisa gunakan command\\\\u00a0<em>git status</em></p>\\\"}, {\\\"type\\\": \\\"full_image\\\", \\\"value\\\": 35}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>10. Terlihat Changes to be commited ialah test.txt, cocok dengan kode +1 ~0 -0 yang tadi, selanjutnya kita commit\\\\u00a0dengan menggunakan command\\\\u00a0<em>git commit -m \\\\\\\"&lt;pesan commit&gt;\\\\\\\"</em></p>\\\"}, {\\\"type\\\": \\\"full_image\\\", \\\"value\\\": null}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>11. Setelah melakukan commit maka kode akan hilang, artinya folder kita sekarang sama dengan repository local kita. Selanjutnya kita upload atau\\\\u00a0<em>push</em>\\\\u00a0repository local kita ke remote repository. Command\\\\u00a0<em>git remote add origin https://github.com/&lt;username&gt;/repository_name.git</em>\\\\u00a0berguna untuk menyimpan url repository kita yang dinamakan origin, jadi nantinya kita tidak perlu repot menulis ulang url setiap\\\\u00a0<em>push</em>. Lalu kita gunakan command\\\\u00a0<em>git push origin master,\\\\u00a0</em>yang artinya kita me-upload repository local kita ke branch master origin.</p>\\\"}, {\\\"type\\\": \\\"full_image\\\", \\\"value\\\": null}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>12. Cek apakah repository remote (GitHub) sudah sama dengan repository local kita.</p>\\\"}, {\\\"type\\\": \\\"full_image\\\", \\\"value\\\": null}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>13. Repository remote sudah sama dengan repository local. So far kita sudah berhasil commit ke repository local dan me-uploadnya ke repository remote. Selanjutnya kita coba untuk mengambil repository remote. Anggap saja kita berada pada PC yang lain, buat folder baru dan lakukan\\\\u00a0<em>git init</em>\\\\u00a0untuk mengubahnya menjadi folder Git. Karena kita sekarang berada pada folder Git yang masih baru, maka kita harus menambahkan origin lagi. Setelah itu, command untuk meng-copy/mengambil isi dari repository remote adalah\\\\u00a0<em>git pull origin master,\\\\u00a0</em>yang artinya ambil atau tarik branch master di origin. Setelah itu cek apakah ada file test.txt</p>\\\"}, {\\\"type\\\": \\\"full_image\\\", \\\"value\\\": null}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>14. Yup, file test.txt berhasil kita dapatkan. Sebagai gambaran, kita memiliki 3 repository, PC developer A, PC developer B, dan repository di GitHub, semuanya memiliki file dan isi yang sama. Contoh dalam pembuatan web, ganti saja peran PC developer B menjadi hostingan, sehingga proses development hanya terjadi di PC kita atau bahkan di device manapun (kita tinggal pull saja repository remote), peran hostingan hanya untuk menarik atau\\\\u00a0<em>pull</em>\\\\u00a0perubahan yang sudah kita\\\\u00a0<em>push</em>\\\\u00a0ke remote repository/GitHub, kita tidak perlu mengupload manual file yang kita ubah, cukup dengan 2 command semua file yang anda ubah akan otomatis terupload, dan dilengkapi dengan fitur VCS, seperti rollback ke revisi sebelumnya, atau merge dengan hasil kerja dari developer lain.</p>\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<h3>Kesimpulan</h3><p>Penggunaan VCS bagi saya merupakan hal yang mutlak untuk project skala menengah-besar, keuntungan yang didapatkan dengan menggunakan VCS jauh lebih banyak dibandingkan dengan usaha yang dibutuhkan untuk menerapkan dan mempelajarinya. All-in-all menurut saya mempelajari VCS adalah kewajiban bagi setiap mahasiswa yang ingin terjun ke dunia pemograman.</p>\\\"}]\", \"live\": true, \"thumbnail_image\": 30, \"has_unpublished_changes\": false, \"related_post\": \"[]\", \"main_img_disc\": \"\", \"angular_url\": \"version-control-system-menggunakan-github\", \"title_extended\": \"\", \"numchild\": 0, \"content_type\": 34, \"show_in_menus\": false, \"date\": \"2015-06-30\", \"path\": \"000100010001000B\", \"url_path\": \"/home/blog/version-control-system-menggunakan-github/\", \"expired\": false, \"pk\": 16, \"categories\": \"[{\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Software\\\"}]\", \"main_image\": 30, \"locked\": false, \"author\": \"Abirafdi Raditya Putra\", \"depth\": 4, \"first_published_at\": \"2015-08-14T06:34:56.123Z\", \"expire_at\": null}", "user": 1, "page": 16}, "model": "wagtailcore.pagerevision", "pk": 117}, {"fields": {"approved_go_live_at": null, "created_at": "2015-08-15T00:24:06.463Z", "submitted_for_moderation": false, "content_json": "{\"search_description\": \"\", \"owner\": 1, \"intro\": \"<p>Version Control System adalah sebuah software manajemen perubahan (revisi/versioning) pada source code, program komputer, website, maupun dokumen dan file-file lainnya. Setiap revisi akan dicatat di sebuah<em>repository\\u00a0</em>secara detail, yaitu mencakup\\u00a0waktu revisinya, siapa yang melakukan revisinya, dan file yang diubah itu sendiri</p>\", \"latest_revision_created_at\": \"2015-08-15T00:23:34.917Z\", \"main_background_image\": null, \"go_live_at\": null, \"title\": \"Version Control System Menggunakan GitHub\", \"seo_title\": \"\", \"slug\": \"version-control-system-menggunakan-github\", \"content\": \"[{\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Version Control System adalah sebuah software manajemen perubahan (revisi/versioning) pada source code, program komputer, website, maupun dokumen dan file-file lainnya. Setiap revisi akan dicatat di sebuah<em>repository\\\\u00a0</em>secara detail, yaitu mencakup\\\\u00a0waktu revisinya, siapa yang melakukan revisinya, dan file yang diubah itu sendiri.\\\\u00a0VCS memungkinkan kita kembali ke revisi atau versi sebelumnya dan juga memungkinkan dua developer atau lebih bekerja pada\\\\u00a0<em>file\\\\u00a0</em>atau project\\\\u00a0yang sama, yang nantinya hasil pekerjaan dua developer tersebut akan digabung (merge) secara otomatis oleh VCS.\\\\u00a0</p><p>\\\\u00a0\\\\u00a0</p><p></p><h4>Keuntungan menggunakan VCS</h4><ul><li>Perubahan pada source code terdokumentasi secara detail dan rapih.</li><li>Peningkatan produktivitas karena memungkinkan dua atau lebih developer bekerja pada project dan juga file yang sama. (conflict bisa saja terjadi i.e. dua developer mengubah line yang sama pada suatu file, conflict ini nantinya harus diselesaikan secara manual pada saat penggabungan/merge)</li><li>Kemudahan kembali ke versi sebelumnya.</li><li>Peningkatan portabilitas source code kita. Source code kita dengan mudah kita dapatkan dimana saja dengan menggunakan VCS yang sudah memiliki remote repository (i.e. repository yang berada di cloud), kita juga bisa memilih revisi/branch mana yang kita ingin dapatkan.\\\\u00a0</li></ul><p><br/></p><h4>Workflow</h4>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"salah satu pattern version control. image credit @ronaldwidha\\\"}, {\\\"type\\\": \\\"full_image\\\", \\\"value\\\": 31}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<ol><li>Project dimulai, source code utama diwarnai biru tua. Source code utama biasanya disebut Trunk atau Master. Master merupakan versi paling stabil dari project kita.</li><li>Kemudian developer lain ingin menambah fitur lain, seperti menambahkan fitur search pada suatu website, namun karena takut akan menimbulkan bugs pada branch Master (terkadang suatu program memiliki dua atau lebih versi yang selalu dikerjakan, masing-masing versi ini disebut branch, e.g Windows 7 ultimate edition merupakan branch dari Windows 7 Master, branch akan hilang jika dimerge dengan branch lainnya) maka developer ini akan membuat branch baru dengan nama Search, sang developer me-<em>clone</em>\\\\u00a0(meng-copy source code branch Master) branch Master lalu menambahkan fitur search, sehingga proses development branch Master masih bisa terus dilakukan oleh developer yang lain. Jika penambahan fitur search sudah melewati tahap testing dan Q&amp;A, maka branch Search akan dimerge dengan branch Master.</li><li>Begitu seterusnya pada penambahan fitur-fitur yang lain.\\\\u00a0</li><li>Misalkan ada permintaan untuk membuat program yang mirip dengan branch Master, maka para developer tinggal membuat branch baru dengan me-clone branch Master, seperti yang bisa dilihat pada garis biru muda diatas. \\\\u00a0</li></ol><p>\\\\u00a0\\\\u00a0</p><h4>Contoh Menggunakan GitHub</h4><p>GitHub merupakan salah satu VCS yang paling banyak digunakan, bahkan Linux menggunakan GitHub sebagai VCS-nya. Namun sebenarnya GitHub bukanlah sebuah VCS, tetapi merupakan\\\\u00a0<em>hub\\\\u00a0</em>(tempat berkumpul/konsolidasi dari berbagai project yang menggunakan Git) dari\\\\u00a0<em>Git</em>. Nah Git inilah yang merupakan VCS-nya, GitHub memfasilitasi Git agar lebih mudah digunakan dan juga penambahan fitur-fitur lainnya. Sebelum kita mulai, Git bertipe decentrallized atau distributed, setiap developer memiliki local repository yang berada pada PC-nya, setiap revisi akan dicatat terlebih dahulu di repository local tersebut, developer tersebut bebas menentukan apakah data repository local diupload ke repository remote (GitHub) atau tidak, tidak ada yang bertindak sebagai server utama repository, semua data repository ada pada seluruh client. Walaupun kesannya GitHub memiliki server utama (i.e. repository yang berada di GitHub), tetapi sebenarnya sama saja dengan repository local pada PC kita, hanya saja berada di cloud (<em>remote</em>).\\\\u00a0</p><p>1. Install\\\\u00a0<a href=\\\\\\\"https://windows.github.com/\\\\\\\">GitHub for Windows</a></p><p>2. Buat Account\\\\u00a0<a href=\\\\\\\"https://github.com/\\\\\\\">GitHub</a></p><p>3. Buat repository baru di GitHub, bisa dilakukan melalui GitHub for Windows atau di websitenya.</p><p>4. Buat folder baru di PC anda, buatlah file .txt yang berisi</p>\\\"}, {\\\"type\\\": \\\"full_image\\\", \\\"value\\\": 32}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>5. Commit adalah command untuk memerintahkan Git untuk memeriksa apakah ada file yang berubah atau tidak, jika ada maka akan terbuat revisi baru dan dicatat ke repository local kita, dalam kata lain Commit adalah untuk membuat revisi baru.</p><p>6. Selanjutnya buka Git Shell lalu navigasi ke folder yang anda buat.</p><p>7. Git mengharuskan kita mengubah folder yang kita ingin integrasikan VCS menjadi kompatibel dengan Git, yaitu dengan mengetikkan command\\\\u00a0<em>git init</em>.</p>\\\"}, {\\\"type\\\": \\\"full_image\\\", \\\"value\\\": 33}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>8. Maka folder test sudah menjadi folder\\\\u00a0<em>Git</em>. Namun kita masih perlu menambah file mana saja yang ingin diperiksa/monitor pada saat commit, maka kita ketikkan command\\\\u00a0<em>git add test.txt</em>.</p>\\\"}, {\\\"type\\\": \\\"full_image\\\", \\\"value\\\": 34}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>9.\\\\u00a0Kode +1 ~0 -0 adalah perbandingan isi dari folder Git kita dengan repository local, sedangkan kode itu sendiri artinya, +1 bahwa ada 1 file baru yang muncul pada folder Git kita(test.txt). ~0 bahwa tidak ada file yang dimodifikasi, dan -0 tidak ada file yang didelete. Warna merah menandakan untuk file yang belum di<em>add</em>\\\\u00a0atau di\\\\u00a0<em>track</em>\\\\u00a0oleh Git, sedangkan Hijau sudah, oleh karena itu sebelum test.txt di\\\\u00a0<em>add</em>\\\\u00a0kode \\\\u00a0berwarna merah. Coba kalian buat file txt baru lalu jalankan perintah\\\\u00a0<em>git status</em>, maka akan ada 2 kode yang sama namun warna yang berbeda. Kode ini membandingkan status folder Git kita terhadap repository local kita, +1 ~0 -0 menandakan bahwa sekarang memiliki 1 file baru dibandingkan dengan repository local kita (repository kita masih kosong, karena kita belum pernah commit). Untuk melihat lebih detailnya kita bisa gunakan command\\\\u00a0<em>git status</em></p>\\\"}, {\\\"type\\\": \\\"full_image\\\", \\\"value\\\": 35}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>10. Terlihat Changes to be commited ialah test.txt, cocok dengan kode +1 ~0 -0 yang tadi, selanjutnya kita commit\\\\u00a0dengan menggunakan command\\\\u00a0<em>git commit -m \\\\\\\"&lt;pesan commit&gt;\\\\\\\"</em></p>\\\"}, {\\\"type\\\": \\\"full_image\\\", \\\"value\\\": 36}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>11. Setelah melakukan commit maka kode akan hilang, artinya folder kita sekarang sama dengan repository local kita. Selanjutnya kita upload atau\\\\u00a0<em>push</em>\\\\u00a0repository local kita ke remote repository. Command\\\\u00a0<em>git remote add origin https://github.com/&lt;username&gt;/repository_name.git</em>\\\\u00a0berguna untuk menyimpan url repository kita yang dinamakan origin, jadi nantinya kita tidak perlu repot menulis ulang url setiap\\\\u00a0<em>push</em>. Lalu kita gunakan command\\\\u00a0<em>git push origin master,\\\\u00a0</em>yang artinya kita me-upload repository local kita ke branch master origin.</p>\\\"}, {\\\"type\\\": \\\"full_image\\\", \\\"value\\\": 37}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>12. Cek apakah repository remote (GitHub) sudah sama dengan repository local kita.</p>\\\"}, {\\\"type\\\": \\\"full_image\\\", \\\"value\\\": 38}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>13. Repository remote sudah sama dengan repository local. So far kita sudah berhasil commit ke repository local dan me-uploadnya ke repository remote. Selanjutnya kita coba untuk mengambil repository remote. Anggap saja kita berada pada PC yang lain, buat folder baru dan lakukan\\\\u00a0<em>git init</em>\\\\u00a0untuk mengubahnya menjadi folder Git. Karena kita sekarang berada pada folder Git yang masih baru, maka kita harus menambahkan origin lagi. Setelah itu, command untuk meng-copy/mengambil isi dari repository remote adalah\\\\u00a0<em>git pull origin master,\\\\u00a0</em>yang artinya ambil atau tarik branch master di origin. Setelah itu cek apakah ada file test.txt</p>\\\"}, {\\\"type\\\": \\\"full_image\\\", \\\"value\\\": 39}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>14. Yup, file test.txt berhasil kita dapatkan. Sebagai gambaran, kita memiliki 3 repository, PC developer A, PC developer B, dan repository di GitHub, semuanya memiliki file dan isi yang sama. Contoh dalam pembuatan web, ganti saja peran PC developer B menjadi hostingan, sehingga proses development hanya terjadi di PC kita atau bahkan di device manapun (kita tinggal pull saja repository remote), peran hostingan hanya untuk menarik atau\\\\u00a0<em>pull</em>\\\\u00a0perubahan yang sudah kita\\\\u00a0<em>push</em>\\\\u00a0ke remote repository/GitHub, kita tidak perlu mengupload manual file yang kita ubah, cukup dengan 2 command semua file yang anda ubah akan otomatis terupload, dan dilengkapi dengan fitur VCS, seperti rollback ke revisi sebelumnya, atau merge dengan hasil kerja dari developer lain.</p>\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<h3>Kesimpulan</h3><p>Penggunaan VCS bagi saya merupakan hal yang mutlak untuk project skala menengah-besar, keuntungan yang didapatkan dengan menggunakan VCS jauh lebih banyak dibandingkan dengan usaha yang dibutuhkan untuk menerapkan dan mempelajarinya. All-in-all menurut saya mempelajari VCS adalah kewajiban bagi setiap mahasiswa yang ingin terjun ke dunia pemograman.</p>\\\"}]\", \"live\": true, \"thumbnail_image\": 30, \"has_unpublished_changes\": false, \"related_post\": \"[]\", \"main_img_disc\": \"\", \"angular_url\": \"version-control-system-menggunakan-github\", \"title_extended\": \"\", \"numchild\": 0, \"content_type\": 34, \"show_in_menus\": false, \"date\": \"2015-06-30\", \"path\": \"000100010001000B\", \"url_path\": \"/home/blog/version-control-system-menggunakan-github/\", \"expired\": false, \"pk\": 16, \"categories\": \"[{\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Software\\\"}]\", \"main_image\": 30, \"locked\": false, \"author\": \"Abirafdi Raditya Putra\", \"depth\": 4, \"first_published_at\": \"2015-08-14T06:34:56.123Z\", \"expire_at\": null}", "user": 1, "page": 16}, "model": "wagtailcore.pagerevision", "pk": 118}, {"fields": {"approved_go_live_at": null, "created_at": "2015-08-15T00:39:39.680Z", "submitted_for_moderation": false, "content_json": "{\"search_description\": \"\", \"owner\": 1, \"intro\": \"<p>Version Control System adalah sebuah software manajemen perubahan (revisi/versioning) pada source code, program komputer, website, maupun dokumen dan file-file lainnya. Setiap revisi akan dicatat di sebuah<em>repository\\u00a0</em>secara detail, yaitu mencakup\\u00a0waktu revisinya, siapa yang melakukan revisinya, dan file yang diubah itu sendiri</p>\", \"latest_revision_created_at\": \"2015-08-15T00:24:06.463Z\", \"main_background_image\": null, \"go_live_at\": null, \"title\": \"Version Control System Menggunakan GitHub\", \"seo_title\": \"\", \"slug\": \"version-control-system-menggunakan-github\", \"content\": \"[{\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Version Control System adalah sebuah software manajemen perubahan (revisi/versioning) pada source code, program komputer, website, maupun dokumen dan file-file lainnya. Setiap revisi akan dicatat di sebuah<em>repository\\\\u00a0</em>secara detail, yaitu mencakup\\\\u00a0waktu revisinya, siapa yang melakukan revisinya, dan file yang diubah itu sendiri.\\\\u00a0VCS memungkinkan kita kembali ke revisi atau versi sebelumnya dan juga memungkinkan dua developer atau lebih bekerja pada\\\\u00a0<em>file\\\\u00a0</em>atau project\\\\u00a0yang sama, yang nantinya hasil pekerjaan dua developer tersebut akan digabung (merge) secara otomatis oleh VCS.\\\\u00a0</p><p>\\\\u00a0\\\\u00a0</p><p></p><h4>Keuntungan menggunakan VCS</h4><ul><li>Perubahan pada source code terdokumentasi secara detail dan rapih.</li><li>Peningkatan produktivitas karena memungkinkan dua atau lebih developer bekerja pada project dan juga file yang sama. (conflict bisa saja terjadi i.e. dua developer mengubah line yang sama pada suatu file, conflict ini nantinya harus diselesaikan secara manual pada saat penggabungan/merge)</li><li>Kemudahan kembali ke versi sebelumnya.</li><li>Peningkatan portabilitas source code kita. Source code kita dengan mudah kita dapatkan dimana saja dengan menggunakan VCS yang sudah memiliki remote repository (i.e. repository yang berada di cloud), kita juga bisa memilih revisi/branch mana yang kita ingin dapatkan.\\\\u00a0</li></ul><p><br/></p><h4>Workflow</h4>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"salah satu pattern version control. image credit @ronaldwidha\\\"}, {\\\"type\\\": \\\"full_image\\\", \\\"value\\\": 31}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<ol><li>Project dimulai, source code utama diwarnai biru tua. Source code utama biasanya disebut Trunk atau Master. Master merupakan versi paling stabil dari project kita.</li><li>Kemudian developer lain ingin menambah fitur lain, seperti menambahkan fitur search pada suatu website, namun karena takut akan menimbulkan bugs pada branch Master (terkadang suatu program memiliki dua atau lebih versi yang selalu dikerjakan, masing-masing versi ini disebut branch, e.g Windows 7 ultimate edition merupakan branch dari Windows 7 Master, branch akan hilang jika dimerge dengan branch lainnya) maka developer ini akan membuat branch baru dengan nama Search, sang developer me-<em>clone</em>\\\\u00a0(meng-copy source code branch Master) branch Master lalu menambahkan fitur search, sehingga proses development branch Master masih bisa terus dilakukan oleh developer yang lain. Jika penambahan fitur search sudah melewati tahap testing dan Q&amp;A, maka branch Search akan dimerge dengan branch Master.</li><li>Begitu seterusnya pada penambahan fitur-fitur yang lain.\\\\u00a0</li><li>Misalkan ada permintaan untuk membuat program yang mirip dengan branch Master, maka para developer tinggal membuat branch baru dengan me-clone branch Master, seperti yang bisa dilihat pada garis biru muda diatas. \\\\u00a0</li></ol><p>\\\\u00a0\\\\u00a0</p><h4>Contoh Menggunakan GitHub</h4><p>GitHub merupakan salah satu VCS yang paling banyak digunakan, bahkan Linux menggunakan GitHub sebagai VCS-nya. Namun sebenarnya GitHub bukanlah sebuah VCS, tetapi merupakan\\\\u00a0<em>hub\\\\u00a0</em>(tempat berkumpul/konsolidasi dari berbagai project yang menggunakan Git) dari\\\\u00a0<em>Git</em>. Nah Git inilah yang merupakan VCS-nya, GitHub memfasilitasi Git agar lebih mudah digunakan dan juga penambahan fitur-fitur lainnya. Sebelum kita mulai, Git bertipe decentrallized atau distributed, setiap developer memiliki local repository yang berada pada PC-nya, setiap revisi akan dicatat terlebih dahulu di repository local tersebut, developer tersebut bebas menentukan apakah data repository local diupload ke repository remote (GitHub) atau tidak, tidak ada yang bertindak sebagai server utama repository, semua data repository ada pada seluruh client. Walaupun kesannya GitHub memiliki server utama (i.e. repository yang berada di GitHub), tetapi sebenarnya sama saja dengan repository local pada PC kita, hanya saja berada di cloud (<em>remote</em>).\\\\u00a0</p><p>1. Install\\\\u00a0<a href=\\\\\\\"https://windows.github.com/\\\\\\\">GitHub for Windows</a></p><p>2. Buat Account\\\\u00a0<a href=\\\\\\\"https://github.com/\\\\\\\">GitHub</a></p><p>3. Buat repository baru di GitHub, bisa dilakukan melalui GitHub for Windows atau di websitenya.</p><p>4. Buat folder baru di PC anda, buatlah file .txt yang berisi</p>\\\"}, {\\\"type\\\": \\\"full_image\\\", \\\"value\\\": 32}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>5. Commit adalah command untuk memerintahkan Git untuk memeriksa apakah ada file yang berubah atau tidak, jika ada maka akan terbuat revisi baru dan dicatat ke repository local kita, dalam kata lain Commit adalah untuk membuat revisi baru.</p><p>6. Selanjutnya buka Git Shell lalu navigasi ke folder yang anda buat.</p><p>7. Git mengharuskan kita mengubah folder yang kita ingin integrasikan VCS menjadi kompatibel dengan Git, yaitu dengan mengetikkan command\\\\u00a0<em>git init</em>.</p>\\\"}, {\\\"type\\\": \\\"full_image\\\", \\\"value\\\": 33}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>8. Maka folder test sudah menjadi folder\\\\u00a0<em>Git</em>. Namun kita masih perlu menambah file mana saja yang ingin diperiksa/monitor pada saat commit, maka kita ketikkan command\\\\u00a0<em>git add test.txt</em>.</p>\\\"}, {\\\"type\\\": \\\"full_image\\\", \\\"value\\\": 34}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>9.\\\\u00a0Kode +1 ~0 -0 adalah perbandingan isi dari folder Git kita dengan repository local, sedangkan kode itu sendiri artinya, +1 bahwa ada 1 file baru yang muncul pada folder Git kita(test.txt). ~0 bahwa tidak ada file yang dimodifikasi, dan -0 tidak ada file yang didelete. Warna merah menandakan untuk file yang belum di<em>add</em>\\\\u00a0atau di\\\\u00a0<em>track</em>\\\\u00a0oleh Git, sedangkan Hijau sudah, oleh karena itu sebelum test.txt di\\\\u00a0<em>add</em>\\\\u00a0kode \\\\u00a0berwarna merah. Coba kalian buat file txt baru lalu jalankan perintah\\\\u00a0<em>git status</em>, maka akan ada 2 kode yang sama namun warna yang berbeda. Kode ini membandingkan status folder Git kita terhadap repository local kita, +1 ~0 -0 menandakan bahwa sekarang memiliki 1 file baru dibandingkan dengan repository local kita (repository kita masih kosong, karena kita belum pernah commit). Untuk melihat lebih detailnya kita bisa gunakan command\\\\u00a0<em>git status</em></p>\\\"}, {\\\"type\\\": \\\"full_image\\\", \\\"value\\\": 35}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>10. Terlihat Changes to be commited ialah test.txt, cocok dengan kode +1 ~0 -0 yang tadi, selanjutnya kita commit\\\\u00a0dengan menggunakan command\\\\u00a0<em>git commit -m \\\\\\\"&lt;pesan commit&gt;\\\\\\\"</em></p>\\\"}, {\\\"type\\\": \\\"full_image\\\", \\\"value\\\": 36}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>11. Setelah melakukan commit maka kode akan hilang, artinya folder kita sekarang sama dengan repository local kita. Selanjutnya kita upload atau\\\\u00a0<em>push</em>\\\\u00a0repository local kita ke remote repository. Command\\\\u00a0<em>git remote add origin https://github.com/&lt;username&gt;/repository_name.git</em>\\\\u00a0berguna untuk menyimpan url repository kita yang dinamakan origin, jadi nantinya kita tidak perlu repot menulis ulang url setiap\\\\u00a0<em>push</em>. Lalu kita gunakan command\\\\u00a0<em>git push origin master,\\\\u00a0</em>yang artinya kita me-upload repository local kita ke branch master origin.</p>\\\"}, {\\\"type\\\": \\\"full_image\\\", \\\"value\\\": 37}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>12. Cek apakah repository remote (GitHub) sudah sama dengan repository local kita.</p>\\\"}, {\\\"type\\\": \\\"full_image\\\", \\\"value\\\": 38}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>13. Repository remote sudah sama dengan repository local. So far kita sudah berhasil commit ke repository local dan me-uploadnya ke repository remote. Selanjutnya kita coba untuk mengambil repository remote. Anggap saja kita berada pada PC yang lain, buat folder baru dan lakukan\\\\u00a0<em>git init</em>\\\\u00a0untuk mengubahnya menjadi folder Git. Karena kita sekarang berada pada folder Git yang masih baru, maka kita harus menambahkan origin lagi. Setelah itu, command untuk meng-copy/mengambil isi dari repository remote adalah\\\\u00a0<em>git pull origin master,\\\\u00a0</em>yang artinya ambil atau tarik branch master di origin. Setelah itu cek apakah ada file test.txt</p>\\\"}, {\\\"type\\\": \\\"full_image\\\", \\\"value\\\": 39}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>14. Yup, file test.txt berhasil kita dapatkan. Sebagai gambaran, kita memiliki 3 repository, PC developer A, PC developer B, dan repository di GitHub, semuanya memiliki file dan isi yang sama. Contoh dalam pembuatan web, ganti saja peran PC developer B menjadi hostingan, sehingga proses development hanya terjadi di PC kita atau bahkan di device manapun (kita tinggal pull saja repository remote), peran hostingan hanya untuk menarik atau\\\\u00a0<em>pull</em>\\\\u00a0perubahan yang sudah kita\\\\u00a0<em>push</em>\\\\u00a0ke remote repository/GitHub, kita tidak perlu mengupload manual file yang kita ubah, cukup dengan 2 command semua file yang anda ubah akan otomatis terupload, dan dilengkapi dengan fitur VCS, seperti rollback ke revisi sebelumnya, atau merge dengan hasil kerja dari developer lain.</p>\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<h3>Kesimpulan</h3><p>Penggunaan VCS bagi saya merupakan hal yang mutlak untuk project skala menengah-besar, keuntungan yang didapatkan dengan menggunakan VCS jauh lebih banyak dibandingkan dengan usaha yang dibutuhkan untuk menerapkan dan mempelajarinya. All-in-all menurut saya mempelajari VCS adalah kewajiban bagi setiap mahasiswa yang ingin terjun ke dunia pemograman.</p>\\\"}]\", \"live\": true, \"thumbnail_image\": 30, \"has_unpublished_changes\": false, \"related_post\": \"[]\", \"main_img_disc\": \"\", \"angular_url\": \"version-control-system-menggunakan-github\", \"title_extended\": \"\", \"numchild\": 0, \"content_type\": 34, \"show_in_menus\": false, \"date\": \"2015-06-30\", \"path\": \"000100010001000B\", \"url_path\": \"/home/blog/version-control-system-menggunakan-github/\", \"expired\": false, \"pk\": 16, \"categories\": \"[{\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Software\\\"}]\", \"main_image\": 30, \"locked\": false, \"author\": \"Abirafdi Raditya Putra\", \"depth\": 4, \"first_published_at\": \"2015-08-14T06:34:56.123Z\", \"expire_at\": null}", "user": 1, "page": 16}, "model": "wagtailcore.pagerevision", "pk": 119}, {"fields": {"approved_go_live_at": null, "created_at": "2015-08-15T00:40:08.707Z", "submitted_for_moderation": false, "content_json": "{\"search_description\": \"\", \"owner\": 1, \"intro\": \"<p>Version Control System adalah sebuah software manajemen perubahan (revisi/versioning) pada source code, program komputer, website, maupun dokumen dan file-file lainnya. Setiap revisi akan dicatat di sebuah<em>repository\\u00a0</em>secara detail, yaitu mencakup\\u00a0waktu revisinya, siapa yang melakukan revisinya, dan file yang diubah itu sendiri</p>\", \"latest_revision_created_at\": \"2015-08-15T00:39:39.680Z\", \"main_background_image\": null, \"go_live_at\": null, \"title\": \"Version Control System Menggunakan GitHub\", \"seo_title\": \"\", \"slug\": \"version-control-system-menggunakan-github\", \"content\": \"[{\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Version Control System adalah sebuah software manajemen perubahan (revisi/versioning) pada source code, program komputer, website, maupun dokumen dan file-file lainnya. Setiap revisi akan dicatat di sebuah<em>repository\\\\u00a0</em>secara detail, yaitu mencakup\\\\u00a0waktu revisinya, siapa yang melakukan revisinya, dan file yang diubah itu sendiri.\\\\u00a0VCS memungkinkan kita kembali ke revisi atau versi sebelumnya dan juga memungkinkan dua developer atau lebih bekerja pada\\\\u00a0<em>file\\\\u00a0</em>atau project\\\\u00a0yang sama, yang nantinya hasil pekerjaan dua developer tersebut akan digabung (merge) secara otomatis oleh VCS.\\\\u00a0</p><p>\\\\u00a0\\\\u00a0</p><p></p><h4>Keuntungan menggunakan VCS</h4><ul><li>Perubahan pada source code terdokumentasi secara detail dan rapih.</li><li>Peningkatan produktivitas karena memungkinkan dua atau lebih developer bekerja pada project dan juga file yang sama. (conflict bisa saja terjadi i.e. dua developer mengubah line yang sama pada suatu file, conflict ini nantinya harus diselesaikan secara manual pada saat penggabungan/merge)</li><li>Kemudahan kembali ke versi sebelumnya.</li><li>Peningkatan portabilitas source code kita. Source code kita dengan mudah kita dapatkan dimana saja dengan menggunakan VCS yang sudah memiliki remote repository (i.e. repository yang berada di cloud), kita juga bisa memilih revisi/branch mana yang kita ingin dapatkan.\\\\u00a0</li></ul><p><br/></p><h4>Workflow</h4>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"salah satu pattern version control. image credit @ronaldwidha\\\"}, {\\\"type\\\": \\\"full_image\\\", \\\"value\\\": 31}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<ol><li>Project dimulai, source code utama diwarnai biru tua. Source code utama biasanya disebut Trunk atau Master. Master merupakan versi paling stabil dari project kita.</li><li>Kemudian developer lain ingin menambah fitur lain, seperti menambahkan fitur search pada suatu website, namun karena takut akan menimbulkan bugs pada branch Master (terkadang suatu program memiliki dua atau lebih versi yang selalu dikerjakan, masing-masing versi ini disebut branch, e.g Windows 7 ultimate edition merupakan branch dari Windows 7 Master, branch akan hilang jika dimerge dengan branch lainnya) maka developer ini akan membuat branch baru dengan nama Search, sang developer me-<em>clone</em>\\\\u00a0(meng-copy source code branch Master) branch Master lalu menambahkan fitur search, sehingga proses development branch Master masih bisa terus dilakukan oleh developer yang lain. Jika penambahan fitur search sudah melewati tahap testing dan Q&amp;A, maka branch Search akan dimerge dengan branch Master.</li><li>Begitu seterusnya pada penambahan fitur-fitur yang lain.\\\\u00a0</li><li>Misalkan ada permintaan untuk membuat program yang mirip dengan branch Master, maka para developer tinggal membuat branch baru dengan me-clone branch Master, seperti yang bisa dilihat pada garis biru muda diatas. \\\\u00a0</li></ol><p>\\\\u00a0\\\\u00a0</p><h4>Contoh Menggunakan GitHub</h4><p>GitHub merupakan salah satu VCS yang paling banyak digunakan, bahkan Linux menggunakan GitHub sebagai VCS-nya. Namun sebenarnya GitHub bukanlah sebuah VCS, tetapi merupakan\\\\u00a0<em>hub\\\\u00a0</em>(tempat berkumpul/konsolidasi dari berbagai project yang menggunakan Git) dari\\\\u00a0<em>Git</em>. Nah Git inilah yang merupakan VCS-nya, GitHub memfasilitasi Git agar lebih mudah digunakan dan juga penambahan fitur-fitur lainnya. Sebelum kita mulai, Git bertipe decentrallized atau distributed, setiap developer memiliki local repository yang berada pada PC-nya, setiap revisi akan dicatat terlebih dahulu di repository local tersebut, developer tersebut bebas menentukan apakah data repository local diupload ke repository remote (GitHub) atau tidak, tidak ada yang bertindak sebagai server utama repository, semua data repository ada pada seluruh client. Walaupun kesannya GitHub memiliki server utama (i.e. repository yang berada di GitHub), tetapi sebenarnya sama saja dengan repository local pada PC kita, hanya saja berada di cloud (<em>remote</em>).\\\\u00a0</p><p>1. Install\\\\u00a0<a href=\\\\\\\"https://windows.github.com/\\\\\\\">GitHub for Windows</a></p><p>2. Buat Account\\\\u00a0<a href=\\\\\\\"https://github.com/\\\\\\\">GitHub</a></p><p>3. Buat repository baru di GitHub, bisa dilakukan melalui GitHub for Windows atau di websitenya.</p><p>4. Buat folder baru di PC anda, buatlah file .txt yang berisi</p>\\\"}, {\\\"type\\\": \\\"full_image\\\", \\\"value\\\": 32}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>5. Commit adalah command untuk memerintahkan Git untuk memeriksa apakah ada file yang berubah atau tidak, jika ada maka akan terbuat revisi baru dan dicatat ke repository local kita, dalam kata lain Commit adalah untuk membuat revisi baru.</p><p>6. Selanjutnya buka Git Shell lalu navigasi ke folder yang anda buat.</p><p>7. Git mengharuskan kita mengubah folder yang kita ingin integrasikan VCS menjadi kompatibel dengan Git, yaitu dengan mengetikkan command\\\\u00a0<em>git init</em>.</p>\\\"}, {\\\"type\\\": \\\"full_image\\\", \\\"value\\\": 33}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>8. Maka folder test sudah menjadi folder\\\\u00a0<em>Git</em>. Namun kita masih perlu menambah file mana saja yang ingin diperiksa/monitor pada saat commit, maka kita ketikkan command\\\\u00a0<em>git add test.txt</em>.</p>\\\"}, {\\\"type\\\": \\\"full_image\\\", \\\"value\\\": 34}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>9.\\\\u00a0Kode +1 ~0 -0 adalah perbandingan isi dari folder Git kita dengan repository local, sedangkan kode itu sendiri artinya, +1 bahwa ada 1 file baru yang muncul pada folder Git kita(test.txt). ~0 bahwa tidak ada file yang dimodifikasi, dan -0 tidak ada file yang didelete. Warna merah menandakan untuk file yang belum di<em>add</em>\\\\u00a0atau di\\\\u00a0<em>track</em>\\\\u00a0oleh Git, sedangkan Hijau sudah, oleh karena itu sebelum test.txt di\\\\u00a0<em>add</em>\\\\u00a0kode \\\\u00a0berwarna merah. Coba kalian buat file txt baru lalu jalankan perintah\\\\u00a0<em>git status</em>, maka akan ada 2 kode yang sama namun warna yang berbeda. Kode ini membandingkan status folder Git kita terhadap repository local kita, +1 ~0 -0 menandakan bahwa sekarang memiliki 1 file baru dibandingkan dengan repository local kita (repository kita masih kosong, karena kita belum pernah commit). Untuk melihat lebih detailnya kita bisa gunakan command\\\\u00a0<em>git status</em></p>\\\"}, {\\\"type\\\": \\\"full_image\\\", \\\"value\\\": 35}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>10. Terlihat Changes to be commited ialah test.txt, cocok dengan kode +1 ~0 -0 yang tadi, selanjutnya kita commit\\\\u00a0dengan menggunakan command\\\\u00a0<em>git commit -m \\\\\\\"&lt;pesan commit&gt;\\\\\\\"</em></p>\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>11. Setelah melakukan commit maka kode akan hilang, artinya folder kita sekarang sama dengan repository local kita. Selanjutnya kita upload atau\\\\u00a0<em>push</em>\\\\u00a0repository local kita ke remote repository. Command\\\\u00a0<em>git remote add origin https://github.com/&lt;username&gt;/repository_name.git</em>\\\\u00a0berguna untuk menyimpan url repository kita yang dinamakan origin, jadi nantinya kita tidak perlu repot menulis ulang url setiap\\\\u00a0<em>push</em>. Lalu kita gunakan command\\\\u00a0<em>git push origin master,\\\\u00a0</em>yang artinya kita me-upload repository local kita ke branch master origin.</p>\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>12. Cek apakah repository remote (GitHub) sudah sama dengan repository local kita.</p>\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>13. Repository remote sudah sama dengan repository local. So far kita sudah berhasil commit ke repository local dan me-uploadnya ke repository remote. Selanjutnya kita coba untuk mengambil repository remote. Anggap saja kita berada pada PC yang lain, buat folder baru dan lakukan\\\\u00a0<em>git init</em>\\\\u00a0untuk mengubahnya menjadi folder Git. Karena kita sekarang berada pada folder Git yang masih baru, maka kita harus menambahkan origin lagi. Setelah itu, command untuk meng-copy/mengambil isi dari repository remote adalah\\\\u00a0<em>git pull origin master,\\\\u00a0</em>yang artinya ambil atau tarik branch master di origin. Setelah itu cek apakah ada file test.txt</p>\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>14. Yup, file test.txt berhasil kita dapatkan. Sebagai gambaran, kita memiliki 3 repository, PC developer A, PC developer B, dan repository di GitHub, semuanya memiliki file dan isi yang sama. Contoh dalam pembuatan web, ganti saja peran PC developer B menjadi hostingan, sehingga proses development hanya terjadi di PC kita atau bahkan di device manapun (kita tinggal pull saja repository remote), peran hostingan hanya untuk menarik atau\\\\u00a0<em>pull</em>\\\\u00a0perubahan yang sudah kita\\\\u00a0<em>push</em>\\\\u00a0ke remote repository/GitHub, kita tidak perlu mengupload manual file yang kita ubah, cukup dengan 2 command semua file yang anda ubah akan otomatis terupload, dan dilengkapi dengan fitur VCS, seperti rollback ke revisi sebelumnya, atau merge dengan hasil kerja dari developer lain.</p>\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<h3>Kesimpulan</h3><p>Penggunaan VCS bagi saya merupakan hal yang mutlak untuk project skala menengah-besar, keuntungan yang didapatkan dengan menggunakan VCS jauh lebih banyak dibandingkan dengan usaha yang dibutuhkan untuk menerapkan dan mempelajarinya. All-in-all menurut saya mempelajari VCS adalah kewajiban bagi setiap mahasiswa yang ingin terjun ke dunia pemograman.</p>\\\"}]\", \"live\": true, \"thumbnail_image\": 30, \"has_unpublished_changes\": false, \"related_post\": \"[]\", \"main_img_disc\": \"\", \"angular_url\": \"version-control-system-menggunakan-github\", \"title_extended\": \"\", \"numchild\": 0, \"content_type\": 34, \"show_in_menus\": false, \"date\": \"2015-06-30\", \"path\": \"000100010001000B\", \"url_path\": \"/home/blog/version-control-system-menggunakan-github/\", \"expired\": false, \"pk\": 16, \"categories\": \"[{\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Software\\\"}]\", \"main_image\": 30, \"locked\": false, \"author\": \"Abirafdi Raditya Putra\", \"depth\": 4, \"first_published_at\": \"2015-08-14T06:34:56.123Z\", \"expire_at\": null}", "user": 1, "page": 16}, "model": "wagtailcore.pagerevision", "pk": 120}, {"fields": {"approved_go_live_at": null, "created_at": "2015-08-15T00:41:10.954Z", "submitted_for_moderation": false, "content_json": "{\"search_description\": \"\", \"owner\": 1, \"intro\": \"<p>Version Control System adalah sebuah software manajemen perubahan (revisi/versioning) pada source code, program komputer, website, maupun dokumen dan file-file lainnya. Setiap revisi akan dicatat di sebuah<em>repository\\u00a0</em>secara detail, yaitu mencakup\\u00a0waktu revisinya, siapa yang melakukan revisinya, dan file yang diubah itu sendiri</p>\", \"latest_revision_created_at\": \"2015-08-15T00:40:08.707Z\", \"main_background_image\": null, \"go_live_at\": null, \"title\": \"Version Control System Menggunakan GitHub\", \"seo_title\": \"\", \"slug\": \"version-control-system-menggunakan-github\", \"content\": \"[{\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Version Control System adalah sebuah software manajemen perubahan (revisi/versioning) pada source code, program komputer, website, maupun dokumen dan file-file lainnya. Setiap revisi akan dicatat di sebuah<em>repository\\\\u00a0</em>secara detail, yaitu mencakup\\\\u00a0waktu revisinya, siapa yang melakukan revisinya, dan file yang diubah itu sendiri.\\\\u00a0VCS memungkinkan kita kembali ke revisi atau versi sebelumnya dan juga memungkinkan dua developer atau lebih bekerja pada\\\\u00a0<em>file\\\\u00a0</em>atau project\\\\u00a0yang sama, yang nantinya hasil pekerjaan dua developer tersebut akan digabung (merge) secara otomatis oleh VCS.\\\\u00a0</p><p>\\\\u00a0\\\\u00a0</p><p></p><h4>Keuntungan menggunakan VCS</h4><ul><li>Perubahan pada source code terdokumentasi secara detail dan rapih.</li><li>Peningkatan produktivitas karena memungkinkan dua atau lebih developer bekerja pada project dan juga file yang sama. (conflict bisa saja terjadi i.e. dua developer mengubah line yang sama pada suatu file, conflict ini nantinya harus diselesaikan secara manual pada saat penggabungan/merge)</li><li>Kemudahan kembali ke versi sebelumnya.</li><li>Peningkatan portabilitas source code kita. Source code kita dengan mudah kita dapatkan dimana saja dengan menggunakan VCS yang sudah memiliki remote repository (i.e. repository yang berada di cloud), kita juga bisa memilih revisi/branch mana yang kita ingin dapatkan.\\\\u00a0</li></ul><p><br/></p><h4>Workflow</h4>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"salah satu pattern version control. image credit @ronaldwidha\\\"}, {\\\"type\\\": \\\"full_image\\\", \\\"value\\\": 31}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<ol><li>Project dimulai, source code utama diwarnai biru tua. Source code utama biasanya disebut Trunk atau Master. Master merupakan versi paling stabil dari project kita.</li><li>Kemudian developer lain ingin menambah fitur lain, seperti menambahkan fitur search pada suatu website, namun karena takut akan menimbulkan bugs pada branch Master (terkadang suatu program memiliki dua atau lebih versi yang selalu dikerjakan, masing-masing versi ini disebut branch, e.g Windows 7 ultimate edition merupakan branch dari Windows 7 Master, branch akan hilang jika dimerge dengan branch lainnya) maka developer ini akan membuat branch baru dengan nama Search, sang developer me-<em>clone</em>\\\\u00a0(meng-copy source code branch Master) branch Master lalu menambahkan fitur search, sehingga proses development branch Master masih bisa terus dilakukan oleh developer yang lain. Jika penambahan fitur search sudah melewati tahap testing dan Q&amp;A, maka branch Search akan dimerge dengan branch Master.</li><li>Begitu seterusnya pada penambahan fitur-fitur yang lain.\\\\u00a0</li><li>Misalkan ada permintaan untuk membuat program yang mirip dengan branch Master, maka para developer tinggal membuat branch baru dengan me-clone branch Master, seperti yang bisa dilihat pada garis biru muda diatas. \\\\u00a0</li></ol><p>\\\\u00a0\\\\u00a0</p><h4>Contoh Menggunakan GitHub</h4><p>GitHub merupakan salah satu VCS yang paling banyak digunakan, bahkan Linux menggunakan GitHub sebagai VCS-nya. Namun sebenarnya GitHub bukanlah sebuah VCS, tetapi merupakan\\\\u00a0<em>hub\\\\u00a0</em>(tempat berkumpul/konsolidasi dari berbagai project yang menggunakan Git) dari\\\\u00a0<em>Git</em>. Nah Git inilah yang merupakan VCS-nya, GitHub memfasilitasi Git agar lebih mudah digunakan dan juga penambahan fitur-fitur lainnya. Sebelum kita mulai, Git bertipe decentrallized atau distributed, setiap developer memiliki local repository yang berada pada PC-nya, setiap revisi akan dicatat terlebih dahulu di repository local tersebut, developer tersebut bebas menentukan apakah data repository local diupload ke repository remote (GitHub) atau tidak, tidak ada yang bertindak sebagai server utama repository, semua data repository ada pada seluruh client. Walaupun kesannya GitHub memiliki server utama (i.e. repository yang berada di GitHub), tetapi sebenarnya sama saja dengan repository local pada PC kita, hanya saja berada di cloud (<em>remote</em>).\\\\u00a0</p><p>1. Install\\\\u00a0<a href=\\\\\\\"https://windows.github.com/\\\\\\\">GitHub for Windows</a></p><p>2. Buat Account\\\\u00a0<a href=\\\\\\\"https://github.com/\\\\\\\">GitHub</a></p><p>3. Buat repository baru di GitHub, bisa dilakukan melalui GitHub for Windows atau di websitenya.</p><p>4. Buat folder baru di PC anda, buatlah file .txt yang berisi</p>\\\"}, {\\\"type\\\": \\\"full_image\\\", \\\"value\\\": 32}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>5. Commit adalah command untuk memerintahkan Git untuk memeriksa apakah ada file yang berubah atau tidak, jika ada maka akan terbuat revisi baru dan dicatat ke repository local kita, dalam kata lain Commit adalah untuk membuat revisi baru.</p><p>6. Selanjutnya buka Git Shell lalu navigasi ke folder yang anda buat.</p><p>7. Git mengharuskan kita mengubah folder yang kita ingin integrasikan VCS menjadi kompatibel dengan Git, yaitu dengan mengetikkan command\\\\u00a0<em>git init</em>.</p>\\\"}, {\\\"type\\\": \\\"full_image\\\", \\\"value\\\": 33}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>8. Maka folder test sudah menjadi folder\\\\u00a0<em>Git</em>. Namun kita masih perlu menambah file mana saja yang ingin diperiksa/monitor pada saat commit, maka kita ketikkan command\\\\u00a0<em>git add test.txt</em>.</p>\\\"}, {\\\"type\\\": \\\"full_image\\\", \\\"value\\\": 34}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>9.\\\\u00a0Kode +1 ~0 -0 adalah perbandingan isi dari folder Git kita dengan repository local, sedangkan kode itu sendiri artinya, +1 bahwa ada 1 file baru yang muncul pada folder Git kita(test.txt). ~0 bahwa tidak ada file yang dimodifikasi, dan -0 tidak ada file yang didelete. Warna merah menandakan untuk file yang belum di<em>add</em>\\\\u00a0atau di\\\\u00a0<em>track</em>\\\\u00a0oleh Git, sedangkan Hijau sudah, oleh karena itu sebelum test.txt di\\\\u00a0<em>add</em>\\\\u00a0kode \\\\u00a0berwarna merah. Coba kalian buat file txt baru lalu jalankan perintah\\\\u00a0<em>git status</em>, maka akan ada 2 kode yang sama namun warna yang berbeda. Kode ini membandingkan status folder Git kita terhadap repository local kita, +1 ~0 -0 menandakan bahwa sekarang memiliki 1 file baru dibandingkan dengan repository local kita (repository kita masih kosong, karena kita belum pernah commit). Untuk melihat lebih detailnya kita bisa gunakan command\\\\u00a0<em>git status</em></p>\\\"}, {\\\"type\\\": \\\"full_image\\\", \\\"value\\\": 35}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>10. Terlihat Changes to be commited ialah test.txt, cocok dengan kode +1 ~0 -0 yang tadi, selanjutnya kita commit\\\\u00a0dengan menggunakan command\\\\u00a0<em>git commit -m \\\\\\\"&lt;pesan commit&gt;\\\\\\\"</em></p>\\\"}, {\\\"type\\\": \\\"full_image\\\", \\\"value\\\": 36}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>11. Setelah melakukan commit maka kode akan hilang, artinya folder kita sekarang sama dengan repository local kita. Selanjutnya kita upload atau\\\\u00a0<em>push</em>\\\\u00a0repository local kita ke remote repository. Command\\\\u00a0<em>git remote add origin https://github.com/&lt;username&gt;/repository_name.git</em>\\\\u00a0berguna untuk menyimpan url repository kita yang dinamakan origin, jadi nantinya kita tidak perlu repot menulis ulang url setiap\\\\u00a0<em>push</em>. Lalu kita gunakan command\\\\u00a0<em>git push origin master,\\\\u00a0</em>yang artinya kita me-upload repository local kita ke branch master origin.</p>\\\"}, {\\\"type\\\": \\\"full_image\\\", \\\"value\\\": 37}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>12. Cek apakah repository remote (GitHub) sudah sama dengan repository local kita.</p>\\\"}, {\\\"type\\\": \\\"full_image\\\", \\\"value\\\": 38}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>13. Repository remote sudah sama dengan repository local. So far kita sudah berhasil commit ke repository local dan me-uploadnya ke repository remote. Selanjutnya kita coba untuk mengambil repository remote. Anggap saja kita berada pada PC yang lain, buat folder baru dan lakukan\\\\u00a0<em>git init</em>\\\\u00a0untuk mengubahnya menjadi folder Git. Karena kita sekarang berada pada folder Git yang masih baru, maka kita harus menambahkan origin lagi. Setelah itu, command untuk meng-copy/mengambil isi dari repository remote adalah\\\\u00a0<em>git pull origin master,\\\\u00a0</em>yang artinya ambil atau tarik branch master di origin. Setelah itu cek apakah ada file test.txt</p>\\\"}, {\\\"type\\\": \\\"full_image\\\", \\\"value\\\": 39}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>14. Yup, file test.txt berhasil kita dapatkan. Sebagai gambaran, kita memiliki 3 repository, PC developer A, PC developer B, dan repository di GitHub, semuanya memiliki file dan isi yang sama. Contoh dalam pembuatan web, ganti saja peran PC developer B menjadi hostingan, sehingga proses development hanya terjadi di PC kita atau bahkan di device manapun (kita tinggal pull saja repository remote), peran hostingan hanya untuk menarik atau\\\\u00a0<em>pull</em>\\\\u00a0perubahan yang sudah kita\\\\u00a0<em>push</em>\\\\u00a0ke remote repository/GitHub, kita tidak perlu mengupload manual file yang kita ubah, cukup dengan 2 command semua file yang anda ubah akan otomatis terupload, dan dilengkapi dengan fitur VCS, seperti rollback ke revisi sebelumnya, atau merge dengan hasil kerja dari developer lain.</p>\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<h3>Kesimpulan</h3><p>Penggunaan VCS bagi saya merupakan hal yang mutlak untuk project skala menengah-besar, keuntungan yang didapatkan dengan menggunakan VCS jauh lebih banyak dibandingkan dengan usaha yang dibutuhkan untuk menerapkan dan mempelajarinya. All-in-all menurut saya mempelajari VCS adalah kewajiban bagi setiap mahasiswa yang ingin terjun ke dunia pemograman.</p>\\\"}]\", \"live\": true, \"thumbnail_image\": 30, \"has_unpublished_changes\": false, \"related_post\": \"[]\", \"main_img_disc\": \"\", \"angular_url\": \"version-control-system-menggunakan-github\", \"title_extended\": \"\", \"numchild\": 0, \"content_type\": 34, \"show_in_menus\": false, \"date\": \"2015-06-30\", \"path\": \"000100010001000B\", \"url_path\": \"/home/blog/version-control-system-menggunakan-github/\", \"expired\": false, \"pk\": 16, \"categories\": \"[{\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Software\\\"}]\", \"main_image\": 30, \"locked\": false, \"author\": \"Abirafdi Raditya Putra\", \"depth\": 4, \"first_published_at\": \"2015-08-14T06:34:56.123Z\", \"expire_at\": null}", "user": 1, "page": 16}, "model": "wagtailcore.pagerevision", "pk": 121}, {"fields": {"approved_go_live_at": null, "created_at": "2015-08-15T00:49:56.281Z", "submitted_for_moderation": false, "content_json": "{\"search_description\": \"\", \"owner\": 1, \"intro\": \"<p>Version Control System adalah sebuah software manajemen perubahan (revisi/versioning) pada source code, program komputer, website, maupun dokumen dan file-file lainnya. Setiap revisi akan dicatat di sebuah<em>repository\\u00a0</em>secara detail, yaitu mencakup\\u00a0waktu revisinya, siapa yang melakukan revisinya, dan file yang diubah itu sendiri</p>\", \"latest_revision_created_at\": \"2015-08-15T00:41:10.954Z\", \"main_background_image\": null, \"go_live_at\": null, \"title\": \"Version Control System Menggunakan GitHub\", \"seo_title\": \"\", \"slug\": \"version-control-system-menggunakan-github\", \"content\": \"[{\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Version Control System adalah sebuah software manajemen perubahan (revisi/versioning) pada source code, program komputer, website, maupun dokumen dan file-file lainnya. Setiap revisi akan dicatat di sebuah<em>repository\\\\u00a0</em>secara detail, yaitu mencakup\\\\u00a0waktu revisinya, siapa yang melakukan revisinya, dan file yang diubah itu sendiri.\\\\u00a0VCS memungkinkan kita kembali ke revisi atau versi sebelumnya dan juga memungkinkan dua developer atau lebih bekerja pada\\\\u00a0<em>file\\\\u00a0</em>atau project\\\\u00a0yang sama, yang nantinya hasil pekerjaan dua developer tersebut akan digabung (merge) secara otomatis oleh VCS.\\\\u00a0</p><p>\\\\u00a0\\\\u00a0</p><p></p><h4>Keuntungan menggunakan VCS</h4><ul><li>Perubahan pada source code terdokumentasi secara detail dan rapih.</li><li>Peningkatan produktivitas karena memungkinkan dua atau lebih developer bekerja pada project dan juga file yang sama. (conflict bisa saja terjadi i.e. dua developer mengubah line yang sama pada suatu file, conflict ini nantinya harus diselesaikan secara manual pada saat penggabungan/merge)</li><li>Kemudahan kembali ke versi sebelumnya.</li><li>Peningkatan portabilitas source code kita. Source code kita dengan mudah kita dapatkan dimana saja dengan menggunakan VCS yang sudah memiliki remote repository (i.e. repository yang berada di cloud), kita juga bisa memilih revisi/branch mana yang kita ingin dapatkan.\\\\u00a0</li></ul><p><br/></p><h4>Workflow</h4>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"salah satu pattern version control. image credit @ronaldwidha\\\"}, {\\\"type\\\": \\\"full_image\\\", \\\"value\\\": 31}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<ol><li>Project dimulai, source code utama diwarnai biru tua. Source code utama biasanya disebut Trunk atau Master. Master merupakan versi paling stabil dari project kita.</li><li>Kemudian developer lain ingin menambah fitur lain, seperti menambahkan fitur search pada suatu website, namun karena takut akan menimbulkan bugs pada branch Master (terkadang suatu program memiliki dua atau lebih versi yang selalu dikerjakan, masing-masing versi ini disebut branch, e.g Windows 7 ultimate edition merupakan branch dari Windows 7 Master, branch akan hilang jika dimerge dengan branch lainnya) maka developer ini akan membuat branch baru dengan nama Search, sang developer me-<em>clone</em>\\\\u00a0(meng-copy source code branch Master) branch Master lalu menambahkan fitur search, sehingga proses development branch Master masih bisa terus dilakukan oleh developer yang lain. Jika penambahan fitur search sudah melewati tahap testing dan Q&amp;A, maka branch Search akan dimerge dengan branch Master.</li><li>Begitu seterusnya pada penambahan fitur-fitur yang lain.\\\\u00a0</li><li>Misalkan ada permintaan untuk membuat program yang mirip dengan branch Master, maka para developer tinggal membuat branch baru dengan me-clone branch Master, seperti yang bisa dilihat pada garis biru muda diatas. \\\\u00a0</li></ol><p>\\\\u00a0\\\\u00a0</p><h4>Contoh Menggunakan GitHub</h4><p>GitHub merupakan salah satu VCS yang paling banyak digunakan, bahkan Linux menggunakan GitHub sebagai VCS-nya. Namun sebenarnya GitHub bukanlah sebuah VCS, tetapi merupakan\\\\u00a0<em>hub\\\\u00a0</em>(tempat berkumpul/konsolidasi dari berbagai project yang menggunakan Git) dari\\\\u00a0<em>Git</em>. Nah Git inilah yang merupakan VCS-nya, GitHub memfasilitasi Git agar lebih mudah digunakan dan juga penambahan fitur-fitur lainnya. Sebelum kita mulai, Git bertipe decentrallized atau distributed, setiap developer memiliki local repository yang berada pada PC-nya, setiap revisi akan dicatat terlebih dahulu di repository local tersebut, developer tersebut bebas menentukan apakah data repository local diupload ke repository remote (GitHub) atau tidak, tidak ada yang bertindak sebagai server utama repository, semua data repository ada pada seluruh client. Walaupun kesannya GitHub memiliki server utama (i.e. repository yang berada di GitHub), tetapi sebenarnya sama saja dengan repository local pada PC kita, hanya saja berada di cloud (<em>remote</em>).\\\\u00a0</p><p>1. Install\\\\u00a0<a href=\\\\\\\"https://windows.github.com/\\\\\\\">GitHub for Windows</a></p><p>2. Buat Account\\\\u00a0<a href=\\\\\\\"https://github.com/\\\\\\\">GitHub</a></p><p>3. Buat repository baru di GitHub, bisa dilakukan melalui GitHub for Windows atau di websitenya.</p><p>4. Buat folder baru di PC anda, buatlah file .txt yang berisi</p>\\\"}, {\\\"type\\\": \\\"full_image\\\", \\\"value\\\": 32}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p><br/></p><p>5. Commit adalah command untuk memerintahkan Git untuk memeriksa apakah ada file yang berubah atau tidak, jika ada maka akan terbuat revisi baru dan dicatat ke repository local kita, dalam kata lain Commit adalah untuk membuat revisi baru.</p><p>6. Selanjutnya buka Git Shell lalu navigasi ke folder yang anda buat.</p><p>7. Git mengharuskan kita mengubah folder yang kita ingin integrasikan VCS menjadi kompatibel dengan Git, yaitu dengan mengetikkan command\\\\u00a0<em>git init</em>.</p>\\\"}, {\\\"type\\\": \\\"full_image\\\", \\\"value\\\": 33}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p><br/></p><p>8. Maka folder test sudah menjadi folder\\\\u00a0<em>Git</em>. Namun kita masih perlu menambah file mana saja yang ingin diperiksa/monitor pada saat commit, maka kita ketikkan command\\\\u00a0<em>git add test.txt</em>.</p>\\\"}, {\\\"type\\\": \\\"full_image\\\", \\\"value\\\": 34}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p><br/></p><p>9.\\\\u00a0Kode +1 ~0 -0 adalah perbandingan isi dari folder Git kita dengan repository local, sedangkan kode itu sendiri artinya, +1 bahwa ada 1 file baru yang muncul pada folder Git kita(test.txt). ~0 bahwa tidak ada file yang dimodifikasi, dan -0 tidak ada file yang didelete. Warna merah menandakan untuk file yang belum di<em>add</em>\\\\u00a0atau di\\\\u00a0<em>track</em>\\\\u00a0oleh Git, sedangkan Hijau sudah, oleh karena itu sebelum test.txt di\\\\u00a0<em>add</em>\\\\u00a0kode \\\\u00a0berwarna merah. Coba kalian buat file txt baru lalu jalankan perintah\\\\u00a0<em>git status</em>, maka akan ada 2 kode yang sama namun warna yang berbeda. Kode ini membandingkan status folder Git kita terhadap repository local kita, +1 ~0 -0 menandakan bahwa sekarang memiliki 1 file baru dibandingkan dengan repository local kita (repository kita masih kosong, karena kita belum pernah commit). Untuk melihat lebih detailnya kita bisa gunakan command\\\\u00a0<em>git status</em></p>\\\"}, {\\\"type\\\": \\\"full_image\\\", \\\"value\\\": 35}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p><br/></p><p>10. Terlihat Changes to be commited ialah test.txt, cocok dengan kode +1 ~0 -0 yang tadi, selanjutnya kita commit\\\\u00a0dengan menggunakan command\\\\u00a0<em>git commit -m \\\\\\\"&lt;pesan commit&gt;\\\\\\\"</em></p>\\\"}, {\\\"type\\\": \\\"full_image\\\", \\\"value\\\": 36}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p><br/></p><p>11. Setelah melakukan commit maka kode akan hilang, artinya folder kita sekarang sama dengan repository local kita. Selanjutnya kita upload atau\\\\u00a0<em>push</em>\\\\u00a0repository local kita ke remote repository. Command\\\\u00a0<em>git remote add origin https://github.com/&lt;username&gt;/repository_name.git</em>\\\\u00a0berguna untuk menyimpan url repository kita yang dinamakan origin, jadi nantinya kita tidak perlu repot menulis ulang url setiap\\\\u00a0<em>push</em>. Lalu kita gunakan command\\\\u00a0<em>git push origin master,\\\\u00a0</em>yang artinya kita me-upload repository local kita ke branch master origin.</p>\\\"}, {\\\"type\\\": \\\"full_image\\\", \\\"value\\\": 37}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p><br/></p><p>12. Cek apakah repository remote (GitHub) sudah sama dengan repository local kita.</p>\\\"}, {\\\"type\\\": \\\"full_image\\\", \\\"value\\\": 38}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p><br/></p><p>13. Repository remote sudah sama dengan repository local. So far kita sudah berhasil commit ke repository local dan me-uploadnya ke repository remote. Selanjutnya kita coba untuk mengambil repository remote. Anggap saja kita berada pada PC yang lain, buat folder baru dan lakukan\\\\u00a0<em>git init</em>\\\\u00a0untuk mengubahnya menjadi folder Git. Karena kita sekarang berada pada folder Git yang masih baru, maka kita harus menambahkan origin lagi. Setelah itu, command untuk meng-copy/mengambil isi dari repository remote adalah\\\\u00a0<em>git pull origin master,\\\\u00a0</em>yang artinya ambil atau tarik branch master di origin. Setelah itu cek apakah ada file test.txt</p>\\\"}, {\\\"type\\\": \\\"full_image\\\", \\\"value\\\": 39}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p><br/></p><p>14. Yup, file test.txt berhasil kita dapatkan. Sebagai gambaran, kita memiliki 3 repository, PC developer A, PC developer B, dan repository di GitHub, semuanya memiliki file dan isi yang sama. Contoh dalam pembuatan web, ganti saja peran PC developer B menjadi hostingan, sehingga proses development hanya terjadi di PC kita atau bahkan di device manapun (kita tinggal pull saja repository remote), peran hostingan hanya untuk menarik atau\\\\u00a0<em>pull</em>\\\\u00a0perubahan yang sudah kita\\\\u00a0<em>push</em>\\\\u00a0ke remote repository/GitHub, kita tidak perlu mengupload manual file yang kita ubah, cukup dengan 2 command semua file yang anda ubah akan otomatis terupload, dan dilengkapi dengan fitur VCS, seperti rollback ke revisi sebelumnya, atau merge dengan hasil kerja dari developer lain.</p>\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<h3>Kesimpulan</h3><p>Penggunaan VCS bagi saya merupakan hal yang mutlak untuk project skala menengah-besar, keuntungan yang didapatkan dengan menggunakan VCS jauh lebih banyak dibandingkan dengan usaha yang dibutuhkan untuk menerapkan dan mempelajarinya. All-in-all menurut saya mempelajari VCS adalah kewajiban bagi setiap mahasiswa yang ingin terjun ke dunia pemograman.</p>\\\"}]\", \"live\": true, \"thumbnail_image\": 30, \"has_unpublished_changes\": false, \"related_post\": \"[]\", \"main_img_disc\": \"\", \"angular_url\": \"version-control-system-menggunakan-github\", \"title_extended\": \"\", \"numchild\": 0, \"content_type\": 34, \"show_in_menus\": false, \"date\": \"2015-06-30\", \"path\": \"000100010001000B\", \"url_path\": \"/home/blog/version-control-system-menggunakan-github/\", \"expired\": false, \"pk\": 16, \"categories\": \"[{\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Software\\\"}]\", \"main_image\": 30, \"locked\": false, \"author\": \"Abirafdi Raditya Putra\", \"depth\": 4, \"first_published_at\": \"2015-08-14T06:34:56.123Z\", \"expire_at\": null}", "user": 1, "page": 16}, "model": "wagtailcore.pagerevision", "pk": 122}, {"fields": {"approved_go_live_at": null, "created_at": "2015-08-15T01:00:44.565Z", "submitted_for_moderation": false, "content_json": "{\"search_description\": \"\", \"owner\": 1, \"intro\": \"<p>Version Control System adalah sebuah software manajemen perubahan (revisi/versioning) pada source code, program komputer, website, maupun dokumen dan file-file lainnya. Setiap revisi akan dicatat di sebuah<em>repository\\u00a0</em>secara detail, yaitu mencakup\\u00a0waktu revisinya, siapa yang melakukan revisinya, dan file yang diubah itu sendiri</p>\", \"latest_revision_created_at\": \"2015-08-15T00:49:56.281Z\", \"main_background_image\": null, \"go_live_at\": null, \"title\": \"Version Control System Menggunakan GitHub\", \"seo_title\": \"\", \"slug\": \"version-control-system-menggunakan-github\", \"content\": \"[{\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Version Control System adalah sebuah software manajemen perubahan (revisi/versioning) pada source code, program komputer, website, maupun dokumen dan file-file lainnya. Setiap revisi akan dicatat di sebuah<em>repository\\\\u00a0</em>secara detail, yaitu mencakup\\\\u00a0waktu revisinya, siapa yang melakukan revisinya, dan file yang diubah itu sendiri.\\\\u00a0VCS memungkinkan kita kembali ke revisi atau versi sebelumnya dan juga memungkinkan dua developer atau lebih bekerja pada\\\\u00a0<em>file\\\\u00a0</em>atau project\\\\u00a0yang sama, yang nantinya hasil pekerjaan dua developer tersebut akan digabung (merge) secara otomatis oleh VCS.\\\\u00a0</p><p>\\\\u00a0\\\\u00a0</p><p></p><h4>Keuntungan menggunakan VCS</h4><ul><li>Perubahan pada source code terdokumentasi secara detail dan rapih.</li><li>Peningkatan produktivitas karena memungkinkan dua atau lebih developer bekerja pada project dan juga file yang sama. (conflict bisa saja terjadi i.e. dua developer mengubah line yang sama pada suatu file, conflict ini nantinya harus diselesaikan secara manual pada saat penggabungan/merge)</li><li>Kemudahan kembali ke versi sebelumnya.</li><li>Peningkatan portabilitas source code kita. Source code kita dengan mudah kita dapatkan dimana saja dengan menggunakan VCS yang sudah memiliki remote repository (i.e. repository yang berada di cloud), kita juga bisa memilih revisi/branch mana yang kita ingin dapatkan.\\\\u00a0</li></ul><p><br/></p><h4>Workflow</h4>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"salah satu pattern version control. image credit @ronaldwidha\\\"}, {\\\"type\\\": \\\"full_image\\\", \\\"value\\\": 31}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<ol><li>Project dimulai, source code utama diwarnai biru tua. Source code utama biasanya disebut Trunk atau Master. Master merupakan versi paling stabil dari project kita.</li><li>Kemudian developer lain ingin menambah fitur lain, seperti menambahkan fitur search pada suatu website, namun karena takut akan menimbulkan bugs pada branch Master (terkadang suatu program memiliki dua atau lebih versi yang selalu dikerjakan, masing-masing versi ini disebut branch, e.g Windows 7 ultimate edition merupakan branch dari Windows 7 Master, branch akan hilang jika dimerge dengan branch lainnya) maka developer ini akan membuat branch baru dengan nama Search, sang developer me-<em>clone</em>\\\\u00a0(meng-copy source code branch Master) branch Master lalu menambahkan fitur search, sehingga proses development branch Master masih bisa terus dilakukan oleh developer yang lain. Jika penambahan fitur search sudah melewati tahap testing dan Q&amp;A, maka branch Search akan dimerge dengan branch Master.</li><li>Begitu seterusnya pada penambahan fitur-fitur yang lain.\\\\u00a0</li><li>Misalkan ada permintaan untuk membuat program yang mirip dengan branch Master, maka para developer tinggal membuat branch baru dengan me-clone branch Master, seperti yang bisa dilihat pada garis biru muda diatas. \\\\u00a0</li></ol><p>\\\\u00a0\\\\u00a0</p><h4>Contoh Menggunakan GitHub</h4><p>GitHub merupakan salah satu VCS yang paling banyak digunakan, bahkan Linux menggunakan GitHub sebagai VCS-nya. Namun sebenarnya GitHub bukanlah sebuah VCS, tetapi merupakan\\\\u00a0<em>hub\\\\u00a0</em>(tempat berkumpul/konsolidasi dari berbagai project yang menggunakan Git) dari\\\\u00a0<em>Git</em>. Nah Git inilah yang merupakan VCS-nya, GitHub memfasilitasi Git agar lebih mudah digunakan dan juga penambahan fitur-fitur lainnya. Sebelum kita mulai, Git bertipe decentrallized atau distributed, setiap developer memiliki local repository yang berada pada PC-nya, setiap revisi akan dicatat terlebih dahulu di repository local tersebut, developer tersebut bebas menentukan apakah data repository local diupload ke repository remote (GitHub) atau tidak, tidak ada yang bertindak sebagai server utama repository, semua data repository ada pada seluruh client. Walaupun kesannya GitHub memiliki server utama (i.e. repository yang berada di GitHub), tetapi sebenarnya sama saja dengan repository local pada PC kita, hanya saja berada di cloud (<em>remote</em>).\\\\u00a0</p><p>1. Install\\\\u00a0<a href=\\\\\\\"https://windows.github.com/\\\\\\\">GitHub for Windows</a></p><p>2. Buat Account\\\\u00a0<a href=\\\\\\\"https://github.com/\\\\\\\">GitHub</a></p><p>3. Buat repository baru di GitHub, bisa dilakukan melalui di aplikasi GitHub for Windows atau di websitenya.</p><p>4. Buat folder baru di PC anda, buatlah file .txt yang berisi</p>\\\"}, {\\\"type\\\": \\\"full_image\\\", \\\"value\\\": 32}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p><br/></p><p>5. Commit adalah yang memerintahkan Git untuk memeriksa apakah ada file yang berubah atau tidak, jika ada, maka akan terbuat revisi baru dan dicatat ke repository local kita, dalam kata lain Commit digunakan untuk membuat revisi baru. (repository merupakan archive kegiatan yang kita lakukan, untuk sekarang, repository masih kosong karena kita belum melakukan kegiatan apapun. Repository local terletak PC kita, sedangkan remote terletak di server GitHub)</p><p>6. Selanjutnya buka Git Shell lalu navigasi ke folder yang anda buat. (Git Shell terletak di desktop, jika tidak ada search di all \\\\u00a0 \\\\u00a0 programs)</p><p>7. Git mengharuskan kita mejalankan command <i>git init</i>\\\\u00a0pada folder yang kita ingin integrasikan VCS.</p>\\\"}, {\\\"type\\\": \\\"full_image\\\", \\\"value\\\": 33}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p><br/></p><p>8. Maka folder test sudah menjadi folder\\\\u00a0<em>Git</em>. Namun kita masih perlu menambah file mana saja yang ingin diperiksa/monitor oleh Git pada saat commit, maka kita ketikkan command\\\\u00a0<em>git add test.txt</em>.</p>\\\"}, {\\\"type\\\": \\\"full_image\\\", \\\"value\\\": 34}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p><br/></p><p>9.\\\\u00a0Kode +1 ~0 -0 adalah perbandingan isi dari folder Git kita dengan repository local, sedangkan kode itu sendiri artinya, +1 bahwa ada 1 file baru yang muncul pada folder Git kita(test.txt). ~0 bahwa tidak ada file yang dimodifikasi, dan -0 tidak ada file yang didelete. Warna merah menandakan untuk file yang belum di-<em>add</em>\\\\u00a0atau di\\\\u00a0<em>track</em>\\\\u00a0oleh Git, sedangkan Hijau sudah, oleh karena itu sebelum test.txt di\\\\u00a0<em>add,</em>\\\\u00a0kode berwarna merah. Coba kalian buat file txt baru lalu jalankan perintah\\\\u00a0<em>git status</em>, maka akan ada 2 kode yang sama namun warna yang berbeda. Kode ini membandingkan status folder Git kita terhadap repository local kita, +1 ~0 -0 menandakan bahwa sekarang memiliki 1 file baru dibandingkan dengan repository local kita (repository kita masih kosong, karena kita belum pernah commit). Untuk melihat lebih detailnya kita bisa gunakan command\\\\u00a0<em>git status</em></p>\\\"}, {\\\"type\\\": \\\"full_image\\\", \\\"value\\\": 35}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p><br/></p><p>10. Terlihat Changes to be commited ialah test.txt, cocok dengan kode +1 ~0 -0 yang tadi, selanjutnya kita commit\\\\u00a0dengan menggunakan command\\\\u00a0<em>git commit -m \\\\\\\"&lt;pesan commit&gt;\\\\\\\"</em></p>\\\"}, {\\\"type\\\": \\\"full_image\\\", \\\"value\\\": 36}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p><br/></p><p>11. Setelah melakukan commit maka kode akan hilang, artinya folder kita sekarang sama dengan repository local kita. Selanjutnya kita upload atau\\\\u00a0<em>push</em>\\\\u00a0repository local kita ke remote repository. Command\\\\u00a0<em>git remote add origin https://github.com/&lt;username&gt;/repository_name.git</em>\\\\u00a0berguna untuk menyimpan url repository kita yang dinamakan origin, jadi nantinya kita tidak perlu repot menulis ulang url setiap\\\\u00a0<em>push</em>. Lalu kita gunakan command\\\\u00a0<em>git push origin master,\\\\u00a0</em>yang artinya kita me-upload repository local kita ke branch master origin .</p>\\\"}, {\\\"type\\\": \\\"full_image\\\", \\\"value\\\": 37}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p><br/></p><p>12. Cek apakah repository remote (GitHub) sudah sama dengan repository local kita.</p>\\\"}, {\\\"type\\\": \\\"full_image\\\", \\\"value\\\": 38}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p><br/></p><p>13. Repository remote sudah sama dengan repository local. So far kita sudah berhasil commit ke repository local dan me-uploadnya ke repository remote. Selanjutnya kita coba untuk mengambil repository remote. Anggap saja kita berada pada PC yang lain, buat folder baru dan lakukan\\\\u00a0<em>git init</em>\\\\u00a0untuk mengubahnya menjadi folder Git. Karena kita sekarang berada pada folder Git yang masih baru, maka kita harus menambahkan origin lagi. Setelah itu, command untuk meng-copy/mengambil isi dari repository remote adalah\\\\u00a0<em>git pull origin master,\\\\u00a0</em>yang artinya ambil atau tarik branch master di origin. Setelah itu cek apakah ada file test.txt</p>\\\"}, {\\\"type\\\": \\\"full_image\\\", \\\"value\\\": 39}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p><br/></p><p>14. Yup, file test.txt berhasil kita dapatkan. Sebagai gambaran, kita memiliki 3 repository, PC developer A, PC developer B, dan repository di GitHub, semuanya memiliki file dan isi yang sama. Contoh dalam pembuatan web, ganti saja peran PC developer B menjadi hostingan, sehingga proses development hanya terjadi di PC kita atau bahkan di device manapun (kita tinggal pull saja repository remote), peran hostingan hanya untuk menarik atau\\\\u00a0<em>pull</em>\\\\u00a0perubahan yang sudah kita\\\\u00a0<em>push</em>\\\\u00a0ke remote repository/GitHub, kita tidak perlu mengupload manual file yang kita ubah, cukup dengan 2 command semua file yang anda ubah akan otomatis terupload, dan dilengkapi dengan fitur VCS, seperti rollback ke revisi sebelumnya, atau merge dengan hasil kerja dari developer lain.</p>\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<h3>Kesimpulan</h3><p>Penggunaan VCS bagi saya merupakan hal yang mutlak untuk project skala menengah-besar, keuntungan yang didapatkan dengan menggunakan VCS jauh lebih banyak dibandingkan dengan usaha yang dibutuhkan untuk menerapkan dan mempelajarinya. All-in-all menurut saya mempelajari VCS adalah kewajiban bagi setiap mahasiswa yang ingin terjun ke dunia pemograman.</p>\\\"}]\", \"live\": true, \"thumbnail_image\": 30, \"has_unpublished_changes\": false, \"related_post\": \"[]\", \"main_img_disc\": \"\", \"angular_url\": \"version-control-system-menggunakan-github\", \"title_extended\": \"\", \"numchild\": 0, \"content_type\": 34, \"show_in_menus\": false, \"date\": \"2015-06-30\", \"path\": \"000100010001000B\", \"url_path\": \"/home/blog/version-control-system-menggunakan-github/\", \"expired\": false, \"pk\": 16, \"categories\": \"[{\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Software\\\"}]\", \"main_image\": 30, \"locked\": false, \"author\": \"Abirafdi Raditya Putra\", \"depth\": 4, \"first_published_at\": \"2015-08-14T06:34:56.123Z\", \"expire_at\": null}", "user": 1, "page": 16}, "model": "wagtailcore.pagerevision", "pk": 123}, {"fields": {"approved_go_live_at": null, "created_at": "2015-08-15T01:02:24.398Z", "submitted_for_moderation": false, "content_json": "{\"search_description\": \"\", \"owner\": 1, \"intro\": \"<p>Version Control System adalah sebuah software manajemen perubahan (revisi/versioning) pada source code, program komputer, website, maupun dokumen dan file-file lainnya. Setiap revisi akan dicatat di sebuah<em>repository\\u00a0</em>secara detail, yaitu mencakup\\u00a0waktu revisinya, siapa yang melakukan revisinya, dan file yang diubah itu sendiri</p>\", \"latest_revision_created_at\": \"2015-08-15T01:00:44.565Z\", \"main_background_image\": null, \"go_live_at\": null, \"title\": \"Version Control System Menggunakan GitHub\", \"seo_title\": \"\", \"slug\": \"version-control-system-menggunakan-github\", \"content\": \"[{\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Version Control System adalah sebuah software manajemen perubahan (revisi/versioning) pada source code, program komputer, website, maupun dokumen dan file-file lainnya. Setiap revisi akan dicatat di sebuah<em>repository\\\\u00a0</em>secara detail, yaitu mencakup\\\\u00a0waktu revisinya, siapa yang melakukan revisinya, dan file yang diubah itu sendiri.\\\\u00a0VCS memungkinkan kita kembali ke revisi atau versi sebelumnya dan juga memungkinkan dua developer atau lebih bekerja pada\\\\u00a0<em>file\\\\u00a0</em>atau project\\\\u00a0yang sama, yang nantinya hasil pekerjaan dua developer tersebut akan digabung (merge) secara otomatis oleh VCS.\\\\u00a0</p><p>\\\\u00a0\\\\u00a0</p><p></p><h4>Keuntungan menggunakan VCS</h4><ul><li>Perubahan pada source code terdokumentasi secara detail dan rapih.</li><li>Peningkatan produktivitas karena memungkinkan dua atau lebih developer bekerja pada project dan juga file yang sama. (conflict bisa saja terjadi i.e. dua developer mengubah line yang sama pada suatu file, conflict ini nantinya harus diselesaikan secara manual pada saat penggabungan/merge)</li><li>Kemudahan kembali ke versi sebelumnya.</li><li>Peningkatan portabilitas source code kita. Source code kita dengan mudah kita dapatkan dimana saja dengan menggunakan VCS yang sudah memiliki remote repository (i.e. repository yang berada di cloud), kita juga bisa memilih revisi/branch mana yang kita ingin dapatkan.\\\\u00a0</li></ul><p><br/></p><h4>Workflow</h4>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"salah satu pattern version control. image credit @ronaldwidha\\\"}, {\\\"type\\\": \\\"full_image\\\", \\\"value\\\": 31}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<ol><li>Project dimulai, source code utama diwarnai biru tua. Source code utama biasanya disebut Trunk atau Master. Master merupakan versi paling stabil dari project kita.</li><li>Kemudian developer lain ingin menambah fitur lain, seperti menambahkan fitur search pada suatu website, namun karena takut akan menimbulkan bugs pada branch Master (terkadang suatu program memiliki dua atau lebih versi yang selalu dikerjakan, masing-masing versi ini disebut branch, e.g Windows 7 ultimate edition merupakan branch dari Windows 7 Master, branch akan hilang jika dimerge dengan branch lainnya) maka developer ini akan membuat branch baru dengan nama Search, sang developer me-<em>clone</em>\\\\u00a0(meng-copy source code branch Master) branch Master lalu menambahkan fitur search, sehingga proses development branch Master masih bisa terus dilakukan oleh developer yang lain. Jika penambahan fitur search sudah melewati tahap testing dan Q&amp;A, maka branch Search akan dimerge dengan branch Master.</li><li>Begitu seterusnya pada penambahan fitur-fitur yang lain.\\\\u00a0</li><li>Misalkan ada permintaan untuk membuat program yang mirip dengan branch Master, maka para developer tinggal membuat branch baru dengan me-clone branch Master, seperti yang bisa dilihat pada garis biru muda diatas. \\\\u00a0</li></ol><p>\\\\u00a0\\\\u00a0</p><h4>Contoh Menggunakan GitHub</h4><p>GitHub merupakan salah satu VCS yang paling banyak digunakan, bahkan Linux menggunakan GitHub sebagai VCS-nya. Namun sebenarnya GitHub bukanlah sebuah VCS, tetapi merupakan\\\\u00a0<em>hub\\\\u00a0</em>(tempat berkumpul/konsolidasi dari berbagai project yang menggunakan Git) dari\\\\u00a0<em>Git</em>. Nah Git inilah yang merupakan VCS-nya, GitHub memfasilitasi Git agar lebih mudah digunakan dan juga penambahan fitur-fitur lainnya. Sebelum kita mulai, Git bertipe decentrallized atau distributed, setiap developer memiliki local repository yang berada pada PC-nya, setiap revisi akan dicatat terlebih dahulu di repository local tersebut, developer tersebut bebas menentukan apakah data repository local diupload ke repository remote (GitHub) atau tidak, tidak ada yang bertindak sebagai server utama repository, semua data repository ada pada seluruh client. Walaupun kesannya GitHub memiliki server utama (i.e. repository yang berada di GitHub), tetapi sebenarnya sama saja dengan repository local pada PC kita, hanya saja berada di cloud (<em>remote</em>).\\\\u00a0</p><p>1. Install\\\\u00a0<a href=\\\\\\\"https://windows.github.com/\\\\\\\">GitHub for Windows</a></p><p>2. Buat Account\\\\u00a0<a href=\\\\\\\"https://github.com/\\\\\\\">GitHub</a></p><p>3. Buat repository baru di GitHub, bisa dilakukan melalui di aplikasi GitHub for Windows atau di websitenya.</p><p>4. Buat folder baru di PC anda, buatlah file .txt yang berisi</p>\\\"}, {\\\"type\\\": \\\"full_image\\\", \\\"value\\\": 32}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p><br/></p><p>5. Commit adalah yang memerintahkan Git untuk memeriksa apakah ada file yang berubah atau tidak, jika ada, maka akan terbuat revisi baru dan dicatat ke repository local kita, dalam kata lain Commit digunakan untuk membuat revisi baru. (repository merupakan archive kegiatan yang kita lakukan, untuk sekarang, repository masih kosong karena kita belum melakukan kegiatan apapun. Repository local terletak PC kita, sedangkan remote terletak di server GitHub)</p><p>6. Selanjutnya buka Git Shell lalu navigasi ke folder yang anda buat. (Git Shell terletak di desktop, jika tidak ada search di all \\\\u00a0 \\\\u00a0 programs)</p><p>7. Git mengharuskan kita mejalankan command <i>git init</i>\\\\u00a0pada folder yang kita ingin integrasikan VCS.</p>\\\"}, {\\\"type\\\": \\\"full_image\\\", \\\"value\\\": 33}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p><br/></p><p>8. Maka folder test sudah menjadi folder\\\\u00a0<em>Git</em>. Namun kita masih perlu menambah file mana saja yang ingin diperiksa/monitor oleh Git pada saat commit, maka kita ketikkan command\\\\u00a0<em>git add test.txt</em>.</p>\\\"}, {\\\"type\\\": \\\"full_image\\\", \\\"value\\\": 34}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p><br/></p><p>9.\\\\u00a0Kode +1 ~0 -0 adalah perbandingan isi dari folder Git kita dengan repository local, sedangkan kode itu sendiri artinya, +1 bahwa ada 1 file baru yang muncul pada folder Git kita(test.txt). ~0 bahwa tidak ada file yang dimodifikasi, dan -0 tidak ada file yang didelete. Warna merah menandakan untuk file yang belum di-<em>add</em>\\\\u00a0atau di\\\\u00a0<em>track</em>\\\\u00a0oleh Git, sedangkan Hijau sudah, oleh karena itu sebelum test.txt di\\\\u00a0<em>add,</em>\\\\u00a0kode berwarna merah. Coba kalian buat file txt baru lalu jalankan perintah\\\\u00a0<em>git status</em>, maka akan ada 2 kode yang sama namun warna yang berbeda. Kode ini membandingkan status folder Git kita terhadap repository local kita, +1 ~0 -0 menandakan bahwa sekarang memiliki 1 file baru dibandingkan dengan repository local kita (repository kita masih kosong, karena kita belum pernah commit). Untuk melihat lebih detailnya kita bisa gunakan command\\\\u00a0<em>git status</em></p>\\\"}, {\\\"type\\\": \\\"full_image\\\", \\\"value\\\": 35}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p><br/></p><p>10. Terlihat Changes to be commited ialah test.txt, cocok dengan kode +1 ~0 -0 yang tadi, selanjutnya kita commit\\\\u00a0dengan menggunakan command\\\\u00a0<em>git commit -m \\\\\\\"&lt;pesan commit&gt;\\\\\\\"</em></p>\\\"}, {\\\"type\\\": \\\"full_image\\\", \\\"value\\\": 36}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p><br/></p><p>11. Setelah melakukan commit maka kode akan hilang, artinya folder kita sekarang sama dengan repository local kita. Selanjutnya kita upload atau\\\\u00a0<em>push</em>\\\\u00a0repository local kita ke remote repository. Command\\\\u00a0<em>git remote add origin https://github.com/&lt;username&gt;/repository_name.git</em>\\\\u00a0berguna untuk menyimpan url repository kita yang dinamakan origin, jadi nantinya kita tidak perlu repot menulis ulang url setiap\\\\u00a0<em>push</em>. Lalu kita gunakan command\\\\u00a0<em>git push origin master,\\\\u00a0</em>yang artinya kita me-upload repository local kita ke branch master origin .</p>\\\"}, {\\\"type\\\": \\\"full_image\\\", \\\"value\\\": 37}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p><br/></p><p>12. Cek apakah repository remote (GitHub) sudah sama dengan repository local kita.</p>\\\"}, {\\\"type\\\": \\\"full_image\\\", \\\"value\\\": 38}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p><br/></p><p>13. Repository remote sudah sama dengan repository local. So far kita sudah berhasil commit ke repository local dan me-uploadnya ke repository remote. Selanjutnya kita coba untuk mengambil repository remote. Anggap saja kita berada pada PC yang lain, buat folder baru dan lakukan\\\\u00a0<em>git init</em>\\\\u00a0untuk mengubahnya menjadi folder Git. Karena kita sekarang berada pada folder Git yang masih baru, maka kita harus menambahkan origin lagi. Setelah itu, command untuk meng-copy/mengambil isi dari repository remote adalah\\\\u00a0<em>git pull origin master,\\\\u00a0</em>yang artinya ambil atau tarik branch master di origin. Setelah itu cek apakah ada file test.txt</p>\\\"}, {\\\"type\\\": \\\"full_image\\\", \\\"value\\\": 39}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p><br/></p><p>14. Yup, file test.txt berhasil kita dapatkan. Sebagai gambaran, kita memiliki 3 repository, PC developer A, PC developer B, dan repository di GitHub, semuanya memiliki file dan isi yang sama. Contoh dalam pembuatan web, ganti saja peran PC developer B menjadi hostingan, sehingga proses development hanya terjadi di PC kita atau bahkan di device manapun (kita tinggal pull saja repository remote), peran hostingan hanya untuk menarik atau\\\\u00a0<em>pull</em>\\\\u00a0perubahan yang sudah kita\\\\u00a0<em>push</em>\\\\u00a0ke remote repository/GitHub, kita tidak perlu mengupload manual file yang kita ubah, cukup dengan 2 command semua file yang anda ubah akan otomatis terupload, dan dilengkapi dengan fitur VCS, seperti rollback ke revisi sebelumnya, atau merge dengan hasil kerja dari developer lain.</p>\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<h3>Kesimpulan</h3><p>Penggunaan VCS bagi saya merupakan hal yang mutlak untuk project skala menengah-besar, keuntungan yang didapatkan dengan menggunakan VCS jauh lebih banyak dibandingkan dengan usaha yang dibutuhkan untuk menerapkan dan mempelajarinya. All-in-all menurut saya mempelajari VCS adalah kewajiban bagi setiap mahasiswa yang ingin terjun ke dunia pemograman.</p>\\\"}]\", \"live\": true, \"thumbnail_image\": 30, \"has_unpublished_changes\": false, \"related_post\": \"[]\", \"main_img_disc\": \"\", \"angular_url\": \"version-control-system-menggunakan-github\", \"title_extended\": \"\", \"numchild\": 0, \"content_type\": 34, \"show_in_menus\": false, \"date\": \"2015-06-30\", \"path\": \"000100010001000B\", \"url_path\": \"/home/blog/version-control-system-menggunakan-github/\", \"expired\": false, \"pk\": 16, \"categories\": \"[{\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Programming\\\"}]\", \"main_image\": 30, \"locked\": false, \"author\": \"Abirafdi Raditya Putra\", \"depth\": 4, \"first_published_at\": \"2015-08-14T06:34:56.123Z\", \"expire_at\": null}", "user": 1, "page": 16}, "model": "wagtailcore.pagerevision", "pk": 124}, {"fields": {"approved_go_live_at": null, "created_at": "2015-08-15T01:02:47.389Z", "submitted_for_moderation": false, "content_json": "{\"search_description\": \"\", \"owner\": 1, \"intro\": \"<p>Kemampuan database merupakan kemampuan fundamental bagi setiap programmer. Bagi orang yang baru mulai belajar database pasti pernah mendengar Object Relational Mapping atau ORM. Pada post ini saya akan menjelaskan apa itu ORM berserta contohnya menggunakan SQLAlchemy</p>\", \"latest_revision_created_at\": \"2015-08-14T03:32:12.653Z\", \"main_background_image\": null, \"go_live_at\": null, \"title\": \"Perkenalan ORM dan SQLAlchemy\", \"seo_title\": \"\", \"slug\": \"perkenalan-orm-dan-sqlalchemy\", \"content\": \"[{\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Kemampuan database merupakan kemampuan fundamental bagi setiap programmer. Bagi orang yang baru mulai belajar database pasti pernah mendengar Object Relational Mapping atau ORM. Sebelum ORM ada, segala aktifitas dan perintah di database harus menggunakan bahasa SQL. Di era modern sekarang, hampir sebagian besar bahasa pemrograman yang digunakan bersifat <i>object oriented</i>, seperti Java, Python dan C++, ORM dibuat agar objek dapat dipetakan atau direlasikan ke suatu record di database, ORM juga mengubah sintaks SQL menjadi sintaks yang bersifat <i>object-oriented.</i>\\\\u00a0 sehingga \\\\u00a0memudahkan programmer dan meningkatkan produktifitas dalam hal menggunakan database karena object sudah terhubung langsung dengan record-record pada database, code readability juga akan meningkat karena sintaks ORM lebih terlihat <i>object-oriented.</i>\\\\u00a0</p><p>Jadi bagaimana cara ORM mempermudah kerja programmer? ORM menterjemahkan perintah dari programmer ke dalam bahasa SQL, termasuk mengubah tipe data dari field suatu objek supaya cocok dengan tipe data pada databasenya. ORM ada banyak, masing-masing memiliki kelebihan dan kekurangan, dan semuanya hampir berbentuk suatu library atau module yang kita install sendiri sesuai dengan bahasa pemrograman kita, namun ada juga ORM yang sudah terintegrasi pada suatu framework, contohnya ORM Django. Faktor utama bagus atau tidaknya dari suatu ORM adalah dari segi performa, seperti seberapa cepat suatu ORM dapat melaksanakan query yang kompleks. Perbandingan berbagai ORM Python yang lumayan detail bisa dilihat\\\\u00a0<a href=\\\\\\\"http://www.pythoncentral.io/sqlalchemy-vs-orms/\\\\\\\">disini</a>.\\\\u00a0</p><p>Disini saya akan menggunakan SQLAlchemy sebagai ORM pilihan saya, karena SQLAlchemy adalah ORM yang paling banyak digunakan di Python sehingga lebih mudah googling jika ada kesulitan...</p><p></p><p>Berikut merupakan demonstrasi singkat ORM SQLAlchemy</p>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"table users\\\"}, {\\\"type\\\": \\\"raw_html\\\", \\\"value\\\": \\\"<table>\\\\r\\\\n<tbody>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;nama &nbsp;</td>\\\\r\\\\n<td>&nbsp;umur&nbsp;</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Andi</td>\\\\r\\\\n<td>&nbsp;19</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Budi</td>\\\\r\\\\n<td>&nbsp;18</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Agung</td>\\\\r\\\\n<td>&nbsp;14</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Adit</td>\\\\r\\\\n<td>&nbsp;15</td>\\\\r\\\\n</tr>\\\\r\\\\n</tbody>\\\\r\\\\n</table>\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p><br/></p><p>menggunakan SQL.<br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"SELECT nama\\\\r\\\\nFROM users\\\\r\\\\nWHERE umur > 17;\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p><br/></p><p>menggunakan ORM SQLAlchemy<br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"query(User).filter(User.nama > 17) \\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p><br/></p><p>ORM akan otomatis menterjemahkan statement python ke dalam bahasa SQL sehingga kedua perintah diatas akan menghasilkan hasil yang sama yaitu<br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"Andi\\\\r\\\\nBudi\\\"}, {\\\"type\\\": \\\"subheading\\\", \\\"value\\\": \\\"Demonstrasi Lengkap\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Berikutnya saya akan memberi demonstrasi sederhana pengunaan SQLAlchemy yang dikombinasikan dengan SQLite, karena sqlite sudah disupport python out-of-the-box jadi tidak perlu meng-install modules lain.\\\\u00a0pertama kita install dulu SQLAlchemy, ketik command berikut di command-line.<br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"pip install sqlalchemy\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Langkah pertama alah membuat database yang memiliki tabel daftarNilai. Sesuai dengan kepanjangan ORM, yaitu\\\\u00a0<i>Object\\\\u00a0Relational Mapper</i>, table yang kita inginkan nanti otomatis terbuat sesuai dengan class atau objek yang kita definisikan, jadi langkah selanjutnya adalah mendefinisikan class daftarNilai. Kumpulan class yang akan dijadikan table kita letakkan di satu file yang bernama models.py<br/></p>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"models.py\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"from sqlalchemy.ext.declarative import declarative_base\\\\r\\\\nfrom sqlalchemy import Column, Integer, String\\\\r\\\\n# Kita harus import setiap tipe data yang ingin kita gunakan\\\\r\\\\nfrom sqlalchemy import create_engine\\\\r\\\\n\\\\r\\\\nBase = declarative_base()\\\\r\\\\n# setiap class yang akan dipetakan harus inherit dari instance declarative_base\\\\r\\\\n\\\\r\\\\nclass DaftarNilai(Base): #inherit from Base\\\\r\\\\n    __tablename__ = 'daftarNilai'    \\\\r\\\\n    # tablename disini hanya sebagai metadata\\\\r\\\\n\\\\r\\\\n    nama = Column(String(50), nullable=False, primary_key=True)\\\\r\\\\n    # membuat kolom nama dengan tipe data\\\\r\\\\n    # String maksimal panjang 50 karakter   \\\\r\\\\n    # dan tidak boleh Null   \\\\r\\\\n    nilai = Column(Integer, nullable=False)   \\\\r\\\\n\\\\r\\\\nengine = create_engine('sqlite:///latihan.db') \\\\r\\\\n# menyiapkan connector/engine sqlite\\\\r\\\\n\\\\r\\\\nBase.metadata.create_all(engine) \\\\r\\\\n# menjalankan perintah pemetaan/membuat database\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Lalu jalankan script diatas. SQLite bersifat file-based, sehingga urlnya menggunakan 3 slashes. Isi nama databasenya sesuai kemauan anda, nantinya akan terbuat file .db di folder yang sama dengan script ini dijalankan.\\\\u00a0</p><p>Berikut merupakan script untuk menambah object atau record ke database.<br/></p>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"tambahrecord.py\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"from sqlalchemy.orm import sessionmaker\\\\r\\\\nfrom sqlalchemy import create_engine\\\\r\\\\nfrom models import DaftarNilai, Base\\\\r\\\\n\\\\r\\\\nengine = create_engine('sqlite:///latihan/db')\\\\r\\\\n# membuat connector/engine\\\\r\\\\n\\\\r\\\\nDBSession = sessionmaker()\\\\r\\\\n# sebelum kita mengakses database, kita harus membuat session\\\\r\\\\n# terlebih dahulu\\\\r\\\\n\\\\r\\\\nDBSession.configure(bind=engine)\\\\r\\\\nsession = DBSession\\\\r\\\\n\\\\r\\\\nnew_DaftarNilai = DaftarNilai(nama='Andi', nilai=80)\\\\r\\\\n# untuk membuat record baru, kita mendefinisikannya dalam bentuk objek\\\\r\\\\n# yang nantinya akan otomatis berubah menjadi tipe data yang cocok\\\\r\\\\n# dengan database\\\\r\\\\n\\\\r\\\\nsession.add(new_DaftarNilai)\\\\r\\\\nnew_DaftarNilai = DaftarNilai(nama='Adit', nilai=90)\\\\r\\\\nsession.add(new_DaftarNilai)\\\\r\\\\n\\\\r\\\\nsession.commit()\\\\r\\\\n# jangan lupa untuk commit perubahan yang terjadi\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p><br/></p><p>Untuk melihat apakah record yang baru saja kita masukkan berhasil ditambah ke database, buat script lihatrecord.py</p>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"lihatrecord.py\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"from sqlalchemy.orm import sessionmaker\\\\r\\\\nfrom sqlalchemy import create_engine\\\\r\\\\nfrom models import DaftarNilai, Base\\\\r\\\\n\\\\r\\\\nengine = create_engine('sqlite:///latihan/db')\\\\r\\\\nDBSession = sessionmaker()\\\\r\\\\nDBSession.configure(bind=engine)\\\\r\\\\nsession = DBSession\\\\r\\\\n\\\\r\\\\nsemuaDaftarNilai = session.query(DaftarNilai).all()\\\\r\\\\n# mengambil semua record ke dalam variabel semuaDaftarNilai\\\\r\\\\n# karena terdapat 2 record, maka bisa di iterasikan dengan for\\\\r\\\\n\\\\r\\\\nfor mahasiswa in semuaDaftarNilai:\\\\r\\\\n    print mahasiswa.nama + ' ' + str(mahasiswa.nilai) + '/n'\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>jalankan testrecord.py maka akan didapat hasil querynya.</p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"Andi 80\\\\r\\\\nAdit 90\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Jika kalian gabungkan semua script diatas pada satu file, instantiasi engine dan session hanya perlu sekali saja.\\\\\\\\</p><p><br/></p><p>Selesai sudah demonstrasi penggunaan SQAlchemy dengan SQLite. Semoga dapat memberikan pencerahan bagi pembaca.</p><p><br/></p><p>Further reading:</p><ul><li><a href=\\\\\\\"http://docs.sqlalchemy.org/en/rel_0_9/orm/tutorial.html\\\\\\\">SQLAlchemy</a></li><li>SQLAlchemy koneksi dengan\\\\u00a0<a href=\\\\\\\"http://docs.sqlalchemy.org/en/rel_0_9/core/engines.html\\\\\\\">database lain\\\\u00a0</a></li></ul>\\\"}]\", \"live\": true, \"thumbnail_image\": 23, \"has_unpublished_changes\": false, \"related_post\": \"[]\", \"main_img_disc\": \"image from www.agile-code.com\", \"angular_url\": \"perkenalan-orm-dan-sqlalchemy\", \"title_extended\": \"\", \"numchild\": 0, \"content_type\": 34, \"show_in_menus\": false, \"date\": \"2015-04-07\", \"path\": \"0001000100010007\", \"url_path\": \"/home/blog/perkenalan-orm-dan-sqlalchemy/\", \"expired\": false, \"pk\": 12, \"categories\": \"[{\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Python\\\"}, {\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Progamming\\\"}]\", \"main_image\": 22, \"locked\": false, \"author\": \"Abirafdi Raditya Putra\", \"depth\": 4, \"first_published_at\": \"2015-08-14T02:26:40.339Z\", \"expire_at\": null}", "user": 1, "page": 12}, "model": "wagtailcore.pagerevision", "pk": 125}, {"fields": {"approved_go_live_at": null, "created_at": "2015-08-15T01:03:02.437Z", "submitted_for_moderation": false, "content_json": "{\"search_description\": \"\", \"owner\": 1, \"intro\": \"<p>Kemampuan database merupakan kemampuan fundamental bagi setiap programmer. Bagi orang yang baru mulai belajar database pasti pernah mendengar Object Relational Mapping atau ORM. Pada post ini saya akan menjelaskan apa itu ORM berserta contohnya menggunakan SQLAlchemy</p>\", \"latest_revision_created_at\": \"2015-08-15T01:02:47.389Z\", \"main_background_image\": null, \"go_live_at\": null, \"title\": \"Perkenalan ORM dan SQLAlchemy\", \"seo_title\": \"\", \"slug\": \"perkenalan-orm-dan-sqlalchemy\", \"content\": \"[{\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Kemampuan database merupakan kemampuan fundamental bagi setiap programmer. Bagi orang yang baru mulai belajar database pasti pernah mendengar Object Relational Mapping atau ORM. Sebelum ORM ada, segala aktifitas dan perintah di database harus menggunakan bahasa SQL. Di era modern sekarang, hampir sebagian besar bahasa pemrograman yang digunakan bersifat <i>object oriented</i>, seperti Java, Python dan C++, ORM dibuat agar objek dapat dipetakan atau direlasikan ke suatu record di database, ORM juga mengubah sintaks SQL menjadi sintaks yang bersifat <i>object-oriented.</i>\\\\u00a0 sehingga \\\\u00a0memudahkan programmer dan meningkatkan produktifitas dalam hal menggunakan database karena object sudah terhubung langsung dengan record-record pada database, code readability juga akan meningkat karena sintaks ORM lebih terlihat <i>object-oriented.</i>\\\\u00a0</p><p>Jadi bagaimana cara ORM mempermudah kerja programmer? ORM menterjemahkan perintah dari programmer ke dalam bahasa SQL, termasuk mengubah tipe data dari field suatu objek supaya cocok dengan tipe data pada databasenya. ORM ada banyak, masing-masing memiliki kelebihan dan kekurangan, dan semuanya hampir berbentuk suatu library atau module yang kita install sendiri sesuai dengan bahasa pemrograman kita, namun ada juga ORM yang sudah terintegrasi pada suatu framework, contohnya ORM Django. Faktor utama bagus atau tidaknya dari suatu ORM adalah dari segi performa, seperti seberapa cepat suatu ORM dapat melaksanakan query yang kompleks. Perbandingan berbagai ORM Python yang lumayan detail bisa dilihat\\\\u00a0<a href=\\\\\\\"http://www.pythoncentral.io/sqlalchemy-vs-orms/\\\\\\\">disini</a>.\\\\u00a0</p><p>Disini saya akan menggunakan SQLAlchemy sebagai ORM pilihan saya, karena SQLAlchemy adalah ORM yang paling banyak digunakan di Python sehingga lebih mudah googling jika ada kesulitan...</p><p></p><p>Berikut merupakan demonstrasi singkat ORM SQLAlchemy</p>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"table users\\\"}, {\\\"type\\\": \\\"raw_html\\\", \\\"value\\\": \\\"<table>\\\\r\\\\n<tbody>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;nama &nbsp;</td>\\\\r\\\\n<td>&nbsp;umur&nbsp;</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Andi</td>\\\\r\\\\n<td>&nbsp;19</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Budi</td>\\\\r\\\\n<td>&nbsp;18</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Agung</td>\\\\r\\\\n<td>&nbsp;14</td>\\\\r\\\\n</tr>\\\\r\\\\n<tr>\\\\r\\\\n<td>&nbsp;Adit</td>\\\\r\\\\n<td>&nbsp;15</td>\\\\r\\\\n</tr>\\\\r\\\\n</tbody>\\\\r\\\\n</table>\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p><br/></p><p>menggunakan SQL.<br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"SELECT nama\\\\r\\\\nFROM users\\\\r\\\\nWHERE umur > 17;\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p><br/></p><p>menggunakan ORM SQLAlchemy<br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"query(User).filter(User.nama > 17) \\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p><br/></p><p>ORM akan otomatis menterjemahkan statement python ke dalam bahasa SQL sehingga kedua perintah diatas akan menghasilkan hasil yang sama yaitu<br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"Andi\\\\r\\\\nBudi\\\"}, {\\\"type\\\": \\\"subheading\\\", \\\"value\\\": \\\"Demonstrasi Lengkap\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Berikutnya saya akan memberi demonstrasi sederhana pengunaan SQLAlchemy yang dikombinasikan dengan SQLite, karena sqlite sudah disupport python out-of-the-box jadi tidak perlu meng-install modules lain.\\\\u00a0pertama kita install dulu SQLAlchemy, ketik command berikut di command-line.<br/></p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"pip install sqlalchemy\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Langkah pertama alah membuat database yang memiliki tabel daftarNilai. Sesuai dengan kepanjangan ORM, yaitu\\\\u00a0<i>Object\\\\u00a0Relational Mapper</i>, table yang kita inginkan nanti otomatis terbuat sesuai dengan class atau objek yang kita definisikan, jadi langkah selanjutnya adalah mendefinisikan class daftarNilai. Kumpulan class yang akan dijadikan table kita letakkan di satu file yang bernama models.py<br/></p>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"models.py\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"from sqlalchemy.ext.declarative import declarative_base\\\\r\\\\nfrom sqlalchemy import Column, Integer, String\\\\r\\\\n# Kita harus import setiap tipe data yang ingin kita gunakan\\\\r\\\\nfrom sqlalchemy import create_engine\\\\r\\\\n\\\\r\\\\nBase = declarative_base()\\\\r\\\\n# setiap class yang akan dipetakan harus inherit dari instance declarative_base\\\\r\\\\n\\\\r\\\\nclass DaftarNilai(Base): #inherit from Base\\\\r\\\\n    __tablename__ = 'daftarNilai'    \\\\r\\\\n    # tablename disini hanya sebagai metadata\\\\r\\\\n\\\\r\\\\n    nama = Column(String(50), nullable=False, primary_key=True)\\\\r\\\\n    # membuat kolom nama dengan tipe data\\\\r\\\\n    # String maksimal panjang 50 karakter   \\\\r\\\\n    # dan tidak boleh Null   \\\\r\\\\n    nilai = Column(Integer, nullable=False)   \\\\r\\\\n\\\\r\\\\nengine = create_engine('sqlite:///latihan.db') \\\\r\\\\n# menyiapkan connector/engine sqlite\\\\r\\\\n\\\\r\\\\nBase.metadata.create_all(engine) \\\\r\\\\n# menjalankan perintah pemetaan/membuat database\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Lalu jalankan script diatas. SQLite bersifat file-based, sehingga urlnya menggunakan 3 slashes. Isi nama databasenya sesuai kemauan anda, nantinya akan terbuat file .db di folder yang sama dengan script ini dijalankan.\\\\u00a0</p><p>Berikut merupakan script untuk menambah object atau record ke database.<br/></p>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"tambahrecord.py\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"from sqlalchemy.orm import sessionmaker\\\\r\\\\nfrom sqlalchemy import create_engine\\\\r\\\\nfrom models import DaftarNilai, Base\\\\r\\\\n\\\\r\\\\nengine = create_engine('sqlite:///latihan/db')\\\\r\\\\n# membuat connector/engine\\\\r\\\\n\\\\r\\\\nDBSession = sessionmaker()\\\\r\\\\n# sebelum kita mengakses database, kita harus membuat session\\\\r\\\\n# terlebih dahulu\\\\r\\\\n\\\\r\\\\nDBSession.configure(bind=engine)\\\\r\\\\nsession = DBSession\\\\r\\\\n\\\\r\\\\nnew_DaftarNilai = DaftarNilai(nama='Andi', nilai=80)\\\\r\\\\n# untuk membuat record baru, kita mendefinisikannya dalam bentuk objek\\\\r\\\\n# yang nantinya akan otomatis berubah menjadi tipe data yang cocok\\\\r\\\\n# dengan database\\\\r\\\\n\\\\r\\\\nsession.add(new_DaftarNilai)\\\\r\\\\nnew_DaftarNilai = DaftarNilai(nama='Adit', nilai=90)\\\\r\\\\nsession.add(new_DaftarNilai)\\\\r\\\\n\\\\r\\\\nsession.commit()\\\\r\\\\n# jangan lupa untuk commit perubahan yang terjadi\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p><br/></p><p>Untuk melihat apakah record yang baru saja kita masukkan berhasil ditambah ke database, buat script lihatrecord.py</p>\\\"}, {\\\"type\\\": \\\"smaller_subheading\\\", \\\"value\\\": \\\"lihatrecord.py\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"from sqlalchemy.orm import sessionmaker\\\\r\\\\nfrom sqlalchemy import create_engine\\\\r\\\\nfrom models import DaftarNilai, Base\\\\r\\\\n\\\\r\\\\nengine = create_engine('sqlite:///latihan/db')\\\\r\\\\nDBSession = sessionmaker()\\\\r\\\\nDBSession.configure(bind=engine)\\\\r\\\\nsession = DBSession\\\\r\\\\n\\\\r\\\\nsemuaDaftarNilai = session.query(DaftarNilai).all()\\\\r\\\\n# mengambil semua record ke dalam variabel semuaDaftarNilai\\\\r\\\\n# karena terdapat 2 record, maka bisa di iterasikan dengan for\\\\r\\\\n\\\\r\\\\nfor mahasiswa in semuaDaftarNilai:\\\\r\\\\n    print mahasiswa.nama + ' ' + str(mahasiswa.nilai) + '/n'\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>jalankan testrecord.py maka akan didapat hasil querynya.</p>\\\"}, {\\\"type\\\": \\\"pre_tag\\\", \\\"value\\\": \\\"Andi 80\\\\r\\\\nAdit 90\\\"}, {\\\"type\\\": \\\"content\\\", \\\"value\\\": \\\"<p>Jika kalian gabungkan semua script diatas pada satu file, instantiasi engine dan session hanya perlu sekali saja.\\\\\\\\</p><p><br/></p><p>Selesai sudah demonstrasi penggunaan SQAlchemy dengan SQLite. Semoga dapat memberikan pencerahan bagi pembaca.</p><p><br/></p><p>Further reading:</p><ul><li><a href=\\\\\\\"http://docs.sqlalchemy.org/en/rel_0_9/orm/tutorial.html\\\\\\\">SQLAlchemy</a></li><li>SQLAlchemy koneksi dengan\\\\u00a0<a href=\\\\\\\"http://docs.sqlalchemy.org/en/rel_0_9/core/engines.html\\\\\\\">database lain\\\\u00a0</a></li></ul>\\\"}]\", \"live\": true, \"thumbnail_image\": 23, \"has_unpublished_changes\": false, \"related_post\": \"[]\", \"main_img_disc\": \"image from www.agile-code.com\", \"angular_url\": \"perkenalan-orm-dan-sqlalchemy\", \"title_extended\": \"\", \"numchild\": 0, \"content_type\": 34, \"show_in_menus\": false, \"date\": \"2015-04-07\", \"path\": \"0001000100010007\", \"url_path\": \"/home/blog/perkenalan-orm-dan-sqlalchemy/\", \"expired\": false, \"pk\": 12, \"categories\": \"[{\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Python\\\"}, {\\\"type\\\": \\\"name\\\", \\\"value\\\": \\\"Programming\\\"}]\", \"main_image\": 22, \"locked\": false, \"author\": \"Abirafdi Raditya Putra\", \"depth\": 4, \"first_published_at\": \"2015-08-14T02:26:40.339Z\", \"expire_at\": null}", "user": 1, "page": 12}, "model": "wagtailcore.pagerevision", "pk": 126}, {"fields": {"locked": false, "title": "Root", "numchild": 1, "show_in_menus": false, "live": true, "seo_title": "", "first_published_at": null, "latest_revision_created_at": null, "depth": 1, "search_description": "", "content_type": 1, "has_unpublished_changes": false, "owner": null, "path": "0001", "url_path": "/", "expired": false, "slug": "root", "expire_at": null, "go_live_at": null}, "model": "wagtailcore.page", "pk": 1}, {"fields": {"locked": false, "title": "Home", "numchild": 2, "show_in_menus": false, "live": true, "seo_title": "", "first_published_at": "2015-08-12T15:15:09.317Z", "latest_revision_created_at": "2015-08-12T15:15:09.311Z", "depth": 2, "search_description": "", "content_type": 32, "has_unpublished_changes": false, "owner": 1, "path": "00010001", "url_path": "/home/", "expired": false, "slug": "home", "expire_at": null, "go_live_at": null}, "model": "wagtailcore.page", "pk": 3}, {"fields": {"locked": false, "title": "Blog", "numchild": 11, "show_in_menus": false, "live": true, "seo_title": "", "first_published_at": "2015-08-12T15:15:19.314Z", "latest_revision_created_at": "2015-08-12T15:15:19.013Z", "depth": 3, "search_description": "", "content_type": 33, "has_unpublished_changes": false, "owner": 1, "path": "000100010001", "url_path": "/home/blog/", "expired": false, "slug": "blog", "expire_at": null, "go_live_at": null}, "model": "wagtailcore.page", "pk": 4}, {"fields": {"locked": false, "title": "Portofolio", "numchild": 0, "show_in_menus": false, "live": true, "seo_title": "", "first_published_at": "2015-08-12T15:16:05.575Z", "latest_revision_created_at": "2015-08-12T15:16:05.569Z", "depth": 3, "search_description": "", "content_type": 36, "has_unpublished_changes": false, "owner": 1, "path": "000100010002", "url_path": "/home/portofolio/", "expired": false, "slug": "portofolio", "expire_at": null, "go_live_at": null}, "model": "wagtailcore.page", "pk": 5}, {"fields": {"locked": false, "title": "Software Open Source Gratis?", "numchild": 0, "show_in_menus": false, "live": true, "seo_title": "", "first_published_at": "2015-08-12T23:12:10.363Z", "latest_revision_created_at": "2015-08-12T23:31:55.092Z", "depth": 4, "search_description": "", "content_type": 34, "has_unpublished_changes": false, "owner": 1, "path": "0001000100010001", "url_path": "/home/blog/software-open-source-gratis/", "expired": false, "slug": "software-open-source-gratis", "expire_at": null, "go_live_at": null}, "model": "wagtailcore.page", "pk": 6}, {"fields": {"locked": false, "title": "Mantle Graphics API Terbaru Dari AMD", "numchild": 0, "show_in_menus": false, "live": true, "seo_title": "", "first_published_at": "2015-08-12T23:52:15.433Z", "latest_revision_created_at": "2015-08-14T06:35:28.855Z", "depth": 4, "search_description": "", "content_type": 34, "has_unpublished_changes": false, "owner": 1, "path": "0001000100010002", "url_path": "/home/blog/mantle-graphics-api-terbaru-dari-amd/", "expired": false, "slug": "mantle-graphics-api-terbaru-dari-amd", "expire_at": null, "go_live_at": null}, "model": "wagtailcore.page", "pk": 7}, {"fields": {"locked": false, "title": "Kivy Tutorial 1 - Apa itu Kivy?", "numchild": 0, "show_in_menus": false, "live": true, "seo_title": "", "first_published_at": "2015-08-13T00:04:23.945Z", "latest_revision_created_at": "2015-08-14T01:35:13.219Z", "depth": 4, "search_description": "", "content_type": 34, "has_unpublished_changes": false, "owner": 1, "path": "0001000100010003", "url_path": "/home/blog/kivy-tutorial-1---apa-itu-kivy/", "expired": false, "slug": "kivy-tutorial-1---apa-itu-kivy", "expire_at": null, "go_live_at": null}, "model": "wagtailcore.page", "pk": 8}, {"fields": {"locked": false, "title": "Modules Python Yang Wajib Dimiliki - virtualenv dan pip", "numchild": 0, "show_in_menus": false, "live": true, "seo_title": "", "first_published_at": "2015-08-13T00:13:32.647Z", "latest_revision_created_at": "2015-08-13T23:40:08.846Z", "depth": 4, "search_description": "", "content_type": 34, "has_unpublished_changes": false, "owner": 1, "path": "0001000100010004", "url_path": "/home/blog/modules-python-yang-wajib-dimiliki---virtualenv-dan-pip/", "expired": false, "slug": "modules-python-yang-wajib-dimiliki---virtualenv-dan-pip", "expire_at": null, "go_live_at": null}, "model": "wagtailcore.page", "pk": 9}, {"fields": {"locked": false, "title": "Kivy Tutorial 2 - Setting up the environment", "numchild": 0, "show_in_menus": false, "live": true, "seo_title": "", "first_published_at": "2015-08-14T00:39:38.276Z", "latest_revision_created_at": "2015-08-14T01:35:34.882Z", "depth": 4, "search_description": "", "content_type": 34, "has_unpublished_changes": false, "owner": 1, "path": "0001000100010005", "url_path": "/home/blog/kivy-tutorial-2---setting-up-the-environment/", "expired": false, "slug": "kivy-tutorial-2---setting-up-the-environment", "expire_at": null, "go_live_at": null}, "model": "wagtailcore.page", "pk": 10}, {"fields": {"locked": false, "title": "Kivy Tutorial 3 - Kivy Basics", "numchild": 0, "show_in_menus": false, "live": true, "seo_title": "", "first_published_at": "2015-08-14T01:10:09.881Z", "latest_revision_created_at": "2015-08-14T04:01:37.990Z", "depth": 4, "search_description": "", "content_type": 34, "has_unpublished_changes": false, "owner": 1, "path": "0001000100010006", "url_path": "/home/blog/kivy-tutorial-3---kivy-basics/", "expired": false, "slug": "kivy-tutorial-3---kivy-basics", "expire_at": null, "go_live_at": null}, "model": "wagtailcore.page", "pk": 11}, {"fields": {"locked": false, "title": "Perkenalan ORM dan SQLAlchemy", "numchild": 0, "show_in_menus": false, "live": true, "seo_title": "", "first_published_at": "2015-08-14T02:26:40.339Z", "latest_revision_created_at": "2015-08-15T01:03:02.437Z", "depth": 4, "search_description": "", "content_type": 34, "has_unpublished_changes": false, "owner": 1, "path": "0001000100010007", "url_path": "/home/blog/perkenalan-orm-dan-sqlalchemy/", "expired": false, "slug": "perkenalan-orm-dan-sqlalchemy", "expire_at": null, "go_live_at": null}, "model": "wagtailcore.page", "pk": 12}, {"fields": {"locked": false, "title": "Kivy Tutorial 4 - Database Support", "numchild": 0, "show_in_menus": false, "live": true, "seo_title": "", "first_published_at": "2015-08-14T04:05:14.619Z", "latest_revision_created_at": "2015-08-14T04:29:03.857Z", "depth": 4, "search_description": "", "content_type": 34, "has_unpublished_changes": false, "owner": 1, "path": "0001000100010008", "url_path": "/home/blog/kivy-tutorial-4---database-support/", "expired": false, "slug": "kivy-tutorial-4---database-support", "expire_at": null, "go_live_at": null}, "model": "wagtailcore.page", "pk": 13}, {"fields": {"locked": false, "title": "Kivy Tutorial 5 - Packaging untuk Android", "numchild": 0, "show_in_menus": false, "live": true, "seo_title": "", "first_published_at": "2015-08-14T05:47:52.758Z", "latest_revision_created_at": "2015-08-14T06:19:37.195Z", "depth": 4, "search_description": "", "content_type": 34, "has_unpublished_changes": false, "owner": 1, "path": "0001000100010009", "url_path": "/home/blog/kivy-tutorial-5---packaging-untuk-android/", "expired": false, "slug": "kivy-tutorial-5---packaging-untuk-android", "expire_at": null, "go_live_at": null}, "model": "wagtailcore.page", "pk": 14}, {"fields": {"locked": false, "title": "Perkenalan Django", "numchild": 0, "show_in_menus": false, "live": true, "seo_title": "", "first_published_at": "2015-08-14T06:23:41.929Z", "latest_revision_created_at": "2015-08-14T06:33:38.431Z", "depth": 4, "search_description": "", "content_type": 34, "has_unpublished_changes": false, "owner": 1, "path": "000100010001000A", "url_path": "/home/blog/perkenalan-django/", "expired": false, "slug": "perkenalan-django", "expire_at": null, "go_live_at": null}, "model": "wagtailcore.page", "pk": 15}, {"fields": {"locked": false, "title": "Version Control System Menggunakan GitHub", "numchild": 0, "show_in_menus": false, "live": true, "seo_title": "", "first_published_at": "2015-08-14T06:34:56.123Z", "latest_revision_created_at": "2015-08-15T01:02:24.398Z", "depth": 4, "search_description": "", "content_type": 34, "has_unpublished_changes": false, "owner": 1, "path": "000100010001000B", "url_path": "/home/blog/version-control-system-menggunakan-github/", "expired": false, "slug": "version-control-system-menggunakan-github", "expire_at": null, "go_live_at": null}, "model": "wagtailcore.page", "pk": 16}]